{"version":3,"sources":["webpack:///./src/models/post.js","webpack:///./src/components/post-header/index.js","webpack:///./src/components/post-cards-adjacent/index.js","webpack:///./src/components/post-content/index.js","webpack:///./src/components/utterances/index.js","webpack:///./src/templates/blog-template.js"],"names":["Post","id","node","html","excerpt","frontmatter","slug","emoji","categories","title","author","date","this","post","className","key","to","category","prevPost","nextPost","dangerouslySetInnerHTML","__html","Utterances","repo","theme","rootElm","React","useEffect","utterances","document","utterancesConfig","src","branch","label","async","crossorigin","Object","ref","data","curPost","comments","utterancesRepo","description"],"mappings":"sLAAqBA,EACnB,YAAmB,IACTC,EAA2CC,EADnC,GACJC,EAAuCD,EADnC,KACEE,EAAiCF,EADnC,QACWG,EAAwBH,EADnC,YAERI,EAD2CJ,EADnC,YAGRK,EAA2CF,EAHnC,MAGDG,EAAoCH,EAHnC,WAGWI,EAAwBJ,EAHnC,MAGkBK,EAAiBL,EAHnC,OAG0BM,EAASN,EAHnC,KAKhBO,KAAKX,GAAL,EACAW,KAAKR,QAAL,EACAQ,KAAKL,MAAL,EACAK,KAAKT,KAAL,EACAS,KAAKN,KAAL,EACAM,KAAKH,MAAL,EACAG,KAAKF,OAAL,EACAE,KAAKD,KAAL,EACAC,KAAKJ,WAAaA,QAAlB,O,yICcJ,G,UAxBmB,SAAC,GAAc,IAAZK,EAAW,EAAXA,KACpB,OACE,4BAAQC,UAAU,uBAChB,yBAAKA,UAAU,eACZD,SAAc,yBAAKC,UAAU,SAASD,EADzC,OAGE,yBAAKC,UAAU,QACb,yBAAKA,UAAU,cACZD,EAAA,gBAAoB,mBACnB,0BAAMC,UAAN,WAA2BC,IAA3B,EAA0CC,GAAE,UAAYC,GADrC,QAQzB,wBAAIH,UAAU,SAASD,EAbzB,OAcE,yBAAKC,UAAU,QAAf,aACY,gCAASD,EADrB,cAC8CA,EAjBpD,UCsCF,G,UAtC0B,SAAC,GAA4B,IAA1BK,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SACrC,OACE,yBAAKL,UAAU,+BACb,yBAAKA,UAAU,uBACb,yBAAKA,UAAU,8BACZK,GACC,0BAAML,UAAN,iBAAiCC,IAAKI,EAAtC,GAAmDH,GAAIG,EAASb,MAC9D,yBAAKQ,UAAU,aADjB,QAEE,yBAAKA,UAAU,SAASK,EALhC,SASE,yBAAKL,UAAU,8BACZI,GACC,0BAAMJ,UAAN,iBAAiCC,IAAKG,EAAtC,GAAmDF,GAAIE,EAASZ,MAC9D,yBAAKQ,UAAU,aADjB,QAEE,yBAAKA,UAAU,SAASI,EAfpC,a,YCMF,G,UARoB,SAAC,GAAD,IAAGf,EAAH,cAClB,yBAAKW,UAAU,wBACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAL,WAA0BM,wBAAyB,CAAEC,OAAQlB,SCFtDmB,EAAa,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MAC3BC,EAAUC,IAAhB,YAsBA,OApBAC,qBAAU,WACR,GAAKF,EAAD,SAAJ,IAAwBA,4BAAxB,CACA,IAAMG,EAAaC,uBAAnB,UACMC,EAAmB,CACvBC,IAVN,gCAWMR,KAFuB,EAGvBS,OAXN,SAYMR,MAAOA,2BAJgB,cAKvBS,MALuB,UAMvBC,OANuB,EAOvB,aAPuB,WAQvBC,YAAa,aAGfC,wBAAsC,YACpCR,iBAAmCE,EAAnCF,OAEFH,4BACC,CAACF,EAAK,EAlBTI,IAoBO,yBAAKb,UAAL,aAA4BuB,IAAKZ,KChB3B,sBAAe,IAAD,IAAXa,EAAW,EAAXA,KACVC,EAAU,IAAI,EAAJ,EAASD,EAAzB,KACMpB,EAAWoB,QAAa,IAAI,EAAJ,EAASA,EAAvC,MACMnB,EAAWmB,QAAa,IAAI,EAAJ,EAASA,EAAvC,MACQE,GAJmB,UAINF,EAJM,yBAINA,EAJM,uBAKrBG,EAAiBD,SAAH,UAAGA,EAAH,+BAAGA,EAAvB,KAEA,OACE,uCACG,gBAAGhB,EAAH,eACC,2BACE,uBAAKf,MAAO8B,aAAF,EAAEA,EAAZ,MAA4BG,YAAaH,aAAF,EAAEA,EAASnC,UAClD,qBAAYS,KAAM0B,IAClB,qBAAapC,KAAMoC,EAAQpC,OAC3B,qBAAmBe,SAAnB,EAAuCC,SAAUA,IAChDsB,GAAkB,qBAAYlB,KAAZ,EAAkCC,MAAOA","file":"component---src-templates-blog-template-js-50baa88fdd75e0f7bfcf.js","sourcesContent":["export default class Post {\n  constructor(node) {\n    const { id, html, excerpt, frontmatter, fields } = node;\n    const { slug } = fields;\n    const { emoji, categories, title, author, date } = frontmatter;\n\n    this.id = id;\n    this.excerpt = excerpt;\n    this.emoji = emoji;\n    this.html = html;\n    this.slug = slug;\n    this.title = title;\n    this.author = author;\n    this.date = date;\n    this.categories = categories.split(' ');\n  }\n}\n","import { Link } from 'gatsby';\nimport React from 'react';\nimport './style.scss';\n\nconst PostHeader = ({ post }) => {\n  return (\n    <header className=\"post-header-wrapper\">\n      <div className=\"post-header\">\n        {post.emoji && <div className=\"emoji\">{post.emoji}</div>}\n\n        <div className=\"info\">\n          <div className=\"categories\">\n            {post.categories.map((category) => (\n              <Link className=\"category\" key={category} to={`/posts/${category}`}>\n                {category}\n              </Link>\n            ))}\n          </div>\n        </div>\n\n        <h1 className=\"title\">{post.title}</h1>\n        <div className=\"info\">\n          posted by <strong>{post.author}</strong> · {post.date}\n        </div>\n      </div>\n    </header>\n  );\n};\nexport default PostHeader;\n","import { Link } from 'gatsby';\nimport React from 'react';\n\nimport './style.scss';\n\nconst PostCardsAdjacent = ({ prevPost, nextPost }) => {\n  return (\n    <div className=\"post-cards-adjacent-wrapper\">\n      <div className=\"post-cards-adjacent\">\n        <div className=\"post-card-adjacent-wrapper\">\n          {nextPost && (\n            <Link className=\"post-card prev\" key={nextPost.id} to={nextPost.slug}>\n              <div className=\"direction\">이전 글</div>\n              <div className=\"title\">{nextPost.title}</div>\n            </Link>\n          )}\n        </div>\n        <div className=\"post-card-adjacent-wrapper\">\n          {prevPost && (\n            <Link className=\"post-card next\" key={prevPost.id} to={prevPost.slug}>\n              <div className=\"direction\">다음 글</div>\n              <div className=\"title\">{prevPost.title}</div>\n            </Link>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// PostCards.propTypes = {\n//   contents: PropTypes.object({\n//     id: PropTypes.string,\n//     html: PropTypes.string,\n//     frontmatter: PropTypes.object({\n//       date: PropTypes.string,\n//       title: PropTypes.string,\n//       category: PropTypes.string,\n//     }),\n//\n//   }).isRequired,\n// };\n\nexport default PostCardsAdjacent;\n","import React from 'react';\n\nimport './style.scss';\n\nconst PostContent = ({ html }) => (\n  <div className=\"post-content-wrapper\">\n    <div className=\"post-content\">\n      <div className=\"markdown\" dangerouslySetInnerHTML={{ __html: html }} />\n    </div>\n  </div>\n);\n\nexport default PostContent;\n","import React, { useEffect } from 'react';\n\nconst src = 'https://utteranc.es/client.js';\nconst branch = 'master';\n\nexport const Utterances = ({ repo, theme }) => {\n  const rootElm = React.createRef();\n\n  useEffect(() => {\n    if (!rootElm.current || rootElm.current.childNodes.length !== 0) return;\n    const utterances = document.createElement('script');\n    const utterancesConfig = {\n      src,\n      repo,\n      branch,\n      theme: theme === 'light' ? 'github-light' : 'photon-dark',\n      label: 'comment',\n      async: true,\n      'issue-term': 'pathname',\n      crossorigin: 'anonymous',\n    };\n\n    Object.keys(utterancesConfig).forEach((configKey) => {\n      utterances.setAttribute(configKey, utterancesConfig[configKey]);\n    });\n    rootElm.current.appendChild(utterances);\n  }, [repo, rootElm, theme]);\n\n  return <div className=\"utterances\" ref={rootElm} />;\n};\n","import React from 'react';\nimport { graphql } from 'gatsby';\nimport { ThemeToggler } from 'gatsby-plugin-dark-mode';\n\nimport Layout from '../components/layout';\nimport SEO from '../components/seo';\nimport PostHeader from '../components/post-header';\nimport PostCardsAdjacent from '../components/post-cards-adjacent';\nimport Post from '../models/post';\nimport PostContent from '../components/post-content';\nimport { Utterances } from '../components/utterances';\n\nexport default ({ data }) => {\n  const curPost = new Post(data.cur);\n  const prevPost = data.prev && new Post(data.prev);\n  const nextPost = data.next && new Post(data.next);\n  const { comments } = data.site?.siteMetadata;\n  const utterancesRepo = comments?.utterances?.repo;\n\n  return (\n    <ThemeToggler>\n      {({ theme }) => (\n        <Layout>\n          <SEO title={curPost?.title} description={curPost?.excerpt} />\n          <PostHeader post={curPost} />\n          <PostContent html={curPost.html} />\n          <PostCardsAdjacent prevPost={prevPost} nextPost={nextPost} />\n          {utterancesRepo && <Utterances repo={utterancesRepo} theme={theme} />}\n        </Layout>\n      )}\n    </ThemeToggler>\n  );\n};\n\nexport const pageQuery = graphql`\n  query($slug: String, $nextSlug: String, $prevSlug: String) {\n    cur: markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      html\n      excerpt(pruneLength: 500, truncate: true)\n      frontmatter {\n        date(formatString: \"MMMM DD, YYYY\")\n        title\n        categories\n        author\n        emoji\n      }\n      fields {\n        slug\n      }\n    }\n\n    next: markdownRemark(fields: { slug: { eq: $nextSlug } }) {\n      id\n      html\n      frontmatter {\n        date(formatString: \"MMMM DD, YYYY\")\n        title\n        categories\n        author\n        emoji\n      }\n      fields {\n        slug\n      }\n    }\n\n    prev: markdownRemark(fields: { slug: { eq: $prevSlug } }) {\n      id\n      html\n      frontmatter {\n        date(formatString: \"MMMM DD, YYYY\")\n        title\n        categories\n        author\n        emoji\n      }\n      fields {\n        slug\n      }\n    }\n\n    site {\n      siteMetadata {\n        siteUrl\n        comments {\n          utterances {\n            repo\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}