{"componentChunkName":"component---src-templates-blog-template-js","path":"/자바스크립트/16.프로퍼티 어트리뷰트/","result":{"data":{"cur":{"id":"8399a6d9-5f57-5200-a773-688df62d36a5","html":"<h1 id=\"1-내부슬롯과-내부메소드\" style=\"position:relative;\"><a href=\"#1-%EB%82%B4%EB%B6%80%EC%8A%AC%EB%A1%AF%EA%B3%BC-%EB%82%B4%EB%B6%80%EB%A9%94%EC%86%8C%EB%93%9C\" aria-label=\"1 내부슬롯과 내부메소드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 내부슬롯과 내부메소드</h1>\n<p>프로퍼티 어트리뷰트를 이해하기 위해서는 내부 슬롯(internal slot)과 내부 메서드(internal method)의 개념이 필요하다.</p>\n<p>내부슬롯과 내부메서드는 자바스크립트 엔진의 구현 알고리즘을 설명하기 위해 ECMAScript 사양에서 사용하는 의사 프로퍼티와 의사메서드이다. 이중 대괄호로 감싼 이름들이 내부슬롯과 내부메서드이다.</p>\n<h1 id=\"2-프로퍼티-어트리뷰트와-프로퍼티-디스크립터-객체\" style=\"position:relative;\"><a href=\"#2-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0-%EC%96%B4%ED%8A%B8%EB%A6%AC%EB%B7%B0%ED%8A%B8%EC%99%80-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0-%EB%94%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%84%B0-%EA%B0%9D%EC%B2%B4\" aria-label=\"2 프로퍼티 어트리뷰트와 프로퍼티 디스크립터 객체 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 프로퍼티 어트리뷰트와 프로퍼티 디스크립터 객체</h1>\n<p><strong><em>자바스크립트 엔진은 프로퍼티를 생성할 때 프로퍼티의 상태를 나타내는 프로퍼티 어트리뷰트를 기본값으로 자동 정의한다.</em></strong></p>\n<p>프로퍼티 어트리뷰트는 자바스크립트 엔진이 관리하는 내부상태 값이다. 따라서 직접 접근할 수 없지만 간접적으로 확인할 수 는 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const person = {\n  name: 'Lee',\n}\n\nconsole.log(Object.getOwnPropertyDescriptor(person, 'name'))\n\n// {value: 'Lee', writable: true, enumerable: true, configurable: true}</code></pre></div>\n<p>getOwnPropertyDescriptor 메서드는 프로퍼티 어트리뷰트 정보를 제공하는 <strong><em>프로퍼티 디스크립터(PropertyDescriptor)</em></strong>객체를 반환한다.</p>\n<h1 id=\"3-데이터-프로퍼티와-접근자-프로퍼티\" style=\"position:relative;\"><a href=\"#3-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0%EC%99%80-%EC%A0%91%EA%B7%BC%EC%9E%90-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0\" aria-label=\"3 데이터 프로퍼티와 접근자 프로퍼티 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 데이터 프로퍼티와 접근자 프로퍼티</h1>\n<p>데이터 프로퍼티 : 키와 값으로 구성된 프러퍼티</p>\n<p>접근자 프로퍼티 : 자체적으로 값을 갖지 않고 프로퍼티의 값을 읽거나 저장할 때 호출되는 접근자 함수로 구성된 프로퍼티</p>\n<h3 id=\"3-1-데이터-프로퍼티\" style=\"position:relative;\"><a href=\"#3-1-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0\" aria-label=\"3 1 데이터 프로퍼티 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3-1. 데이터 프로퍼티</h3>\n<table>\n<thead>\n<tr>\n<th>프로퍼티 어트리뷰트</th>\n<th>프로퍼티 디스크립터 객체의 프로퍼티</th>\n<th>설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>[[Value]]</td>\n<td>value</td>\n<td>프로퍼티 값의 변경 가능 여부를 나타내며 boolean 값을 갖는다</td>\n</tr>\n<tr>\n<td>[[Writable]]]</td>\n<td>writable</td>\n<td>프로퍼티 키를 통해 프로퍼티 값에 접근하면 반한되는 값</td>\n</tr>\n<tr>\n<td>[[Enumerable]]</td>\n<td>enumrable</td>\n<td>프로퍼티의 열거 가능 여부를 나타내며 boolean 값을 갖는다</td>\n</tr>\n<tr>\n<td>[[Configurable]]</td>\n<td>configurable</td>\n<td>프로퍼티의 재정의 가능 여부를 나타낸다.</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"32-접근자-프로퍼티\" style=\"position:relative;\"><a href=\"#32-%EC%A0%91%EA%B7%BC%EC%9E%90-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0\" aria-label=\"32 접근자 프로퍼티 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.2 접근자 프로퍼티</h3>\n<table>\n<thead>\n<tr>\n<th>프로퍼티 어트리뷰트</th>\n<th>프로퍼티 디스크립터 객체의 프로퍼티</th>\n<th>설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>[[Get]]</td>\n<td>get</td>\n<td>접근자 프로퍼티를 통해 데이터 프로퍼티의 값을 읽을 때 호출되는 접근자 함수</td>\n</tr>\n<tr>\n<td>[[Set]]]</td>\n<td>set</td>\n<td>접근자 프로퍼티를 통해 데이터 프로퍼티의 값을 저장할 때 호출되는 접근자 함수</td>\n</tr>\n<tr>\n<td>[[Enumerable]]</td>\n<td>enumrable</td>\n<td>프로퍼티의 열거 가능 여부를 나타내며 boolean 값을 갖는다</td>\n</tr>\n<tr>\n<td>[[Configurable]]</td>\n<td>configurable</td>\n<td>프로퍼티의 재정의 가능 여부를 나타낸다.</td>\n</tr>\n</tbody>\n</table>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const person = {\n  firstName: 'Han',\n  lastName: 'sangjun',\n\n  get fullName() {\n    return `${this.firstName} ${this.lastName}`;\n  },\n\n  set fullName(name) {\n    [this.firstName, this.lastName] = name.split(' ');\n  }\n};</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">console.log(person.firstName + ' ' + person.lastName) //Han sangjun\nperson.fullName = \"Heegun Lee\" // set함수 실행\n\nlet descriptor = Object.getOwnPropertyDescriptor(person, 'firstName')\nconsole.log(descriptor)\n\n//\n  {value: 'Heegun', writable: true, enumerable: true, configurable: true} \n//\n\nlet descriptor = Object.getOwnPropertyDescriptor(person, 'fullName')\nconsole.log(descriptor)\n\n//\n  {enumerable: true, configurable: true, get: ƒ, set: ƒ}\n//</code></pre></div>\n<h1 id=\"4-프로퍼티-정의\" style=\"position:relative;\"><a href=\"#4-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0-%EC%A0%95%EC%9D%98\" aria-label=\"4 프로퍼티 정의 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 프로퍼티 정의</h1>\n<p>Object.defineProperty 메서드를 사용하여 프로퍼티 어트리뷰트를 정의할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Object.defineProperty(person, 'firstName' , {\n  value: \"~~~\",\n  writable: true of false,\n  enumerable: true of false,\n  configurable: true of false,\n})</code></pre></div>\n<table>\n<thead>\n<tr>\n<th>프로퍼티 디스크립터 객체의 프로퍼티</th>\n<th>대응하는 프로퍼티 어트리뷰트</th>\n<th>생략했을 때 기본 값</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>value</td>\n<td>[[Value]]</td>\n<td>undefined</td>\n</tr>\n<tr>\n<td>get</td>\n<td>[[Get]]</td>\n<td>undefined</td>\n</tr>\n<tr>\n<td>set</td>\n<td>[[Set]]</td>\n<td>undefined</td>\n</tr>\n<tr>\n<td>writable</td>\n<td>[[Writable]]</td>\n<td>false</td>\n</tr>\n<tr>\n<td>enumerable</td>\n<td>[[Enumerable]]</td>\n<td>false</td>\n</tr>\n<tr>\n<td>configurable</td>\n<td>[[Configurable]]</td>\n<td>false</td>\n</tr>\n</tbody>\n</table>\n<p>Object.defineProperties 메서드를 사용하면 여러개의 프로퍼티를 한 번에 정의할 수 있다.</p>\n<h1 id=\"5-객체-변경감지\" style=\"position:relative;\"><a href=\"#5-%EA%B0%9D%EC%B2%B4-%EB%B3%80%EA%B2%BD%EA%B0%90%EC%A7%80\" aria-label=\"5 객체 변경감지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. 객체 변경감지</h1>\n<p>객체는 변경 가능한 값이므로 재할당 없이 직접 변경할 수 있다. 프로퍼티를 추가하거나 삭제할 수 있고 프로퍼티 값을 갱신할 수 있으며 프로퍼티 어트리뷰트를 재정의 할 수 있다.</p>\n<h3 id=\"5-1-객체-확장-금지\" style=\"position:relative;\"><a href=\"#5-1-%EA%B0%9D%EC%B2%B4-%ED%99%95%EC%9E%A5-%EA%B8%88%EC%A7%80\" aria-label=\"5 1 객체 확장 금지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5-1. 객체 확장 금지</h3>\n<p>Object.perventExtensions 메서드는 객체의 확장을 금지한다. <strong><em>객체 확장 금지</em></strong>란 프로퍼티 추가 금지를 의미힌다.</p>\n<h3 id=\"5-2-객체-밀봉\" style=\"position:relative;\"><a href=\"#5-2-%EA%B0%9D%EC%B2%B4-%EB%B0%80%EB%B4%89\" aria-label=\"5 2 객체 밀봉 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5-2. 객체 밀봉</h3>\n<p>Object.seal 메서드는 객체를 밀봉한다. <strong><em>밀봉된 객체는 읽기와 쓰기만 가능하다.</em></strong></p>\n<h3 id=\"5-3-객체-동결\" style=\"position:relative;\"><a href=\"#5-3-%EA%B0%9D%EC%B2%B4-%EB%8F%99%EA%B2%B0\" aria-label=\"5 3 객체 동결 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5-3 객체 동결</h3>\n<p>Object.freeze 메서드는 객체를 동결한다. <strong><em>객체 동결</em></strong>이란 프로퍼티 추가 및 삭제와 프로퍼티 어트리뷰트 재정의 금지, 프로퍼티 값 갱신 금지를 의미한다. 즉 <strong><em>동결된 객체는 읽기만 가능하다.</em></strong></p>\n<h3 id=\"5-4-불변-객체\" style=\"position:relative;\"><a href=\"#5-4-%EB%B6%88%EB%B3%80-%EA%B0%9D%EC%B2%B4\" aria-label=\"5 4 불변 객체 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5-4. 불변 객체</h3>\n<p>중첩 객체는 Object.freeze 메서드로 객체를 동결해도 동결할 수 없다.</p>\n<p>따라서 객체의 중첩객체 까지 동결하기 위해서는 모든 프로퍼티에 대해 재귀적으로 Object.freeze 메서드를 호출해야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function deepFreeze(target) {\n  if(target &amp;&amp; typeof target === 'object' &amp;&amp; !Object.isFrozen(target)) {\n    Object.freeze(target)\n    Object.keys(target).forEach(key => deepFrreze(target[key]))\n  }\n  return target;\n}</code></pre></div>","excerpt":"1. 내부슬롯과 내부메소드 프로퍼티 어트리뷰트를 이해하기 위해서는 내부 슬롯(internal slot)과 내부 메서드(internal method)의 개념이 필요하다. 내부슬롯과 내부메서드는 자바스크립트 엔진의 구현 알고리즘을 설명하기 위해 ECMAScript 사양에서 사용하는 의사 프로퍼티와 의사메서드이다. 이중 대괄호로 감싼 이름들이 내부슬롯과 내부메서드이다. 2. 프로퍼티 어트리뷰트와 프로퍼티 디스크립터 객체 자바스크립트 엔진은 프로퍼티를 생성할 때 프로퍼티의 상태를 나타내는 프로퍼티 어트리뷰트를 기본값으로 자동 정의한다. 프로퍼티 어트리뷰트는 자바스크립트 엔진이 관리하는 내부상태 값이다. 따라서 직접 접근할 수 없지만 간접적으로 확인할 수 는 있다. getOwnPropertyDescriptor 메서드는 프로퍼티 어트리뷰트 정보를 제공하는 프로퍼티 디스크립터(PropertyDescriptor)객체를 반환한다. 3. 데이터 프로퍼티와 접근자 프로퍼티 데이터 프로퍼티 : 키와 값…","frontmatter":{"date":"December 01, 2021","title":"16. 프로퍼티 어트리뷰트","categories":"javascript","author":"sangzun","emoji":null},"fields":{"slug":"/자바스크립트/16.프로퍼티 어트리뷰트/"}},"next":{"id":"002c9c8b-d454-556e-adb3-f1605719e8ad","html":"<h1 id=\"1-var-키워드의-문제점\" style=\"position:relative;\"><a href=\"#1-var-%ED%82%A4%EC%9B%8C%EB%93%9C%EC%9D%98-%EB%AC%B8%EC%A0%9C%EC%A0%90\" aria-label=\"1 var 키워드의 문제점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. var 키워드의 문제점</h1>\n<ol>\n<li>변수 중복 선언 허용</li>\n<li>함수 레벨 스코프 : var 키워드로 선언한 변수는 오로지 함수의 코드 블록만을 지역 스코프로 인정한다. 따라서 함수 외부에서 var 키워드로 선언한 변수는 코드 블록 내에서 선언해도 모두 전역 변수가 된다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var x = 10;\n\nif (true) {\n  var x = 1;\n}\nconsole.log(x) // 1</code></pre></div>\n<ol start=\"3\">\n<li>변수 호이스팅 : 변수 선언문 이전에 변수를 참조하는것은 변수 호이스팅에 의해 에러를 발생시키지는 않지만 프로그램의 흐름상 맞지 않을뿐더러 가독성을 떨어뜨리고 오류를 발생시킬 여지를 남긴다.</li>\n</ol>\n<h1 id=\"2-let-키워드\" style=\"position:relative;\"><a href=\"#2-let-%ED%82%A4%EC%9B%8C%EB%93%9C\" aria-label=\"2 let 키워드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. let 키워드</h1>\n<ol>\n<li>변수 중복 선언 금지</li>\n<li>블록 레벨 스코프</li>\n<li>변수 호이스팅 : let키워드로 선언한 변수는 <strong><em>선언단계와 초기화단계가 분리되어 진행된다.</em></strong> 만약 초기화 되기 이전에 변수에 접근하려고 하면 참조 에러가 발생한다. 스코프의 시작지점부터 변수를 참조할 수 없는 구간을 <strong><em>일시적 사각지대(Temporal Dead Zone) TDZ 라고 부른다.</em></strong></li>\n</ol>\n<h1 id=\"3-전역객체와-let\" style=\"position:relative;\"><a href=\"#3-%EC%A0%84%EC%97%AD%EA%B0%9D%EC%B2%B4%EC%99%80-let\" aria-label=\"3 전역객체와 let permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 전역객체와 let</h1>\n<p>let 키워드로 선언된 전역 변수는 전역 객체의 프로퍼티가 아니다.</p>\n<h1 id=\"4-const-키워드\" style=\"position:relative;\"><a href=\"#4-const-%ED%82%A4%EC%9B%8C%EB%93%9C\" aria-label=\"4 const 키워드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. const 키워드</h1>\n<p>const 키워드는 상수를 선언하기 위해 사용한다. 하지만 반드시 상수만을 위해 사용하는것은 아니다.</p>\n<ol>\n<li>const 키워드로 선언한 변수는 반드시 선언과 동시에 초기화 해야한다.</li>\n<li>const 키워드로 선언한 변수는 재할당이 금지된다.</li>\n<li>const 키워드로 선언한 변수에 원시 값을 할당한 경우 변수 값을 변경할 수 없다. —> 원시값은 변경 불가능한 값이며 const는 재할당이 금지되어 있다. 따라서 const를 상수를 표현하는데 사용하기도 한다.</li>\n</ol>\n<h3 id=\"4-1-const-키워드와-객체\" style=\"position:relative;\"><a href=\"#4-1-const-%ED%82%A4%EC%9B%8C%EB%93%9C%EC%99%80-%EA%B0%9D%EC%B2%B4\" aria-label=\"4 1 const 키워드와 객체 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4-1. const 키워드와 객체</h3>\n<p>const 키워드로 선언된 변수에 객체를 할당한 경우에 값을 변경 할 수 있따.객체는 재할당없이도 직접 변경이 가능하기 때문이다. 즉 const 키워드는 재할당을 금지할뿐 <strong><em>불변</em></strong>은 아니다.</p>\n<h1 id=\"5-var-vs-let-vs-const\" style=\"position:relative;\"><a href=\"#5-var-vs-let-vs-const\" aria-label=\"5 var vs let vs const permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. var vs let vs const</h1>\n<p>변수 선언에는 기본적으로 const를 사용하고 let은 재할당이 필요한 경우에 한정해 사용하는것이 좋다. const 키워드를 사용하면 의도치 않은 재할당을 방지하기 때문에 좀더 안전하다.</p>\n<p>변수를 선언하는 시점에는 재할딩이 필요할지 잘 모르는 경우가 많다. 그리고 객체는 의외로 재할당하는 경우가 드물다. 따라서 변수를 선언할 때는 일단 const 키워드를 사용하고 재할당이 필요하다면 let을 사용한다.</p>","frontmatter":{"date":"November 30, 2021","title":"15. let, const 키워드와 블록 레벨 스코프","categories":"javascript","author":"sangzun","emoji":null},"fields":{"slug":"/자바스크립트/15.let,const키워드와 블록레벨 스코프/"}},"prev":{"id":"2e7572ae-ba24-5a10-97c8-98c0a3c2b9e6","html":"<h1 id=\"1-일급-객체\" style=\"position:relative;\"><a href=\"#1-%EC%9D%BC%EA%B8%89-%EA%B0%9D%EC%B2%B4\" aria-label=\"1 일급 객체 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 일급 객체</h1>\n<p>아래의 조건을 만족하는 객체를 일급 객체라 한다.</p>\n<ul>\n<li>무명의 리터럴로 생성할 수 있다.</li>\n<li>변수나 자료구조에 저장할 수 있다.</li>\n<li>함수의 매개변수에 전달할 수 있다.</li>\n<li>함수의 반환값으로 사용할 수 있다.</li>\n</ul>\n<p>자바스크립트에서 함수는 객체다. 객체이므로 값과 동일하게 취급할 수 있다. 따라서 매개변수에 함수를 전달할 수 있고 함수의 반환값으로도 사용할 수 있다.</p>\n<p>함수와 일반객체와의 차이는 일반 객체는 호출 할 수 없지만 함수는 호출 할 수 있다. 또한 함수는 프로퍼티를 가지고 있다.</p>\n<h1 id=\"2-함수-객체의-프로퍼티\" style=\"position:relative;\"><a href=\"#2-%ED%95%A8%EC%88%98-%EA%B0%9D%EC%B2%B4%EC%9D%98-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0\" aria-label=\"2 함수 객체의 프로퍼티 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 함수 객체의 프로퍼티</h1>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function square(number) {\n  return number * number;\n}\n\nconsole.dir(square) // ƒ square(number)\n\nconsole.log(Object.getOwnPropertyDescriptors(square))\n/*\n  {length: {…}, name: {…}, arguments: {…}, caller: {…}, prototype: {…}}\n*/</code></pre></div>\n<p>arguments, caller, length, name, prototype 프로퍼티는 모두 함수 객체의 고유 프로퍼티다.</p>\n<h3 id=\"2-1-arguments-프로퍼티\" style=\"position:relative;\"><a href=\"#2-1-arguments-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0\" aria-label=\"2 1 arguments 프로퍼티 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2-1. arguments 프로퍼티</h3>\n<p>arguments 프로퍼티 값은 arguments 객체다. arguments 객체는 함수 호출시 전달된 인수들의 정보를 담고 있는 순회 가능한 유사 배열 객체이며 함수 내부에서 지역변수처럼 사용된다.</p>\n<p>선언된 매개변수의 개수보다 인수를 적게 전달했을경우 매개변수는 undefined로 초기화된 상태를 유지하며 매개변수의 개수보다 많은 인수를 전달한 경우 초과된 인수는 무시한다 이 때 모든 인수는 arguments 객체의 프로퍼티로 보관된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function multiply(x,y) {\n  console.log(arguments);\n  return x != y;\n}\n\nconsole.log(multiply(1,2,3))</code></pre></div>\n<h3 id=\"2-2-caller-프로퍼티\" style=\"position:relative;\"><a href=\"#2-2-caller-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0\" aria-label=\"2 2 caller 프로퍼티 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2-2. caller 프로퍼티</h3>\n<p>caller 프로퍼티는 ECMAScript 사양에 포함되지 않는 비표준 프로퍼티다.\n함수 객체의 caller 프로퍼티는 함수 자신을 호출한 함수를 기리킨다.</p>\n<h3 id=\"2-3-lenght-프로퍼티\" style=\"position:relative;\"><a href=\"#2-3-lenght-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0\" aria-label=\"2 3 lenght 프로퍼티 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2-3. lenght 프로퍼티</h3>\n<p>함수 객체의 length 프로퍼티는 함수를 정의할 때 선언한 매개변수의 개수를 가리킨다.</p>\n<p>arguments 객체의 length 프로퍼티와 함수 객체의 length 프로퍼티 값은 다를 수 있다. arguments 객체의 length 프로퍼티는 인자의 개수를 가리키고 함수 객체의 length 프로퍼티는 매개변수의 개수를 기리킨다.</p>\n<h3 id=\"2-4-name-프로퍼티\" style=\"position:relative;\"><a href=\"#2-4-name-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0\" aria-label=\"2 4 name 프로퍼티 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2-4 name 프로퍼티</h3>\n<p>함수 객체의 name 프로퍼티는 함수 이름을 나타낸다. ES6에서 정식표준</p>\n<h3 id=\"2-5-__proto__-접근자-프로퍼티\" style=\"position:relative;\"><a href=\"#2-5-__proto__-%EC%A0%91%EA%B7%BC%EC%9E%90-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0\" aria-label=\"2 5 __proto__ 접근자 프로퍼티 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2-5. _<strong>_proto__</strong> 접근자 프로퍼티</h3>\n<p>모든객체는 [[Prototype]]이라는 내부슬롯을 가진다. _<strong>_proto__</strong>는 [[Prototype]] 내부 슬롯이 가리키는 프로토타입 객체이 접근하기 위해 사용하는 접근자 프로퍼티다.</p>\n<h3 id=\"2-6-prototype-프로퍼티\" style=\"position:relative;\"><a href=\"#2-6-prototype-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0\" aria-label=\"2 6 prototype 프로퍼티 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2-6 prototype 프로퍼티</h3>\n<p>prototype 프로퍼티는 생성자 함수로 호출할 수 있는 객체, 즉 constructor만이 소유하는 프로퍼티다. 함수 객체의 경우는 constructor (생성자 함수)로 호출할 수 있기때문에, prototype property를 가진다고 한다.</p>","frontmatter":{"date":"December 02, 2021","title":"18. 함수와 일급 객체","categories":"javascript","author":"sangzun","emoji":null},"fields":{"slug":"/자바스크립트/18.함수와 일급 객체/"}},"site":{"siteMetadata":{"siteUrl":"https://github.com/sangzun-han","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/자바스크립트/16.프로퍼티 어트리뷰트/","nextSlug":"/자바스크립트/15.let,const키워드와 블록레벨 스코프/","prevSlug":"/자바스크립트/18.함수와 일급 객체/"}},"staticQueryHashes":["1073350324","2938748437"]}