{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/자바스크립트/33.Sybmol/",
    "result": {"data":{"cur":{"id":"67f5c9bb-0ef6-5685-ae24-aa3fc538edba","html":"<h1 id=\"1-심벌이란\" style=\"position:relative;\"><a href=\"#1-%EC%8B%AC%EB%B2%8C%EC%9D%B4%EB%9E%80\" aria-label=\"1 심벌이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 심벌이란?</h1>\n<p><code class=\"language-text\">symbol</code> 은 ES6에서 도입된 7번째 데이터 타입으로 변경 불가능한 원시 타입의 값이다. 심벌값은 다른 값과 중복되지 않는 유일무이한 값이다. 따라서 이름의 충돌 위험이 없는 유일한 프로퍼티 키를 만들기 위해 사용한다.</p>\n<h1 id=\"2-심벌값-생성\" style=\"position:relative;\"><a href=\"#2-%EC%8B%AC%EB%B2%8C%EA%B0%92-%EC%83%9D%EC%84%B1\" aria-label=\"2 심벌값 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 심벌값 생성</h1>\n<p>심벌 값은 Symbol 함수를 호출하여 생성한다. 이 때 생성된 심벌 값은 <strong>외부로 노출되지 않아 확인할 수 없다.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const mySymbol = Symbol();\r\nconsole.log(typeof mySymbol); // symbol\r\nconsole.log(mySymbol);// Symbol()</code></pre></div>\n<p>Symbol 함수에는 선택적으로 문자열을 인수로 전달할 수 있다. 이 문자열은 생성된 심벌 값에 대한 설며으로 디버깅 용도로만 사용되며 심벌 값 생성에는 영향을 끼치지 않는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// 심벌값에 대한 설명이 같더라도 유일무이한 심벌 값을 생성\r\n\r\nconst mySymbol1= Symbol('mySymbol');\r\nconst mySymbol2= Symbol('mySymbol');\r\n\r\nconsole.log(mySymbol1===mySymbol2) // false</code></pre></div>\n<p>심벌값도 객체처럼 접근하면 암묵적으로 래퍼 객체를 생성한다. 심벌 값은 암묵적으로 문자열이나 숫자 타입으로 변환되지 않는다.\r\n단 boolean 타입으로는 암묵적으로 타입 변환된다. 이를 통해 if문에서 존재 확인이 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const mySymbol= Symbol();\r\nconsole.log(!!mySymbol); //true</code></pre></div>\n<p><code class=\"language-text\">Symbol.for</code> 메서드는 인수로 전달받은 문자열을 사용하여 키와 심벌 값의 쌍들이 저장되어있는 전역 심벌 레지스트리에서 해당 키와 일치하는 심벌 값을 검색한다.</p>\n<ul>\n<li>검색에 성공하면 새로운 심벌 값을 생성하지 않고 검색된 심벌 값을 반환한다.</li>\n<li>검색에 실패하면 새로운 심벌 값을 생성하여 <code class=\"language-text\">Symbol.for</code> 메서드의 인수로 전달된 키로 전역심벌 레지스트리에 저장한 후 생성된 심벌 값을 반환한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const s1 = Symbol.for('mySymbol');\r\nconst s2 = Symbol.for('mySymbol');\r\n\r\nconsole.log(s1 === s2); // true</code></pre></div>\n<p><code class=\"language-text\">Symbol.for</code> 메서드를 사용하면 애플리케이션 전역에서 중복되지 않는 유일무이한 상수인 심벌 값을 단 하나만 생성하여 전역 심벌 레지스트리를 통해 공유 할 수 있다.</p>\n<p><code class=\"language-text\">Symbol.keyFor</code> 메서드를 사용하면 전역 심벌 레지스트리에 저장된 심벌 값의 키를 추출 할 수 있다.</p>\n<h1 id=\"3-심벌과-상수\" style=\"position:relative;\"><a href=\"#3-%EC%8B%AC%EB%B2%8C%EA%B3%BC-%EC%83%81%EC%88%98\" aria-label=\"3 심벌과 상수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 심벌과 상수</h1>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const Direction = {\r\n  UP: 1,\r\n  DOWN: 2,\r\n  LEFT: 3,\r\n  RIGHT: 4\r\n}\r\n\r\nconst myDirection = Direction.UP;\r\n\r\nif(myDirection === Direction.UP) {\r\n  console.log(\"UP\")\r\n}</code></pre></div>\n<p>값에는 특별한 값이 없고 상수 이름 자체에 의미가 있는 경우가 있다. 이러한 경우 변경/중복 될 가능성이 있는 무의미한 상수 대신 중복될 가능성이 없는 유일무이한 심벌 값을 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const Direction = {\r\n  UP: Symbol('up'),\r\n  DOWN: Symbol('down'),\r\n  LEFT: Symbol('left'),\r\n  RIGHT: Symbol('right')\r\n}\r\n\r\nconst myDirection = Direction.UP;\r\n\r\nif(myDirection === Direction.UP) {\r\n  console.log(\"UP\")\r\n}</code></pre></div>\n<h1 id=\"4-심벌과-프로퍼티-키\" style=\"position:relative;\"><a href=\"#4-%EC%8B%AC%EB%B2%8C%EA%B3%BC-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0-%ED%82%A4\" aria-label=\"4 심벌과 프로퍼티 키 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 심벌과 프로퍼티 키</h1>\n<p>객체의 프로퍼티 키는 빈 문자열을 포함하는 모든 문자열 또는 심벌 값으로 만들 수 있으며, 동적으로 생성 할 수도 있다.\r\n심벌 값을 프로퍼티 키로 사용하라면 프로퍼티 키로 사용할 심벌 값에 대괄호를 사용해야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const obj = {\r\n  [Symbol.for('mySymbol')]: 1\r\n};\r\n\r\nobj[Symbol.for('mySymbol')]; // 1</code></pre></div>\n<p><strong>심벌 값은 유일무이한 값이므로 심벌 값으로 프로퍼티 키를 만들면 다른 프로퍼티 키와 절대 충돌하지 않는다.</strong></p>\n<h1 id=\"5-심벌과-프로퍼티-은닉\" style=\"position:relative;\"><a href=\"#5-%EC%8B%AC%EB%B2%8C%EA%B3%BC-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0-%EC%9D%80%EB%8B%89\" aria-label=\"5 심벌과 프로퍼티 은닉 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. 심벌과 프로퍼티 은닉</h1>\n<p>심벌 값을 프로퍼티 키로 사용하여 생성한 프로퍼티는 은닉할 수 있다. ES6에서 도입된 Object.getOwnPropertySymbols 메서드를 사용하면 심벌 값을 프로퍼티 키로 사용하여 생성한 프로퍼티를 찾을 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const obj = {\r\n  [Symbol('mySymbol')]: 1\r\n}\r\n\r\nfor (const key in obj) {\r\n  console.log(key); //\r\n}\r\n\r\nconsole.log(Object.keys(obj)); // []\r\nconsole.log(Object.getOwnPropertyNames(obj)); // []\r\n\r\nconsole.log(Object.getOwnPropertySymbols(obj)); // [Symbol(mySymbol)]</code></pre></div>\n<h1 id=\"6-심벌과-표준-빌트인-객체-확장\" style=\"position:relative;\"><a href=\"#6-%EC%8B%AC%EB%B2%8C%EA%B3%BC-%ED%91%9C%EC%A4%80-%EB%B9%8C%ED%8A%B8%EC%9D%B8-%EA%B0%9D%EC%B2%B4-%ED%99%95%EC%9E%A5\" aria-label=\"6 심벌과 표준 빌트인 객체 확장 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. 심벌과 표준 빌트인 객체 확장</h1>\n<p>표준 빌트인 객체에 사용자 정의 메서드를 직접 추가하여 확장하는것은 권장하지 않는다. 그 이유는 개발자가 직접 추가한 메서드와 미래에 표준 사양으로 추가될 메서드의 이름이 중복될 수 있기 때문이다.</p>\n<p>하지만 중복될 가능성이 없는 심벌 값으로 프로퍼티 키를 생성하여 표준 빌트인 객체를 확장하면 표준 빌트인 객체의 기존 프로퍼티 키와 충돌하지 않는것은 물론 추가될지 모르는 어떤 프로퍼티 키와도 충돌할 위험이 없다.</p>","excerpt":"1. 심벌이란?  은 ES6에서 도입된 7번째 데이터 타입으로 변경 불가능한 원시 타입의 값이다. 심벌값은 다른 값과 중복되지 않는 유일무이한 값이다. 따라서 이름의 충돌 위험이 없는 유일한 프로퍼티 키를 만들기 위해 사용한다. 2. 심벌값 생성 심벌 값은 Symbol 함수를 호출하여 생성한다. 이 때 생성된 심벌 값은 외부로 노출되지 않아 확인할 수 없다. Symbol 함수에는 선택적으로 문자열을 인수로 전달할 수 있다. 이 문자열은 생성된 심벌 값에 대한 설며으로 디버깅 용도로만 사용되며 심벌 값 생성에는 영향을 끼치지 않는다. 심벌값도 객체처럼 접근하면 암묵적으로 래퍼 객체를 생성한다. 심벌 값은 암묵적으로 문자열이나 숫자 타입으로 변환되지 않는다.\r\n단 boolean 타입으로는 암묵적으로 타입 변환된다. 이를 통해 if문에서 존재 확인이 가능하다.  메서드는 인수로 전달받은 문자열을 사용하여 키와 심벌 값의 쌍들이 저장되어있는 전역 심벌 레지스트리에서 해당 키와 일치하는 심…","frontmatter":{"date":"January 18, 2022","title":"33. Symbol","categories":"javascript","author":"sangzun","emoji":null},"fields":{"slug":"/자바스크립트/33.Sybmol/"}},"next":{"id":"ee310796-add5-50f2-be76-019b25ab735c","html":"<h1 id=\"1-string-생성자-함수\" style=\"position:relative;\"><a href=\"#1-string-%EC%83%9D%EC%84%B1%EC%9E%90-%ED%95%A8%EC%88%98\" aria-label=\"1 string 생성자 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. String 생성자 함수</h1>\n<p>표준 빌트인 객체인 String 객체는 생성자 함수 객체다. new 연산자와 함께 호출하여 String 인스턴스를 생성할 수 있다.</p>\n<p>String 생성자 함수에 인수를 전달하지 않고 new 연산자와 함께 호출하면 [[StringData]] 내부 슬롯에 빈 문자열을 할당한 String 래퍼 객체를 생성한다.</p>\n<p>인수를 전달하면 [[StringData]] 내부 슬롯에 인수로 전달받은 문자열을 할당한 String 래퍼 객체를 생성한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const strObj = new String('Han');\r\nconsole.log(strObj);\r\n\r\n// String {'Han'} 0: \"H\" 1: \"a\" 2: \"n\" length: 3 [[PrimitiveValue]]: \"Han\"</code></pre></div>\n<p>String 래퍼 객체는 유사 배열 객체이면서 이터러벌이다. 따라서 인덱스를 사용하여 각 문자에 접근할 수 있다.</p>\n<h1 id=\"2-length-프로퍼티\" style=\"position:relative;\"><a href=\"#2-length-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0\" aria-label=\"2 length 프로퍼티 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. length 프로퍼티</h1>\n<p><code class=\"language-text\">lenght</code> 프로퍼티는 문자열의 문자 개수를 반환한다.</p>\n<h1 id=\"3-string-메서드\" style=\"position:relative;\"><a href=\"#3-string-%EB%A9%94%EC%84%9C%EB%93%9C\" aria-label=\"3 string 메서드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. String 메서드</h1>\n<p>배열에는 <code class=\"language-text\">mutator method</code>(원본배열 직접변경)와 <code class=\"language-text\">accessor method</code>(새로운 배열 생성)가 있다.</p>\n<p>String 객체에는 원본 String 래퍼 객체를 직접 변경하는 메서드는 존재하지 않는다. 문자열은 변경 <code class=\"language-text\">immutable</code>한 값이기 때문에 <strong><em>String 래퍼 객체도 읽기 전용 객체로 제공된다.</em></strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const strObj = new String('Lee');\r\nconsole.log(Object.getOwnPropertyDescriptors(strObj));\r\n\r\n//\r\n{\r\n  0: {value: 'L', writable: false, enumerable: true, configurable: false}\r\n  1: {value: 'e', writable: false, enumerable: true, configurable: false}\r\n  2: {value: 'e', writable: false, enumerable: true, configurable: false}\r\n  length: {value: 3, writable: false, enumerable: false, configurable: false}\r\n}</code></pre></div>\n<p><code class=\"language-text\">String.prototype.indexOf</code> : 대상 문자열에서 인수로 전달받은 문자열을 검색하여 <strong>첫번째 인덱스</strong>를 반환한다. 검색에 실패하면 -1를 반환한다. indexOf 메서드의 2번째 인수로 검색을 시작할 인덱스를 전달할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const str = 'Hello Hello';\r\nstr.indexOf('l'); // 2\r\nstr.indexOf('l',7) // 8</code></pre></div>\n<p><code class=\"language-text\">indexOf</code> 메서드는 대상 문자열에 특정 문자열이 존재하는지 확인할 때 유용하며 ES6에서 도입된 <code class=\"language-text\">String.prototype.includes</code> 메서드를 사용하면 가독성이 더 좋다. <code class=\"language-text\">includes</code>는 결과를 true false로 반환한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">if(str.includes('Hello') {\r\n\r\n})</code></pre></div>\n<p><code class=\"language-text\">String.prototype.search</code> : 대상 문자열에서 인수로 전달받은 정규 표현식과 매치하는 문자열을 검색하여 일치하는 문자열의 인덱스를 반환한다. 검색에 실패하면 -1을 반환한다.</p>\n<p><code class=\"language-text\">String.prototype.startsWith</code> : ES6에서 도입된 메서드로 대상 문자열이 인수로 전달받은 문자열로 시작하는지 확인하여 그 결과를 true, false로 반환한다. 2번째 인수로 검색을 시작할 인덱스를 전달할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const str = 'HaHa'\r\nstr.startsWith('Ha') // true</code></pre></div>\n<p><code class=\"language-text\">String.prototype.endsWith</code> : ES6에서 도입된 메서드로 대상 문자열이 인수로 전달받은 문자열로 끝나는지 확인하여 그 결과를 true, false로 반환한다. 2번째 인수로 검색할 문자열의 길이를 전달할 수 있다.</p>\n<p><code class=\"language-text\">String.prototype.charAt</code> : 대상 문자열에서 인수로 전달받은 인덱스에 위치한 문자를 검색하여 반환한다. 인덱스는 문자열의 범위 사이의 정수이어야 하며 인덱스가 문자열의 범위를 벗어난 경우 빈 문자열을 반환한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const str = 'HaHa'\r\n\r\nfor (let i=0; i&lt;str.length; i++) {\r\n  console.log(str.charAt(i)); // H a H a\r\n}</code></pre></div>\n<p><code class=\"language-text\">String.prototype.substring</code> : 대상 문자열에서 첫번째 인수로 전달받은 인덱스에 위치하는 문자부터 두번째 인수로 전달받은 인덱스에 위치하는 문자의 바로 이전까지 부분 문자열을 반환한다. 두번째 인수는 생략 할 수 있다. 이때 첫번째 인수로 전달한 인덱스에 위치하는 문자부터 마지막문자까지 부분 문자열을 반환한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const str = 'Hello World';\r\n\r\n// 인덱스 1부터 인덱스 5 이전까지의 부분 문자열을 반환\r\nstr.substring(1,5) // 'ello'</code></pre></div>\n<p><code class=\"language-text\">String.prototype.slice</code> : <code class=\"language-text\">substring</code>과 동일하게 동작한다. 하지만 <code class=\"language-text\">slice</code> 메서드는 음수인 인수를 전달할 수 있다. 음수인 인수를 전달하면 대상 문자열의 가장 뒤에서부터 시작해서 문자열을 잘라내어 반환한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const str = 'Hello world';\r\n\r\n// 뒤에서 5자리를 잘라내어 반환한다.\r\nstr.slice(-5); // 'world';</code></pre></div>\n<p><code class=\"language-text\">String.prototype.toUpperCase</code> : 대상 문자열을 모두 대문자로 변경한 문자열을 반환한다.\r\n<code class=\"language-text\">String.prototype.toLowerCase</code> : 대상 문자열을 모두 소문자로 변경한 문자열을 반환한다.\r\n<code class=\"language-text\">String.prototype.trim</code> : 대상 문자열 앞뒤에 공백을 제거한 문자열을 반환한다.\r\n<code class=\"language-text\">String.prototype.repeat</code> : ES6에서 도입된 <code class=\"language-text\">repeat</code> 메서드는 대상 문자열을 인수로 전달받은 정수만큼 반복해 연결한 새로운 문자열을 반홚나다. 전달받은 정수가 0 이면 빈 문자열을 반환하고 음수이면 <code class=\"language-text\">RangeError</code> 를 발생시킨다. 인수를 생략하면 0이 설정된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const str = 'basic';\r\n\r\nstr.repeat(); // ''\r\nstr.repeat(0); // ''\r\nstr.repeat(1); // 'basic'\r\nstr.repeat(2); // 'basicbasic'\r\nstr.repeat(-1); // RangeError</code></pre></div>\n<p><code class=\"language-text\">String.prototype.replace</code>: 대상 문자열에서 첫번째 인수로 전달받은 문자열 또는 정규표현식을 검색하여 두번째 인수로 전달한 문자열로 치환한 문자열을 반환한다.</p>\n<p><code class=\"language-text\">String.prototype.split</code>: 첫번째 인수로 전달한 문자열 또는 정규 표현식을 검색하여 문자열을 구분한 후 분리된 각 문자열로 이루어진 배열을 반환한다. 인수로 빈 문자열을 전달하면 각 문자를 모두 분리하고 인수를 생략하면 문자열 전체를 단일 요소로 하는 배열을 반환한다. 두번째 인수로 배열의 길이를 지정할 수 있다.</p>","frontmatter":{"date":"January 06, 2022","title":"32. String","categories":"javascript","author":"sangzun","emoji":null},"fields":{"slug":"/자바스크립트/32.String/"}},"prev":{"id":"1562aaa3-ce24-5f62-9463-f391009a2914","html":"<h1 id=\"1-이터레이션-프로토콜\" style=\"position:relative;\"><a href=\"#1-%EC%9D%B4%ED%84%B0%EB%A0%88%EC%9D%B4%EC%85%98-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C\" aria-label=\"1 이터레이션 프로토콜 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 이터레이션 프로토콜</h1>\n<p>ES6에서 도입된 iteration protocol은 순회 가능한 데이터 컬렉션을 만들기 위해 EMCAScript 사양에 정의하여 미리 약속한 규칙이다.</p>\n<p>ES6 이전의 배열, 문자열, 유사 배열 객체, DOM 컬렉션등은 통일된 규약 없이 각자 나름의 구조를 가지고 for문, for … in 문, forEach 메서드 등 다양한 방법으로 순회할 수 있었다.</p>\n<p>ES6에서는 순회 가능한 데이터 컬렉션을 이터레이션 프로토콜을 준수하는 이터러블로 통일하여 for … of문, 스프레드 문법, 배열 디스트럭처링 할당의 대상으로 사용할 수 있도록 일원화 했다.</p>\n<ul>\n<li>\n<p>iterable protocol : Symbol.iterator를 프로퍼티 키로 사용한 메서드를 직접 구현하거나 프로토타입 체인을 통해 상속받은 Symbol.iterator 메서드를 호출하면 이터레이터 프로토콜을 준수한 이터레이터를 반환한다. <strong>이러한 규약을 이터러블 프로토콜이라 한다. 이터러블 프로토콜을 준수한 객체를 <code class=\"language-text\">이터러블</code>이라 한다.</strong>\r\n<code class=\"language-text\">이터러블</code>은 for … of 문으로 순회할 수 있으며 스프레드 문법과 배열 디스트럭처링 할당의 대상으로 사용할 수 있다.</p>\n</li>\n<li>\n<p>iterator protocol : 이터러블의 Symbol.iteraotor 메서드를 호출하면 이터레이터 프로토콜을 준수한 이터레이터를 반환한다. 이터레이터는 <code class=\"language-text\">next</code> 메서드를 소유하여 <code class=\"language-text\">next</code> 메서드를 호출하면 이터러블을 순회하며 value와 done 프로퍼티를 갖는 iterator result object를 반환한다. <strong>이러한 규약을 이터레이터 프로토이라 한다.</strong></p>\n</li>\n</ul>\n<p><img src=\"/iteration.jpeg\" alt=\"iteration\"></p>\n<h1 id=\"1-1-이터러블\" style=\"position:relative;\"><a href=\"#1-1-%EC%9D%B4%ED%84%B0%EB%9F%AC%EB%B8%94\" aria-label=\"1 1 이터러블 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1-1. 이터러블</h1>\n<p>이터러블 프로토콜을 준수한 객체를 이터러블이라 한다. 이터러블인지 확인하는 함수는 아래 코드와 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const isIterable = v => v !== null &amp;&amp; typeof v[Symbol.iterator] === 'function';\r\n\r\nisIterable([]); // true\r\nisIterable(''); // true\r\nisIterable(new Map()); // true\r\nisIterable(new Set()); // true\r\nisIterable({}); // false</code></pre></div>\n<p>Symbol.iterator 메서드를 직접 구현하지 않거나 상속받지 않은 일반 객체는 이터러블 프로토콜을 준수한 이터러블이 아니다. 따라서 일반 객체는 for … of 문으로 순회할 수 없으며 스프레드 문법과 배열 디스트럭처링 할당의 대상으로 사용할 수 없다.</p>\n<p><strong>하지만 일반 객체도 이터러블 프로토콜을 준수하도록 구현하면 이터러블이 된다.</strong></p>\n<h1 id=\"1-2-이터레이터\" style=\"position:relative;\"><a href=\"#1-2-%EC%9D%B4%ED%84%B0%EB%A0%88%EC%9D%B4%ED%84%B0\" aria-label=\"1 2 이터레이터 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1-2. 이터레이터</h1>\n<p>이터러블의 Symbol.iterator 메서드를 호출하면 이터레이터 프로토콜을 준수한 이터레이터를 반환한다. 이터러블의 <code class=\"language-text\">Symbol.iterator 메서드가 반환한 이터레이터는 next 메서드를 갖는다.</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const array = [1,2,3];\r\n\r\nconst iterator = array[Symbol.iterator]();\r\n\r\nconsole.log('next' in iterator); // true</code></pre></div>\n<p>이터레이터의 next 메서드는 이터러블의 각 요소를 순회하기 위한 포인터의 역할을 한다. next 메서드를 호출하면 이터러블을 순차적으로 한 단계씩 순회하며 순회 결과를 나타내는 <code class=\"language-text\">iterator result object</code>를 반환한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const array = [1,2,3];\r\nconst iterator = array[Symbol.iterator]();\r\n\r\nconsole.log(iterator.next()); // {value: 1, done: false}\r\nconsole.log(iterator.next()); // {value: 2, done: false}\r\nconsole.log(iterator.next()); // {value: 3, done: false}\r\nconsole.log(iterator.next()); // {value: undefined, done: false}</code></pre></div>\n<p>이터레이터의 next 메서드가 반환하는 iterator result object의 value 프로퍼티는 현재 순회 중인 이터러블의 값을 나타내며 done 프로퍼티는 이터러블의 순회 완료 여부를 나타낸다.</p>\n<h1 id=\"2-for--of-문\" style=\"position:relative;\"><a href=\"#2-for--of-%EB%AC%B8\" aria-label=\"2 for  of 문 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. for … of 문</h1>\n<p>for … of 문은 이터러블을 순회하면서 이터러블의 요소를 변수에 할당한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">for (변수선언문 of 이터러블) {}</code></pre></div>\n<p>for … of 문은 내부적으로 이터레이터의 next 메서드를 호출하여 이터러블을 순회하며 next 메서드가 iterator result object의 value 프로퍼티 값을 for … of 문의 변수에 할당한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">for (const item of [1,2,3]) {\r\n  console.log(item); // 1 2 3\r\n}</code></pre></div>\n<h1 id=\"3-이터러블과-유사-배열-객체\" style=\"position:relative;\"><a href=\"#3-%EC%9D%B4%ED%84%B0%EB%9F%AC%EB%B8%94%EA%B3%BC-%EC%9C%A0%EC%82%AC-%EB%B0%B0%EC%97%B4-%EA%B0%9D%EC%B2%B4\" aria-label=\"3 이터러블과 유사 배열 객체 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 이터러블과 유사 배열 객체</h1>\n<p>유사 배열 객체는 마치 배열처럼 인덱스로 프로퍼티 값에 접근할 수 있꼬 length 프로퍼티 값을 갖는 객체이다. 따라서 유사 배열 객체는 for문으로 순회할 수 있고 배열처럼 인덱스로 프로퍼티 값에 접근할 수 있다.</p>\n<p>유사 배열 객체는 이터러블이 아닌 일반 객체다. 따라서 for … of 문으로 순회할 수 없다. 하지만 arguments, NodeList, HTMLCollection은 유사 배열 객체이면서 이터러블이다.</p>\n<p>—> ES6에서 이터러블이 도입되면서 유사 배열 객체인 arguments, NodeList, HTMLCollection 객체에 Symbol.iterator 메서드를 구현하여 이터러블이 되었다. <code class=\"language-text\">모든 유사 배열 겍체가 이터러블인 것은 아니다.</code></p>\n<p>ES6에서 도입된 Array.from 메서드를 사용하여 유사 배열 객체 또는 이터러블을 인수로 전달받아 배열로 변환할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const arrayLike = {\r\n  0:1,\r\n  1:2,\r\n  2:3,\r\n  length:3\r\n};\r\n\r\nconst arr = Array.from(arrayLike);\r\nconsole.log(arr)</code></pre></div>\n<h1 id=\"4-이터레이션-프로토콜의-필요성\" style=\"position:relative;\"><a href=\"#4-%EC%9D%B4%ED%84%B0%EB%A0%88%EC%9D%B4%EC%85%98-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C%EC%9D%98-%ED%95%84%EC%9A%94%EC%84%B1\" aria-label=\"4 이터레이션 프로토콜의 필요성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 이터레이션 프로토콜의 필요성</h1>\n<p>이터레이션 프로토콜은 다양한 데이터 공급자가 하나의 순회 방식을 갖도록 규정하여 데이터 소비자가 효율적으로 다양한 데이터 공급자를 사용할 수 있도록 <code class=\"language-text\">데이터 소비자와 데이터 공급자를 연결하는 인터페이스 역할을 한다.</code></p>\n<h1 id=\"5-사용자-정의-이터러블\" style=\"position:relative;\"><a href=\"#5-%EC%82%AC%EC%9A%A9%EC%9E%90-%EC%A0%95%EC%9D%98-%EC%9D%B4%ED%84%B0%EB%9F%AC%EB%B8%94\" aria-label=\"5 사용자 정의 이터러블 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. 사용자 정의 이터러블</h1>\n<p>이터레이션 프로토콜을 준수하지 않는 일반 객체도 이터레이션 프로토콜을 준수하도록 구현하면 사용자 정의 이터러블이 된다. 아래의 코드는 피보나치 수열을 구현한 사용자 정의 이터러블이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const fibonacci = {\r\n  [Symbol.iterator]() {\r\n    let [pre, cur] = [0, 1];\r\n    const max = 10;\r\n\r\n    return {\r\n      next() {\r\n        [pre, cur] = [cur, pre + cur];\r\n        return { value: cur, done: cur >= max};\r\n      }\r\n    };\r\n  }\r\n};\r\n\r\nfor (const num of fibonacci) {\r\n  console.log(num); // 1 2 3 5 8\r\n}</code></pre></div>\n<p>위의 fibonacci 이터러블은 내부에 수열의 최대값 max를 가지고 있다. max값은 고정된 값으로 전달한 값으로 변경할 방법이 없는것이 아쉽다. 수열의 최대값을 외부에서 전달하는 방법은 아래 코드와 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const fibonacci = function(max) {\r\n  let [pre, cur] = [0, 1];\r\n\r\n  return {\r\n    [Symbol.iterator]() {\r\n      return {\r\n        next() {\r\n          [pre, cur] = [cur, pre + cur];\r\n          return { value: cur, done: cur >= max};\r\n        }\r\n      };\r\n    }\r\n  };\r\n};\r\n\r\nfor (const num of fibonacci(10)) {\r\n  console.log(num); // 1 2 3 5 8\r\n}</code></pre></div>\n<p>이이터러블이면서 이레터인 객체를 생성하면 Symbol.iterator 메서드를 호출하지 않아도 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const fibonacciFunc = function(max) {\r\n  let [pre, cur] = [0, 1];\r\n\r\n  return {\r\n    [Symbol.iterator]() {return this;},\r\n    next() {\r\n      [pre, cur] = [cur, pre + cur];\r\n      return {value: cur, done: cur >= max};\r\n    }\r\n  };\r\n};\r\n\r\nlet iter = fibonacciFunc(10); // iter는 이터러블이면서 이터레이터이다.\r\n\r\nfor (const num of iter) {\r\n  console.log(num); // 1 2 3 5 8\r\n}\r\n\r\niter = fibonacciFunc(10);\r\n\r\nconsole.log(iter.next()); // {value: 1, done: false }\r\nconsole.log(iter.next()); // {value: 2, done: false }\r\nconsole.log(iter.next()); // {value: 3, done: false }\r\nconsole.log(iter.next()); // {value: 5, done: false }\r\nconsole.log(iter.next()); // {value: 8, done: false }\r\nconsole.log(iter.next()); // {value: 13, done: true }</code></pre></div>\n<p>무한 이터러블을 생성하는 함수를 통해 무한 수열을 간단히 구현할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const fibonacciFunc = function(max) {\r\n  let [pre, cur] = [0, 1];\r\n\r\n  return {\r\n    [Symbol.iterator]() {return this;},\r\n    next() {\r\n      [pre, cur] = [cur, pre + cur];\r\n      return {value: cur}; // 무한을 구현하기 위해 done을 생략한다.\r\n    }\r\n  };\r\n};\r\n\r\nfor (const num of fibonacciFunc()) {\r\n  if (num > 10000) break;\r\n  console.log(num);\r\n}\r\n\r\n// 배열 디스트럭처링 할당을 통해 무한 이터러블에서 3개의 요소만 가져올 수 있다.\r\nconst [f1,f2,f3] = fibonacciFunc();\r\nconsole.log(f1,f2,f3) // 1 2 3</code></pre></div>\n<p><code class=\"language-text\">지연 평가(lazy evaluation)</code>는 데이터가 필요한 시점 이전까지는 미리 데이터를 생성하지 않다가 데이터가 필요한 시점이 되면 그때서야 데이터를 생성하는 기법이다.</p>\n<p>fibonacciFunc 함수가 생성한 무한 이터러블은 데이터를 공급하는 메커니즘을 구현한 것으로 데이터 소비자인 for … of 문이나 배열 디스트럭처링 할당등이 실행되기 이전까지 데이터를 생성하지 않는다. for … of 문의 경우 이터러블을 순회할 때 내부에서 이터레이터의 next 메서드를 호출하는데 이때 데이터가 생성된다.</p>\n<p><strong>지연평가를 사용하면 불필요한 데이터를 미리 생성하지 않고 필요한 데이터를 필요한 순간에 생성하므로 빠른 실행속도를 기대할 수 있고 불필요한 메모리를 소비하지 않으며 무한도 표현할 수 있다는 장점이 있다.</strong></p>","frontmatter":{"date":"February 19, 2022","title":"34. 이터러블","categories":"javascript","author":"sangzun","emoji":null},"fields":{"slug":"/자바스크립트/34.이터러블/"}},"site":{"siteMetadata":{"siteUrl":"https://github.com/sangzun-han","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/자바스크립트/33.Sybmol/","nextSlug":"/자바스크립트/32.String/","prevSlug":"/자바스크립트/34.이터러블/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}