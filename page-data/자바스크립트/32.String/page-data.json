{"componentChunkName":"component---src-templates-blog-template-js","path":"/자바스크립트/32.String/","result":{"data":{"cur":{"id":"ee310796-add5-50f2-be76-019b25ab735c","html":"<h1 id=\"1-string-생성자-함수\" style=\"position:relative;\"><a href=\"#1-string-%EC%83%9D%EC%84%B1%EC%9E%90-%ED%95%A8%EC%88%98\" aria-label=\"1 string 생성자 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. String 생성자 함수</h1>\n<p>표준 빌트인 객체인 String 객체는 생성자 함수 객체다. new 연산자와 함께 호출하여 String 인스턴스를 생성할 수 있다.</p>\n<p>String 생성자 함수에 인수를 전달하지 않고 new 연산자와 함께 호출하면 [[StringData]] 내부 슬롯에 빈 문자열을 할당한 String 래퍼 객체를 생성한다.</p>\n<p>인수를 전달하면 [[StringData]] 내부 슬롯에 인수로 전달받은 문자열을 할당한 String 래퍼 객체를 생성한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const strObj = new String('Han');\r\nconsole.log(strObj);\r\n\r\n// String {'Han'} 0: \"H\" 1: \"a\" 2: \"n\" length: 3 [[PrimitiveValue]]: \"Han\"</code></pre></div>\n<p>String 래퍼 객체는 유사 배열 객체이면서 이터러벌이다. 따라서 인덱스를 사용하여 각 문자에 접근할 수 있다.</p>\n<h1 id=\"2-length-프로퍼티\" style=\"position:relative;\"><a href=\"#2-length-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0\" aria-label=\"2 length 프로퍼티 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. length 프로퍼티</h1>\n<p><code class=\"language-text\">lenght</code> 프로퍼티는 문자열의 문자 개수를 반환한다.</p>\n<h1 id=\"3-string-메서드\" style=\"position:relative;\"><a href=\"#3-string-%EB%A9%94%EC%84%9C%EB%93%9C\" aria-label=\"3 string 메서드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. String 메서드</h1>\n<p>배열에는 <code class=\"language-text\">mutator method</code>(원본배열 직접변경)와 <code class=\"language-text\">accessor method</code>(새로운 배열 생성)가 있다.</p>\n<p>String 객체에는 원본 String 래퍼 객체를 직접 변경하는 메서드는 존재하지 않는다. 문자열은 변경 <code class=\"language-text\">immutable</code>한 값이기 때문에 <strong><em>String 래퍼 객체도 읽기 전용 객체로 제공된다.</em></strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const strObj = new String('Lee');\r\nconsole.log(Object.getOwnPropertyDescriptors(strObj));\r\n\r\n//\r\n{\r\n  0: {value: 'L', writable: false, enumerable: true, configurable: false}\r\n  1: {value: 'e', writable: false, enumerable: true, configurable: false}\r\n  2: {value: 'e', writable: false, enumerable: true, configurable: false}\r\n  length: {value: 3, writable: false, enumerable: false, configurable: false}\r\n}</code></pre></div>\n<p><code class=\"language-text\">String.prototype.indexOf</code> : 대상 문자열에서 인수로 전달받은 문자열을 검색하여 <strong>첫번째 인덱스</strong>를 반환한다. 검색에 실패하면 -1를 반환한다. indexOf 메서드의 2번째 인수로 검색을 시작할 인덱스를 전달할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const str = 'Hello Hello';\r\nstr.indexOf('l'); // 2\r\nstr.indexOf('l',7) // 8</code></pre></div>\n<p><code class=\"language-text\">indexOf</code> 메서드는 대상 문자열에 특정 문자열이 존재하는지 확인할 때 유용하며 ES6에서 도입된 <code class=\"language-text\">String.prototype.includes</code> 메서드를 사용하면 가독성이 더 좋다. <code class=\"language-text\">includes</code>는 결과를 true false로 반환한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">if(str.includes('Hello') {\r\n\r\n})</code></pre></div>\n<p><code class=\"language-text\">String.prototype.search</code> : 대상 문자열에서 인수로 전달받은 정규 표현식과 매치하는 문자열을 검색하여 일치하는 문자열의 인덱스를 반환한다. 검색에 실패하면 -1을 반환한다.</p>\n<p><code class=\"language-text\">String.prototype.startsWith</code> : ES6에서 도입된 메서드로 대상 문자열이 인수로 전달받은 문자열로 시작하는지 확인하여 그 결과를 true, false로 반환한다. 2번째 인수로 검색을 시작할 인덱스를 전달할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const str = 'HaHa'\r\nstr.startsWith('Ha') // true</code></pre></div>\n<p><code class=\"language-text\">String.prototype.endsWith</code> : ES6에서 도입된 메서드로 대상 문자열이 인수로 전달받은 문자열로 끝나는지 확인하여 그 결과를 true, false로 반환한다. 2번째 인수로 검색할 문자열의 길이를 전달할 수 있다.</p>\n<p><code class=\"language-text\">String.prototype.charAt</code> : 대상 문자열에서 인수로 전달받은 인덱스에 위치한 문자를 검색하여 반환한다. 인덱스는 문자열의 범위 사이의 정수이어야 하며 인덱스가 문자열의 범위를 벗어난 경우 빈 문자열을 반환한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const str = 'HaHa'\r\n\r\nfor (let i=0; i&lt;str.length; i++) {\r\n  console.log(str.charAt(i)); // H a H a\r\n}</code></pre></div>\n<p><code class=\"language-text\">String.prototype.substring</code> : 대상 문자열에서 첫번째 인수로 전달받은 인덱스에 위치하는 문자부터 두번째 인수로 전달받은 인덱스에 위치하는 문자의 바로 이전까지 부분 문자열을 반환한다. 두번째 인수는 생략 할 수 있다. 이때 첫번째 인수로 전달한 인덱스에 위치하는 문자부터 마지막문자까지 부분 문자열을 반환한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const str = 'Hello World';\r\n\r\n// 인덱스 1부터 인덱스 5 이전까지의 부분 문자열을 반환\r\nstr.substring(1,5) // 'ello'</code></pre></div>\n<p><code class=\"language-text\">String.prototype.slice</code> : <code class=\"language-text\">substring</code>과 동일하게 동작한다. 하지만 <code class=\"language-text\">slice</code> 메서드는 음수인 인수를 전달할 수 있다. 음수인 인수를 전달하면 대상 문자열의 가장 뒤에서부터 시작해서 문자열을 잘라내어 반환한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const str = 'Hello world';\r\n\r\n// 뒤에서 5자리를 잘라내어 반환한다.\r\nstr.slice(-5); // 'world';</code></pre></div>\n<p><code class=\"language-text\">String.prototype.toUpperCase</code> : 대상 문자열을 모두 대문자로 변경한 문자열을 반환한다.\r\n<code class=\"language-text\">String.prototype.toLowerCase</code> : 대상 문자열을 모두 소문자로 변경한 문자열을 반환한다.\r\n<code class=\"language-text\">String.prototype.trim</code> : 대상 문자열 앞뒤에 공백을 제거한 문자열을 반환한다.\r\n<code class=\"language-text\">String.prototype.repeat</code> : ES6에서 도입된 <code class=\"language-text\">repeat</code> 메서드는 대상 문자열을 인수로 전달받은 정수만큼 반복해 연결한 새로운 문자열을 반홚나다. 전달받은 정수가 0 이면 빈 문자열을 반환하고 음수이면 <code class=\"language-text\">RangeError</code> 를 발생시킨다. 인수를 생략하면 0이 설정된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const str = 'basic';\r\n\r\nstr.repeat(); // ''\r\nstr.repeat(0); // ''\r\nstr.repeat(1); // 'basic'\r\nstr.repeat(2); // 'basicbasic'\r\nstr.repeat(-1); // RangeError</code></pre></div>\n<p><code class=\"language-text\">String.prototype.replace</code>: 대상 문자열에서 첫번째 인수로 전달받은 문자열 또는 정규표현식을 검색하여 두번째 인수로 전달한 문자열로 치환한 문자열을 반환한다.</p>\n<p><code class=\"language-text\">String.prototype.split</code>: 첫번째 인수로 전달한 문자열 또는 정규 표현식을 검색하여 문자열을 구분한 후 분리된 각 문자열로 이루어진 배열을 반환한다. 인수로 빈 문자열을 전달하면 각 문자를 모두 분리하고 인수를 생략하면 문자열 전체를 단일 요소로 하는 배열을 반환한다. 두번째 인수로 배열의 길이를 지정할 수 있다.</p>","excerpt":"1. String 생성자 함수 표준 빌트인 객체인 String 객체는 생성자 함수 객체다. new 연산자와 함께 호출하여 String 인스턴스를 생성할 수 있다. String 생성자 함수에 인수를 전달하지 않고 new 연산자와 함께 호출하면 [[StringData]] 내부 슬롯에 빈 문자열을 할당한 String 래퍼 객체를 생성한다. 인수를 전달하면 [[StringData]] 내부 슬롯에 인수로 전달받은 문자열을 할당한 String 래퍼 객체를 생성한다. String 래퍼 객체는 유사 배열 객체이면서 이터러벌이다. 따라서 인덱스를 사용하여 각 문자에 접근할 수 있다. 2. length 프로퍼티  프로퍼티는 문자열의 문자 개수를 반환한다. 3. String 메서드 배열에는 (원본배열 직접변경)와 (새로운 배열 생성)가 있다. String 객체에는 원본 String 래퍼 객체를 직접 변경하는 메서드는 존재하지 않는다. 문자열은 변경 한 값이기 때문에 String 래퍼 객체도 읽기 전용…","frontmatter":{"date":"January 06, 2022","title":"32. String","categories":"javascript","author":"sangzun","emoji":null},"fields":{"slug":"/자바스크립트/32.String/"}},"next":{"id":"92b0a37a-de6b-5165-8970-3e7938505b89","html":"<h1 id=\"1-정규표현식\" style=\"position:relative;\"><a href=\"#1-%EC%A0%95%EA%B7%9C%ED%91%9C%ED%98%84%EC%8B%9D\" aria-label=\"1 정규표현식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 정규표현식</h1>\n<p>정규 표현식은 문자열을 대상으로 **<em>패턴 매칭 기능</em>**을 제공한다.</p>\n<p><code class=\"language-text\">패턴매칭기능</code> : 특정 패턴과 일치하는 문자열을 검색하거나 추출 또는 치환할 수 있는 기능</p>\n<h1 id=\"2-정규표현식-생성\" style=\"position:relative;\"><a href=\"#2-%EC%A0%95%EA%B7%9C%ED%91%9C%ED%98%84%EC%8B%9D-%EC%83%9D%EC%84%B1\" aria-label=\"2 정규표현식 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 정규표현식 생성</h1>\n<p>정규 표현식 객체(RegExp 객체)를 생성하기 위해서는 **<em>정규 표현식 리터럴</em>**과 RegExp 생성자 함수를 사용할 수 있다.</p>\n<p><img src=\"/regexp.jpg\" alt=\"regexp\"></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const target = 'Is this all there is?';\r\n\r\nconst regexp = /is/i; // 패턴 : is, 플래그 : i => 대소문자를 구별하지 않고 검색한다.\r\n\r\nregexp.test(target); // true</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const target = 'Is this all there is?';\r\n\r\nconst regexp = new RegExp(/is/i);\r\n\r\nregexp.test(target);</code></pre></div>\n<h1 id=\"3-정규표현식-메서드\" style=\"position:relative;\"><a href=\"#3-%EC%A0%95%EA%B7%9C%ED%91%9C%ED%98%84%EC%8B%9D-%EB%A9%94%EC%84%9C%EB%93%9C\" aria-label=\"3 정규표현식 메서드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 정규표현식 메서드</h1>\n<ul>\n<li><code class=\"language-text\">RegExp.protytpe.exec</code> : 인수로 전달받은 문자열에 대해 정규 표현식의 패턴을 검색하여 매칭 결과를 배열로 반환한다. 매칭 결과가 없는 경우 null을 반환한다. 문자열 내의 모든 패턴을 검색하는 g플래그를 지정해도 첫번째 매칭 결과만 반환한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const target = 'Is this all there is?';\r\nconst regExp = /is/;\r\n\r\nregExp.exec(target);\r\n// ['is', index: 5, input: 'Is this all there is?', groups: undefined]</code></pre></div>\n<ul>\n<li>\n<p><code class=\"language-text\">RegExp.prototype.test</code> : 인수로 전달받은 문자열에 대해 정규 표현식의 패턴을 검색하여 매칭 결과를 boolean 값으로 반환한다.</p>\n</li>\n<li>\n<p><code class=\"language-text\">String.prototype.match</code> : 대상 문자열과 인수로 전달받은 정규 표현식과의 매칭 결과를 배열로 반환한다. g플래그가 지정되면 모든 매칭 결과를 배열로 반환한다.</p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const target = 'Is this all there is?';\r\nconst regExp = /is/;\r\n\r\ntarget.match(regExp);\r\n// ['is', index: 5, input: 'Is this all there is?', groups: undefined]</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const target = 'Is this all there is?';\r\nconst regExp = /is/g;\r\n\r\ntarget.match(regExp); //['is', 'is']</code></pre></div>\n<h1 id=\"4-플래그\" style=\"position:relative;\"><a href=\"#4-%ED%94%8C%EB%9E%98%EA%B7%B8\" aria-label=\"4 플래그 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 플래그</h1>\n<p>패턴과 함께 정규 표현식을 구성하는 플래그는 정규 표현식의 검색 방식을 설정하기 위해 사용한다.</p>\n<table>\n<thead>\n<tr>\n<th>플래그</th>\n<th>의미</th>\n<th>설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>i</td>\n<td>ignore case</td>\n<td>대소문자를 구별하지 않고 패턴을 검색한다.</td>\n</tr>\n<tr>\n<td>g</td>\n<td>Global</td>\n<td>대상 문자열 내에서 패턴과 일치하는 모든 문자열을 전역 검색한다.</td>\n</tr>\n<tr>\n<td>m</td>\n<td>Multi line</td>\n<td>문자열의 행이 바뀌더라도 패턴 검색을 계속한다.</td>\n</tr>\n</tbody>\n</table>\n<p>플래그는 옵션이므로 선택적으로 사용할 수 있으며 순서와 상관없이 하나 이상의 플래그를 동시에 설정할 수도 있다. 어떠한 플래그도 사용하지 않은 경우에 대소문자를 구별해서 패턴을 검색하며 패턴 검색 매칭 대상이 1개 이상 존재해도 첫번째 매칭한 대상만 검색하고 종료한다.</p>\n<h1 id=\"5-패턴\" style=\"position:relative;\"><a href=\"#5-%ED%8C%A8%ED%84%B4\" aria-label=\"5 패턴 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. 패턴</h1>\n<p>정규표현식의 패턴은 문자열의 일정한 규칙을 표현하기 위해 사용한다.</p>\n<h3 id=\"5-1-임의의-문자열-검색\" style=\"position:relative;\"><a href=\"#5-1-%EC%9E%84%EC%9D%98%EC%9D%98-%EB%AC%B8%EC%9E%90%EC%97%B4-%EA%B2%80%EC%83%89\" aria-label=\"5 1 임의의 문자열 검색 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5-1. 임의의 문자열 검색</h3>\n<p><code class=\"language-text\">.</code> 은 임의의 문자 한개를 의미한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const target = 'Is this all there is?';\r\n\r\nconst regExp = /.../g;\r\n\r\ntarget.match(regExp);\r\n\r\n// ['Is ', 'thi', 's a', 'll ', 'the', 're ', 'is?']</code></pre></div>\n<h3 id=\"5-2-반복-검색\" style=\"position:relative;\"><a href=\"#5-2-%EB%B0%98%EB%B3%B5-%EA%B2%80%EC%83%89\" aria-label=\"5 2 반복 검색 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5-2. 반복 검색</h3>\n<p><code class=\"language-text\">{m,n}</code>은 앞선 패턴이 최소 m번, 최대n번 반복되는 문자열을 의미한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const target = 'A AA B BB Aa Bb AAA';\r\n\r\n// A가 최소1번 최대2번 반복되는 문자열\r\nconst regExp = /A{1,2}/g;\r\n\r\ntarget.match(regExp)\r\n// ['A', 'AA', 'A', 'AA', 'A']</code></pre></div>\n<p><code class=\"language-text\">{n}</code>은 앞선 패턴이 n번 반복되는 문자열을 의미한다. 즉 <code class=\"language-text\">{n}</code>은 <code class=\"language-text\">{n,n}</code>과 같다.</p>\n<p><code class=\"language-text\">{n,}</code>은 앞선 패턴이 최소 n번 이상 반복되는 문자열을 의미한다.</p>\n<p><code class=\"language-text\">+</code> 는 앞선패턴이 최소 한번 이상 반복되는 문자열을 의미한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const target = 'A AA B BB Aa Bb AAA';\r\n\r\n\r\n//'A'가 최소 한번 이상 반복되는 문자열을 전역 검색한다.\r\nconst regExp = /A+/g;\r\n\r\ntarget.match(regExp);\r\n//['A', 'AA', 'A', 'AAA']</code></pre></div>\n<p><code class=\"language-text\">?</code>는 앞선 패턴이 최대 한번(0번 포함) 이상 반복되는 문자열을 의미한다. 즉 <code class=\"language-text\">{0,1}</code>과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const target = 'color colour';\r\n\r\n// 'u'가 최대 한번(0번 포함) 이상 반복되고 'r'이 이어지는 문자열 검색\r\nconst regExp = /colou?r/g;\r\n\r\ntarget.match(regExp); // ['color', 'colour']</code></pre></div>\n<p><code class=\"language-text\">!</code>는 or의 의미를 갖는다.</p>\n<p><code class=\"language-text\">[]</code> 내의 문자는 or로 동작한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const target = 'A AA B BB Aa Bb';\r\n\r\nconst regExp = /[AB]+/g;\r\n\r\ntarget.match(regExp);\r\n\r\n//['A', 'AA', 'B', 'BB', 'A', 'B']</code></pre></div>\n<p>범위를 지정하려면 <code class=\"language-text\">[]</code>내에 <code class=\"language-text\">-</code>를 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const target = 'AA BB Ab Bb 12';\r\n\r\n// 'A' ~ 'Z'가 한번 이상 반복되는 문자열 전역 검색\r\nconst regExp = /[A-Z]+/g;\r\n\r\ntarget.match(regExp);\r\n\r\n// ['AA', 'BB', 'A', 'B']</code></pre></div>\n<p><code class=\"language-text\">/d</code>는 숫자를 의미한다. 즉 <code class=\"language-text\">/d</code>는 `[0-9]와 같다.</p>\n<p><code class=\"language-text\">/D</code>는 숫자가 아닌 문자를 의미한다.</p>\n<p><code class=\"language-text\">/w</code>는 알파벳,숫자,언더스코어를 의미한다. 즉 <code class=\"language-text\">/w</code>는 <code class=\"language-text\">[A-Za-z0-9_]</code>와 같다.</p>\n<p><code class=\"language-text\">/W</code>는 알파벳,숫자,언더스코어가 아닌 문자를 의미한다.</p>\n<p><code class=\"language-text\">[...]</code> 내의 <code class=\"language-text\">^</code>는 not의 의미를 갖는다.</p>\n<p><code class=\"language-text\">[...]</code> 밖의 <code class=\"language-text\">^</code>는 문자열의 시작을 의미한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const target = 'https://pi.com';\r\n\r\n// https로 시작하는지\r\nconst regExp = /^https/;\r\n\r\ntarget.test(target) // true;</code></pre></div>\n<p><code class=\"language-text\">$</code>는 문자열의 마지막을 의미한다.</p>","frontmatter":{"date":"January 04, 2022","title":"31. RegExp","categories":"javascript","author":"sangzun","emoji":null},"fields":{"slug":"/자바스크립트/31.RegExp/"}},"prev":{"id":"67f5c9bb-0ef6-5685-ae24-aa3fc538edba","html":"<h1 id=\"1-심벌이란\" style=\"position:relative;\"><a href=\"#1-%EC%8B%AC%EB%B2%8C%EC%9D%B4%EB%9E%80\" aria-label=\"1 심벌이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 심벌이란?</h1>\n<p><code class=\"language-text\">symbol</code> 은 ES6에서 도입된 7번째 데이터 타입으로 변경 불가능한 원시 타입의 값이다. 심벌값은 다른 값과 중복되지 않는 유일무이한 값이다. 따라서 이름의 충돌 위험이 없는 유일한 프로퍼티 키를 만들기 위해 사용한다.</p>\n<h1 id=\"2-심벌값-생성\" style=\"position:relative;\"><a href=\"#2-%EC%8B%AC%EB%B2%8C%EA%B0%92-%EC%83%9D%EC%84%B1\" aria-label=\"2 심벌값 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 심벌값 생성</h1>\n<p>심벌 값은 Symbol 함수를 호출하여 생성한다. 이 때 생성된 심벌 값은 <strong>외부로 노출되지 않아 확인할 수 없다.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const mySymbol = Symbol();\r\nconsole.log(typeof mySymbol); // symbol\r\nconsole.log(mySymbol);// Symbol()</code></pre></div>\n<p>Symbol 함수에는 선택적으로 문자열을 인수로 전달할 수 있다. 이 문자열은 생성된 심벌 값에 대한 설며으로 디버깅 용도로만 사용되며 심벌 값 생성에는 영향을 끼치지 않는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// 심벌값에 대한 설명이 같더라도 유일무이한 심벌 값을 생성\r\n\r\nconst mySymbol1= Symbol('mySymbol');\r\nconst mySymbol2= Symbol('mySymbol');\r\n\r\nconsole.log(mySymbol1===mySymbol2) // false</code></pre></div>\n<p>심벌값도 객체처럼 접근하면 암묵적으로 래퍼 객체를 생성한다. 심벌 값은 암묵적으로 문자열이나 숫자 타입으로 변환되지 않는다.\r\n단 boolean 타입으로는 암묵적으로 타입 변환된다. 이를 통해 if문에서 존재 확인이 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const mySymbol= Symbol();\r\nconsole.log(!!mySymbol); //true</code></pre></div>\n<p><code class=\"language-text\">Symbol.for</code> 메서드는 인수로 전달받은 문자열을 사용하여 키와 심벌 값의 쌍들이 저장되어있는 전역 심벌 레지스트리에서 해당 키와 일치하는 심벌 값을 검색한다.</p>\n<ul>\n<li>검색에 성공하면 새로운 심벌 값을 생성하지 않고 검색된 심벌 값을 반환한다.</li>\n<li>검색에 실패하면 새로운 심벌 값을 생성하여 <code class=\"language-text\">Symbol.for</code> 메서드의 인수로 전달된 키로 전역심벌 레지스트리에 저장한 후 생성된 심벌 값을 반환한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const s1 = Symbol.for('mySymbol');\r\nconst s2 = Symbol.for('mySymbol');\r\n\r\nconsole.log(s1 === s2); // true</code></pre></div>\n<p><code class=\"language-text\">Symbol.for</code> 메서드를 사용하면 애플리케이션 전역에서 중복되지 않는 유일무이한 상수인 심벌 값을 단 하나만 생성하여 전역 심벌 레지스트리를 통해 공유 할 수 있다.</p>\n<p><code class=\"language-text\">Symbol.keyFor</code> 메서드를 사용하면 전역 심벌 레지스트리에 저장된 심벌 값의 키를 추출 할 수 있다.</p>\n<h1 id=\"3-심벌과-상수\" style=\"position:relative;\"><a href=\"#3-%EC%8B%AC%EB%B2%8C%EA%B3%BC-%EC%83%81%EC%88%98\" aria-label=\"3 심벌과 상수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 심벌과 상수</h1>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const Direction = {\r\n  UP: 1,\r\n  DOWN: 2,\r\n  LEFT: 3,\r\n  RIGHT: 4\r\n}\r\n\r\nconst myDirection = Direction.UP;\r\n\r\nif(myDirection === Direction.UP) {\r\n  console.log(\"UP\")\r\n}</code></pre></div>\n<p>값에는 특별한 값이 없고 상수 이름 자체에 의미가 있는 경우가 있다. 이러한 경우 변경/중복 될 가능성이 있는 무의미한 상수 대신 중복될 가능성이 없는 유일무이한 심벌 값을 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const Direction = {\r\n  UP: Symbol('up'),\r\n  DOWN: Symbol('down'),\r\n  LEFT: Symbol('left'),\r\n  RIGHT: Symbol('right')\r\n}\r\n\r\nconst myDirection = Direction.UP;\r\n\r\nif(myDirection === Direction.UP) {\r\n  console.log(\"UP\")\r\n}</code></pre></div>\n<h1 id=\"4-심벌과-프로퍼티-키\" style=\"position:relative;\"><a href=\"#4-%EC%8B%AC%EB%B2%8C%EA%B3%BC-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0-%ED%82%A4\" aria-label=\"4 심벌과 프로퍼티 키 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 심벌과 프로퍼티 키</h1>\n<p>객체의 프로퍼티 키는 빈 문자열을 포함하는 모든 문자열 또는 심벌 값으로 만들 수 있으며, 동적으로 생성 할 수도 있다.\r\n심벌 값을 프로퍼티 키로 사용하라면 프로퍼티 키로 사용할 심벌 값에 대괄호를 사용해야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const obj = {\r\n  [Symbol.for('mySymbol')]: 1\r\n};\r\n\r\nobj[Symbol.for('mySymbol')]; // 1</code></pre></div>\n<p><strong>심벌 값은 유일무이한 값이므로 심벌 값으로 프로퍼티 키를 만들면 다른 프로퍼티 키와 절대 충돌하지 않는다.</strong></p>\n<h1 id=\"5-심벌과-프로퍼티-은닉\" style=\"position:relative;\"><a href=\"#5-%EC%8B%AC%EB%B2%8C%EA%B3%BC-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0-%EC%9D%80%EB%8B%89\" aria-label=\"5 심벌과 프로퍼티 은닉 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. 심벌과 프로퍼티 은닉</h1>\n<p>심벌 값을 프로퍼티 키로 사용하여 생성한 프로퍼티는 은닉할 수 있다. ES6에서 도입된 Object.getOwnPropertySymbols 메서드를 사용하면 심벌 값을 프로퍼티 키로 사용하여 생성한 프로퍼티를 찾을 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const obj = {\r\n  [Symbol('mySymbol')]: 1\r\n}\r\n\r\nfor (const key in obj) {\r\n  console.log(key); //\r\n}\r\n\r\nconsole.log(Object.keys(obj)); // []\r\nconsole.log(Object.getOwnPropertyNames(obj)); // []\r\n\r\nconsole.log(Object.getOwnPropertySymbols(obj)); // [Symbol(mySymbol)]</code></pre></div>\n<h1 id=\"6-심벌과-표준-빌트인-객체-확장\" style=\"position:relative;\"><a href=\"#6-%EC%8B%AC%EB%B2%8C%EA%B3%BC-%ED%91%9C%EC%A4%80-%EB%B9%8C%ED%8A%B8%EC%9D%B8-%EA%B0%9D%EC%B2%B4-%ED%99%95%EC%9E%A5\" aria-label=\"6 심벌과 표준 빌트인 객체 확장 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. 심벌과 표준 빌트인 객체 확장</h1>\n<p>표준 빌트인 객체에 사용자 정의 메서드를 직접 추가하여 확장하는것은 권장하지 않는다. 그 이유는 개발자가 직접 추가한 메서드와 미래에 표준 사양으로 추가될 메서드의 이름이 중복될 수 있기 때문이다.</p>\n<p>하지만 중복될 가능성이 없는 심벌 값으로 프로퍼티 키를 생성하여 표준 빌트인 객체를 확장하면 표준 빌트인 객체의 기존 프로퍼티 키와 충돌하지 않는것은 물론 추가될지 모르는 어떤 프로퍼티 키와도 충돌할 위험이 없다.</p>","frontmatter":{"date":"January 18, 2022","title":"33. Symbol","categories":"javascript","author":"sangzun","emoji":null},"fields":{"slug":"/자바스크립트/33.Sybmol/"}},"site":{"siteMetadata":{"siteUrl":"https://github.com/sangzun-han","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/자바스크립트/32.String/","nextSlug":"/자바스크립트/31.RegExp/","prevSlug":"/자바스크립트/33.Sybmol/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}