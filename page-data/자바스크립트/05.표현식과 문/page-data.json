{"componentChunkName":"component---src-templates-blog-template-js","path":"/자바스크립트/05.표현식과 문/","result":{"data":{"cur":{"id":"7327ae1f-2626-53da-b042-638a90c2aef3","html":"<h1 id=\"1-값\" style=\"position:relative;\"><a href=\"#1-%EA%B0%92\" aria-label=\"1 값 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 값</h1>\n<p><strong>값(value)은 식(expression)이 평가(evaluate)되어 생성된 결과를 말한다.</strong></p>\n<h1 id=\"2-리터럴\" style=\"position:relative;\"><a href=\"#2-%EB%A6%AC%ED%84%B0%EB%9F%B4\" aria-label=\"2 리터럴 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 리터럴</h1>\n<p><strong>리터럴(literal)은  사람이 이해할 수 있는 문자 또는 약속된 기호를 사용해 값을 생성하는 표기법(notation)을 말한다.</strong>\n자바스크립트 엔진은 코드가 실행되는 시점인 런타임에 리터럴을 평가해 값을 생성한다. 즉 리터럴은 값을 생성하기 위해 미리 약속한 표기법이라고 할 수 있다.</p>\n<table>\n<thead>\n<tr>\n<th>리터럴</th>\n<th>예시</th>\n<th>비고</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>정수 리터럴</td>\n<td>100</td>\n<td></td>\n</tr>\n<tr>\n<td>부동소수점 리터럴</td>\n<td>10.5</td>\n<td></td>\n</tr>\n<tr>\n<td>2진수 리터럴</td>\n<td>0b010001</td>\n<td>0b로 시작</td>\n</tr>\n<tr>\n<td>8진수 리터럴</td>\n<td>0o101</td>\n<td>ES6에서 도입 0o로 시작</td>\n</tr>\n<tr>\n<td>16진수 리터럴</td>\n<td>0x41</td>\n<td>ES6에서 도입 0x로 시작</td>\n</tr>\n<tr>\n<td>문자열 리터럴</td>\n<td>‘Hello’</td>\n<td></td>\n</tr>\n<tr>\n<td>불리언 리터럴</td>\n<td>true false</td>\n<td></td>\n</tr>\n<tr>\n<td>null 리터럴</td>\n<td>null</td>\n<td></td>\n</tr>\n<tr>\n<td>undefined 리터럴</td>\n<td>undefined</td>\n<td></td>\n</tr>\n<tr>\n<td>객체 리터럴</td>\n<td>{name: ‘Lee’, address: ‘Seoul’}</td>\n<td></td>\n</tr>\n<tr>\n<td>배열 리터럴</td>\n<td>[1,2,3]</td>\n<td></td>\n</tr>\n<tr>\n<td>함수 리터럴</td>\n<td>function() {}</td>\n<td></td>\n</tr>\n<tr>\n<td>정규표현식 리터럴</td>\n<td>/[A-Z]+/g</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"3-표현식\" style=\"position:relative;\"><a href=\"#3-%ED%91%9C%ED%98%84%EC%8B%9D\" aria-label=\"3 표현식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 표현식</h1>\n<p><strong>표현식(expression)은 값으로 평가될 수 있는 문(statement)이다. 즉 표현식이 평가되면 새로운 값을 생성하거나 기존값을 참조한다.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var score = 100;</code></pre></div>\n<p>100은 리터럴이다. 리터럴 100은 자바스크립트 엔진에 의해 평가되어 값을 생성하므로 리터럴은 그자체로 표현식이다.</p>\n<p>표현식은 값으로 평가된다. 이때 표현식과 표현식이 평가된 값은 동등한 관계이다. 즉 동치(equivalent)다. 예를 들어 1+2 = 3에서 1 + 2는 3과 같다고 할 수 있다.\n자바스크립트의 표현식 1 + 2는 평가되어 값 3을 생성하므로 표현식 1 + 2와 값 3은 동치다.</p>\n<h1 id=\"4-문\" style=\"position:relative;\"><a href=\"#4-%EB%AC%B8\" aria-label=\"4 문 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 문</h1>\n<p><strong>문(statement)은 프로그램을 구성하는 기본 단위이자 최소 실행 단위이다.</strong> 문의 집합으로 이루어진것이 프로그램이다.</p>\n<p>문은 여러 토큰으로 구성된다. <strong>토큰(token)이란 문법적인 의미를 가지며 문법적으로 더 이상 나눌 수 없는 코드의 기본 요소를 의미한다.</strong></p>\n<p>문은 명령문이라고도 부른다. 선언문, 할당문, 조건문, 반복문등으로 구분할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var x; // 변수 선언문\n\nx = 5; // 할당문\n\nfunction foo() {} // 함수 선언문\n\nif (x > 1) {} // 조건문\n\nfor (){} //반복문</code></pre></div>\n<h1 id=\"5-세미콜론\" style=\"position:relative;\"><a href=\"#5-%EC%84%B8%EB%AF%B8%EC%BD%9C%EB%A1%A0\" aria-label=\"5 세미콜론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. 세미콜론</h1>\n<ul>\n<li>세미콜론(;)은 문의 종료를 나타낸다.</li>\n<li>세미콜론은 생략 가능하다. why? 세미콜론 자동 삽입 기능(ASI = automatic semicolon insertion)이 암묵적으로 수행되기 때문</li>\n</ul>\n<p>하지만 ASI가 제대로 동작하지 않는 경우가 있다.\n<img src=\"/ASI.png\" alt=\"ASI\"></p>\n<h1 id=\"6-표현식인-문과-표현식이-아닌-문\" style=\"position:relative;\"><a href=\"#6-%ED%91%9C%ED%98%84%EC%8B%9D%EC%9D%B8-%EB%AC%B8%EA%B3%BC-%ED%91%9C%ED%98%84%EC%8B%9D%EC%9D%B4-%EC%95%84%EB%8B%8C-%EB%AC%B8\" aria-label=\"6 표현식인 문과 표현식이 아닌 문 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. 표현식인 문과 표현식이 아닌 문</h1>\n<p>표현식인 문과 표현식이 아닌 문을 구별하는 방법은 변수에 할당해 보는 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var x; // 변수 선언문은 표현식이 아닌 문이다\nx = 100; // 할당문은 그 자체로 표현식이면서 완전한 문이다.</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// 표현식이 아닌문은 값처럼 사용할 수 없다.\nvar foo = var x; // SyntaxError</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var foo = x = 100;\nconsole.log(foo) // 100</code></pre></div>\n<h3 id=\"완료값\" style=\"position:relative;\"><a href=\"#%EC%99%84%EB%A3%8C%EA%B0%92\" aria-label=\"완료값 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>완료값</h3>\n<p>크롬 개발자 도구에서 표현식이 아닌 문을 실행하면 언제나 undefined를 출력한다. 이를 <strong>완료값</strong>이라고 한다. 완료값은 표현식의 평가 결과가 아니다. 따라서 다른 값과 같이 변수에 할당할 수 없고 참조할 수 없다.</p>\n<p><img src=\"/completevalue.png\" alt=\"완료값\"></p>","excerpt":"1. 값 값(value)은 식(expression)이 평가(evaluate)되어 생성된 결과를 말한다. 2. 리터럴 리터럴(literal)은  사람이 이해할 수 있는 문자 또는 약속된 기호를 사용해 값을 생성하는 표기법(notation)을 말한다.\n자바스크립트 엔진은 코드가 실행되는 시점인 런타임에 리터럴을 평가해 값을 생성한다. 즉 리터럴은 값을 생성하기 위해 미리 약속한 표기법이라고 할 수 있다. 리터럴 예시 비고 정수 리터럴 100  부동소수점 리터럴 10.5  2진수 리터럴 0b010001 0b로 시작 8진수 리터럴 0o101 ES6에서 도입 0o로 시작 16진수 리터럴 0x41 ES6에서 도입 0x로 시작 문자열 리터럴 ‘Hello’  불리언 리터럴 true false  null 리터럴 null  undefined 리터럴 undefined  객체 리터럴 {name: ‘Lee’, address: ‘Seoul’}  배열 리터럴 1,2,3  함수 리터럴 function() {}…","frontmatter":{"date":"November 10, 2021","title":"변수","categories":"javascript","author":"sangzun","emoji":null},"fields":{"slug":"/자바스크립트/05.표현식과 문/"}},"next":{"id":"42b705d1-3dff-5534-ba07-94bdd835188d","html":"<h1 id=\"1-변수\" style=\"position:relative;\"><a href=\"#1-%EB%B3%80%EC%88%98\" aria-label=\"1 변수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 변수</h1>\n<p>변수는 하나의 값을 저장하기 위해 확보한 메모리 공간 자체 또는 그 메모리 공간을 식별하기 위해 붙인 이름을 말한다. 간단히 말하자면 변수는 값의 위치를 가리키는 상징적인 이름이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var result = 10 + 20;</code></pre></div>\n<p>10+20은 연산을 통해 새로운 값 30을 생성한다. 연산을 통해 생성된 값 30은 메모리 공간에 저장된다. 이때 메모리에 저장된 값 30을 다시 읽어 들여 재사용할 수 있도록 값이 저장된 메모리 공간에 상징적인 이름을 붙인것이 변수이다.</p>\n<p>변수에 값을 저장하는 것을 <strong>할당(assignment)</strong>이라 하고 변수에 저장된 값을 읽어 들이는 것을 <strong>참조(reference)</strong>라고 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var result = 10 + 20;\nconsole.log(result) // 30</code></pre></div>\n<h1 id=\"2-식별자\" style=\"position:relative;\"><a href=\"#2-%EC%8B%9D%EB%B3%84%EC%9E%90\" aria-label=\"2 식별자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 식별자</h1>\n<p>식별자는 어떤 값을 구별해서 식별할 수 있는 고유한 이름을 말한다. <strong>식별자는 값이 아니라 메모리 주소를 기억하고 있다.</strong>\n식별자로 값을 구별해서 식별한다는 것은 식별자가 기억하고 있는 메모리 주소를 통해 메모리 공간에 저장된 값에 접근할 수 있다는 의미이다.</p>\n<p><img src=\"/identifier.jpg\" alt=\"식별자\"></p>\n<h1 id=\"3변수-선언\" style=\"position:relative;\"><a href=\"#3%EB%B3%80%EC%88%98-%EC%84%A0%EC%96%B8\" aria-label=\"3변수 선언 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.변수 선언</h1>\n<p>변수를 사용하려면 반드시 선언이 필요하다. 변수를 선언할 때는 var, let, const 키워드를 사용한다.</p>\n<p><strong>블록 레벨 스코프(block-level scope)</strong></p>\n<p>모든 코드 블록(함수, if문, for문, while문, try/catch문 등)내에서\n선언된 변수는 코드 블록 내에서만 유효하며 코드 블록 외부에서는 참조할 수 없다.\n즉 코드 블록 내부에서 선언한 변수는 지역변수이다.</p>\n<p><strong>함수 레벨 스코프(function-level scope)</strong></p>\n<p>함수내에서 선언된 변수는 함수 내에서만 유효하며 함수 외부에서는 참조할 수 없다.\n즉 함수 내부에서 선언한 변수는 지역 변수이며 함수 외부에서 선언한 변수는\n모두 전역변수이다.</p>\n<p><strong>var 키워드</strong>는 블록 레벨 스코프를 지원하지 않고 함수 레벨 스코프를 지원한다.\n이로 인해 의도치 않게 전역 변수가 선언되어 오류가 발생 할 수 있다.</p>\n<p>var 키워드는 선언 단계와 초기화 단계가 동시에 진행된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var score; // undefined</code></pre></div>\n<h1 id=\"4-변수-선언-실행-시점과-호이스팅\" style=\"position:relative;\"><a href=\"#4-%EB%B3%80%EC%88%98-%EC%84%A0%EC%96%B8-%EC%8B%A4%ED%96%89-%EC%8B%9C%EC%A0%90%EA%B3%BC-%ED%98%B8%EC%9D%B4%EC%8A%A4%ED%8C%85\" aria-label=\"4 변수 선언 실행 시점과 호이스팅 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 변수 선언 실행 시점과 호이스팅</h1>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">console.log(score); // undefined\nvar score; // 변수 선언</code></pre></div>\n<p>참조에러(ReferenceError)가 발생할 것 같지만 undefined가 출력된다.\n그 이유는 <strong>변수 선언이 소스코드가 한 줄씩 순차적으로 실행되는 시점, 즉 런타임이 아니라 그 이전 단계에서 먼저 실행되기 때문이다.</strong></p>\n<p>이처럼 <strong>변수 선언문이 코드의 선두로 끌어 올려진것처럼 동작하는 자바스크립트 고유의 특징을 변수 호이스팅(variable hoisting)</strong>이라 한다.</p>\n<h1 id=\"5-값의-할당\" style=\"position:relative;\"><a href=\"#5-%EA%B0%92%EC%9D%98-%ED%95%A0%EB%8B%B9\" aria-label=\"5 값의 할당 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. 값의 할당</h1>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var score; // 변수 선언\nscore = 80; // 값의 할당\nvar score = 80;</code></pre></div>\n<p>변수 선언은 소스코드가 순차적으로 실행되는 시점인 런타임 이전에 실행되지만 할당은 런타임에 실행된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">console.log(score); // undefined\nvar score = 80;\nconsole.log(score) // 80</code></pre></div>\n<p><img src=\"/reallocation.jpg\" alt=\"할당\"></p>\n<p>변수에 값을 할당할 때에는 undefined가 저장되어 있던 메모리 공간을 지우고 그 메모리 공간에 새로 저장하는 것이 아니라 새로운 메모리 공간을 확보하고 그곳에 할당값을 저장한다.</p>\n<h1 id=\"6-값의-재할당\" style=\"position:relative;\"><a href=\"#6-%EA%B0%92%EC%9D%98-%EC%9E%AC%ED%95%A0%EB%8B%B9\" aria-label=\"6 값의 재할당 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. 값의 재할당</h1>\n<p>var 키워드로 선언한 변수는 값을 재할당 할 수 있다. 만약 값을 재 할당 할 수 없다면 변수가 아니라 <strong>상수(constant)라</strong> 한다</p>\n<h3 id=\"언매니지드-언어unmanaged-language-vs-매니지드-언어managed-language\" style=\"position:relative;\"><a href=\"#%EC%96%B8%EB%A7%A4%EB%8B%88%EC%A7%80%EB%93%9C-%EC%96%B8%EC%96%B4unmanaged-language-vs-%EB%A7%A4%EB%8B%88%EC%A7%80%EB%93%9C-%EC%96%B8%EC%96%B4managed-language\" aria-label=\"언매니지드 언어unmanaged language vs 매니지드 언어managed language permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>언매니지드 언어(unmanaged language) vs 매니지드 언어(managed language)</h3>\n<p>프로그래밍 언어는 메모리 관리 방식에 따라 언매니지드 언어와 매니지드 언어로 분류할 수 있다.\nC언어 같은 언매니지드 언어는 명시적으로 메모리를 할당하고 해제하기 위해 malloc()과 free()같은 저수준 메모리 제어 기능을 제공한다.\n개발자의 역량에 따라 최적의 성능을 확보 할 수 있지만 그 반대의 경우 치명적 오류를 생산할 수 도 있다.</p>\n<p>자바스크립트 같은 매니지드 언어는 메모리의 할당 및 해제를 위한 메모리 관리 기능을 언어 차원에서 담당하고 개발자의 직접적인 메모리 제어를 허용하지 않는다.\n더 이상 사용하지 않는 메모리의 해제는 <strong>가비지 콜렉터</strong>가 수행하며, 어느정도 일정한 생산성을 확보할 수 있다는 장점이 있지만\n성능 면에서는 어느정도 손실을 감수해야 한다.</p>\n<h1 id=\"7-식별자-네이밍-규칙\" style=\"position:relative;\"><a href=\"#7-%EC%8B%9D%EB%B3%84%EC%9E%90-%EB%84%A4%EC%9D%B4%EB%B0%8D-%EA%B7%9C%EC%B9%99\" aria-label=\"7 식별자 네이밍 규칙 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>7. 식별자 네이밍 규칙</h1>\n<ul>\n<li>예약어는 식별자로 사용 X</li>\n<li>특수문자를 제외한 문자, 숫자 ,_ , $ 포함가능</li>\n<li>숫자로 시작하는것은 허용 X</li>\n<li>자바스크립트은 대소문자를 구별한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var firstName // camelCase\nvar first_name // snake case\nvar FirstName // Pascal Case\nvar strFirstName // Hungarian Case</code></pre></div>","frontmatter":{"date":"November 09, 2021","title":"변수","categories":"javascript","author":"sangzun","emoji":null},"fields":{"slug":"/자바스크립트/04.변수/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://github.com/sangzun-han","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/자바스크립트/05.표현식과 문/","nextSlug":"/자바스크립트/04.변수/","prevSlug":""}},"staticQueryHashes":["1073350324","2938748437"]}