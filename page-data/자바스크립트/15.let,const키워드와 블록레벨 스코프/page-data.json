{"componentChunkName":"component---src-templates-blog-template-js","path":"/자바스크립트/15.let,const키워드와 블록레벨 스코프/","result":{"data":{"cur":{"id":"90a2b090-eaa8-5597-a0dd-5fc70e8611cb","html":"<h1 id=\"1-var-키워드의-문제점\" style=\"position:relative;\"><a href=\"#1-var-%ED%82%A4%EC%9B%8C%EB%93%9C%EC%9D%98-%EB%AC%B8%EC%A0%9C%EC%A0%90\" aria-label=\"1 var 키워드의 문제점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. var 키워드의 문제점</h1>\n<ol>\n<li>변수 중복 선언 허용</li>\n<li>함수 레벨 스코프 : var 키워드로 선언한 변수는 오로지 함수의 코드 블록만을 지역 스코프로 인정한다. 따라서 함수 외부에서 var 키워드로 선언한 변수는 코드 블록 내에서 선언해도 모두 전역 변수가 된다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var x = 10;\n\nif (true) {\n  var x = 1;\n}\nconsole.log(x) // 1</code></pre></div>\n<ol start=\"3\">\n<li>변수 호이스팅 : 변수 선언문 이전에 변수를 참조하는것은 변수 호이스팅에 의해 에러를 발생시키지는 않지만 프로그램의 흐름상 맞지 않을뿐더러 가독성을 떨어뜨리고 오류를 발생시킬 여지를 남긴다.</li>\n</ol>\n<h1 id=\"2-let-키워드\" style=\"position:relative;\"><a href=\"#2-let-%ED%82%A4%EC%9B%8C%EB%93%9C\" aria-label=\"2 let 키워드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. let 키워드</h1>\n<ol>\n<li>변수 중복 선언 금지</li>\n<li>블록 레벨 스코프</li>\n<li>변수 호이스팅 : let키워드로 선언한 변수는 <strong><em>선언단계와 초기화단계가 분리되어 진행된다.</em></strong> 만약 초기화 되기 이전에 변수에 접근하려고 하면 참조 에러가 발생한다. 스코프의 시작지점부터 변수를 참조할 수 없는 구간을 <strong><em>일시적 사각지대(Temporal Dead Zone) TDZ 라고 부른다.</em></strong></li>\n</ol>\n<h1 id=\"3-전역객체와-let\" style=\"position:relative;\"><a href=\"#3-%EC%A0%84%EC%97%AD%EA%B0%9D%EC%B2%B4%EC%99%80-let\" aria-label=\"3 전역객체와 let permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 전역객체와 let</h1>\n<p>let 키워드로 선언된 전역 변수는 전역 객체의 프로퍼티가 아니다.</p>\n<h1 id=\"4-const-키워드\" style=\"position:relative;\"><a href=\"#4-const-%ED%82%A4%EC%9B%8C%EB%93%9C\" aria-label=\"4 const 키워드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. const 키워드</h1>\n<p>const 키워드는 상수를 선언하기 위해 사용한다. 하지만 반드시 상수만을 위해 사용하는것은 아니다.</p>\n<ol>\n<li>const 키워드로 선언한 변수는 반드시 선언과 동시에 초기화 해야한다.</li>\n<li>const 키워드로 선언한 변수는 재할당이 금지된다.</li>\n<li>const 키워드로 선언한 변수에 원시 값을 할당한 경우 변수 값을 변경할 수 없다. —> 원시값은 변경 불가능한 값이며 const는 재할당이 금지되어 있다. 따라서 const를 상수를 표현하는데 사용하기도 한다.</li>\n</ol>\n<h3 id=\"4-1-const-키워드와-객체\" style=\"position:relative;\"><a href=\"#4-1-const-%ED%82%A4%EC%9B%8C%EB%93%9C%EC%99%80-%EA%B0%9D%EC%B2%B4\" aria-label=\"4 1 const 키워드와 객체 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4-1. const 키워드와 객체</h3>\n<p>const 키워드로 선언된 변수에 객체를 할당한 경우에 값을 변경 할 수 있따.객체는 재할당없이도 직접 변경이 가능하기 때문이다. 즉 const 키워드는 재할당을 금지할뿐 <strong><em>불변</em></strong>은 아니다.</p>\n<h1 id=\"5-var-vs-let-vs-const\" style=\"position:relative;\"><a href=\"#5-var-vs-let-vs-const\" aria-label=\"5 var vs let vs const permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. var vs let vs const</h1>\n<p>변수 선언에는 기본적으로 const를 사용하고 let은 재할당이 필요한 경우에 한정해 사용하는것이 좋다. const 키워드를 사용하면 의도치 않은 재할당을 방지하기 때문에 좀더 안전하다.</p>\n<p>변수를 선언하는 시점에는 재할딩이 필요할지 잘 모르는 경우가 많다. 그리고 객체는 의외로 재할당하는 경우가 드물다. 따라서 변수를 선언할 때는 일단 const 키워드를 사용하고 재할당이 필요하다면 let을 사용한다.</p>","excerpt":"1. var 키워드의 문제점 변수 중복 선언 허용 함수 레벨 스코프 : var 키워드로 선언한 변수는 오로지 함수의 코드 블록만을 지역 스코프로 인정한다. 따라서 함수 외부에서 var 키워드로 선언한 변수는 코드 블록 내에서 선언해도 모두 전역 변수가 된다. 변수 호이스팅 : 변수 선언문 이전에 변수를 참조하는것은 변수 호이스팅에 의해 에러를 발생시키지는 않지만 프로그램의 흐름상 맞지 않을뿐더러 가독성을 떨어뜨리고 오류를 발생시킬 여지를 남긴다. 2. let 키워드 변수 중복 선언 금지 블록 레벨 스코프 변수 호이스팅 : let키워드로 선언한 변수는 선언단계와 초기화단계가 분리되어 진행된다. 만약 초기화 되기 이전에 변수에 접근하려고 하면 참조 에러가 발생한다. 스코프의 시작지점부터 변수를 참조할 수 없는 구간을 일시적 사각지대(Temporal Dead Zone) TDZ 라고 부른다. 3. 전역객체와 let let 키워드로 선언된 전역 변수는 전역 객체의 프로퍼티가 아니다. 4. …","frontmatter":{"date":"November 30, 2021","title":"15. let, const 키워드와 블록 레벨 스코프","categories":"javascript","author":"sangzun","emoji":null},"fields":{"slug":"/자바스크립트/15.let,const키워드와 블록레벨 스코프/"}},"next":{"id":"eacaa79a-7be0-5761-bbb0-05e2061e38cf","html":"<h1 id=\"1-변수의-생명주기\" style=\"position:relative;\"><a href=\"#1-%EB%B3%80%EC%88%98%EC%9D%98-%EC%83%9D%EB%AA%85%EC%A3%BC%EA%B8%B0\" aria-label=\"1 변수의 생명주기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 변수의 생명주기</h1>\n<h3 id=\"1-1-지역변수의-생명주기\" style=\"position:relative;\"><a href=\"#1-1-%EC%A7%80%EC%97%AD%EB%B3%80%EC%88%98%EC%9D%98-%EC%83%9D%EB%AA%85%EC%A3%BC%EA%B8%B0\" aria-label=\"1 1 지역변수의 생명주기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1-1. 지역변수의 생명주기</h3>\n<p>변수는 선언에 의해 생성되고 할당을 통해 값을 갖는다. 그리고 언젠가 소멸한다. 즉 변수는 생명주기(Life Cycle)가 있다. 변수에 생명주기가 없다면 한번 선언된 변수는 영원히 메모리 공간을 점유하게 된다.\n<strong><em>지역변수의 생명주기는 함수의 생명주기와 일치한다.</em></strong></p>\n<p>변수의 생명주기는 메모리 공간이 확보(allocate)된 시점부터 메모리 공간이 해제(release)되어 가용 메모리풀(memory pool)에 반환되는 시점까지다.</p>\n<p>함수 내부에서 선언된 지역 변수는 함수가 생성한 스코프에 등록된다. 할당된 메모리 공간은 더 이상 그 누구도 참조하지 않을 때 가비지 콜렉터에 의해 해제되어 가용 메모리 풀에 반환된다. 즉 누군가 메모리 공간을 참조하고 있으면 해제되지 않고 확보된 상태로 남아 있게 된다. 마찬가지로 누군가 스코프를 참조하고 있으면 스코프는 소멸하지 않고 생존하게 된다.</p>\n<h3 id=\"1-2-전역변수의-생명주기\" style=\"position:relative;\"><a href=\"#1-2-%EC%A0%84%EC%97%AD%EB%B3%80%EC%88%98%EC%9D%98-%EC%83%9D%EB%AA%85%EC%A3%BC%EA%B8%B0\" aria-label=\"1 2 전역변수의 생명주기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1-2. 전역변수의 생명주기</h3>\n<p>전역코드는 명시적인 호출없이 실행된다. 전역코드에는 반환문을 사용할 수 없으므로 마지막문이 실행되어 더 이상 실행할 문이 없을 때 종료된다.</p>\n<p>var키워드로 선언된 전역변수는 전역 객체의 프로퍼티가 된다. 따라서 var 키워드로 선언된 전역변수의 생명주기는 전역 객체의 생명주기와 일치한다.</p>\n<h1 id=\"2-전역변수의-문제점\" style=\"position:relative;\"><a href=\"#2-%EC%A0%84%EC%97%AD%EB%B3%80%EC%88%98%EC%9D%98-%EB%AC%B8%EC%A0%9C%EC%A0%90\" aria-label=\"2 전역변수의 문제점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 전역변수의 문제점</h1>\n<ol>\n<li>암묵적 결합(implic coupling) : 전역코드는 어디서든 참조하고 할당할 수 있는 변수이다. 변수의 유효범위가 크고 가독성이 나빠지고 의도치 않게 상태가 변경될 수 있는 위험성이 존재한다.</li>\n<li>긴 생명 주기 : 전역변수는 생명주기가 길다. 따라서 메모리 리소스도 오랜기간 소비한다. 또한 전역변수의 상태를 변경할 수 있는 시간도 길고 기회도\n많다.</li>\n<li>스코프 체인 상에서 종점에 존재 : 변수를 검색 할 때 전역 변수가 가장 마지막에 검색되므로 검색속도가 느리다.</li>\n<li>네임스페이스 오염 : 자바스크립트는 파일이 분리되어 있다해도 하나의 전역스코프를 공유한다. 따라서 다른 파일 내에서 동일한 이름으로 명명된 전역변수나 전역함수가 같은 스코프 내에 존재할 경우 예상치 못한 결과를 가져올 수 있다.</li>\n</ol>\n<h1 id=\"3-전역변수-사용을-억제하는-방법\" style=\"position:relative;\"><a href=\"#3-%EC%A0%84%EC%97%AD%EB%B3%80%EC%88%98-%EC%82%AC%EC%9A%A9%EC%9D%84-%EC%96%B5%EC%A0%9C%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-label=\"3 전역변수 사용을 억제하는 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 전역변수 사용을 억제하는 방법</h1>\n<ol>\n<li>즉시 실행 함수</li>\n</ol>\n<p>함수정의와 동시에 동시에 호출되는 즉시 실행 함수는 단 한번만 호출된다. 모든 코드를 즉시 실행 함수로 감싸면 모든 변수는 즉시 실행 함수의 지역변수가 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(function() {\n  var foo = 10;\n}());</code></pre></div>\n<ol start=\"2\">\n<li>네임스페이스 객체</li>\n</ol>\n<p>전역에 네임스페이스 역할을 담당할 객체를 생성하고 전역변수처럼 사용하고싶은 변수를 프로퍼티로 추가한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var MYAPP = {};\nMYAPP.name = 'Haa';</code></pre></div>\n<ol start=\"3\">\n<li>모듈 패턴</li>\n</ol>\n<p>클래스를 모방해서 관련이 있는 변수와 함수를 모아 즉시 실행 함수로 감싸 하나의 모듈을 만든다. 전역변수의 억제느 물론 캡슐화 까지 구현할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var Counter = (function() {\n  // private\n  var num = 0;\n\n  return (\n    increase() {\n      return ++num;\n    },\n    decrease() {\n      return --num;\n    }\n}());</code></pre></div>\n<ol start=\"4\">\n<li>ES6 모듈</li>\n</ol>\n<p>ES6모듈을 사용하면 전역변수를 사용할 수 없다. ES6모듈은 파일 자체의 독자적인 모듈스코프를 제공한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;script type=\"module\" src=\"test.mjs\">&lt;/script></code></pre></div>","frontmatter":{"date":"November 30, 2021","title":"14. 전역변수의 문제점","categories":"javascript","author":"sangzun","emoji":null},"fields":{"slug":"/자바스크립트/14.전역변수의 문제점/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://github.com/sangzun-han","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/자바스크립트/15.let,const키워드와 블록레벨 스코프/","nextSlug":"/자바스크립트/14.전역변수의 문제점/","prevSlug":""}},"staticQueryHashes":["1073350324","2938748437"]}