{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/자바스크립트/38.브라우저의 렌더링/",
    "result": {"data":{"cur":{"id":"0d7dc3ee-d82e-5514-a7af-e02bc839e001","html":"<h1 id=\"1-브라우저의-렌더링-과정\" style=\"position:relative;\"><a href=\"#1-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EC%9D%98-%EB%A0%8C%EB%8D%94%EB%A7%81-%EA%B3%BC%EC%A0%95\" aria-label=\"1 브라우저의 렌더링 과정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 브라우저의 렌더링 과정</h1>\n<ol>\n<li>\n<p>브라우저는 html,css,js,이미지,폰트 파일등 렌더링에 필요한 리소스를 요청하고 서버로부터 응답을 받는다.</p>\n</li>\n<li>\n<p>브라우저의 렌더링 엔진은 서버로부터 응답된 html과 css를 파싱하여 DOM과 CSSOM을 생성하고 이들을 결합한 렌더 트리를 생성한다.</p>\n</li>\n<li>\n<p>브라우저의 자바스크립트 엔진은 서버로부터 응답된 자바스크립트를 파싱하여 AST를 생성하고 바이트코드로 변환하여 실행한다. 이때 자바스크립트는 DOM API를 통해 DOM이나 CSSOM을 변경할 수 있다. 변경된 DOM과 CSSOM은 다시 렌더 트리로 결합된다.</p>\n</li>\n<li>\n<p>렌더 트리를 기반으로 html 요소의 레이아웃을 계산하고 브라우저 화면에 html 요소를 페인팅한다.</p>\n</li>\n</ol>\n<h1 id=\"2-dom\" style=\"position:relative;\"><a href=\"#2-dom\" aria-label=\"2 dom permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. DOM</h1>\n<p>HTML 요소는 렌더링 엔진에 의해 파싱되어 DOM을 구성하는 요소 노드 객체로 변환된다. 노드 객체들로 구성된 트리 자료구조를 <code class=\"language-text\">DOM(Document Object Model)</code> 이라 한다. 노드 객체의 트리로 구조화되어 있기 때문에 DOM을 DOM트리 라고 부른다.</p>\n<p><img src=\"/domtree.png\" alt=\"domtree\"></p>\n<p>DOM 컬렉션 객체인 HTMLCollection과 NodeList는 DOM API가 여러 개의 결과값을 반환하기 위한 DOM 컬렉션 객체다. HTMLCollection은 언제나 live 객체로 동작하고 NodeList는 대부분 non-live 객체로 동작한다.</p>\n<h3 id=\"2-1-dom-조작\" style=\"position:relative;\"><a href=\"#2-1-dom-%EC%A1%B0%EC%9E%91\" aria-label=\"2 1 dom 조작 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2-1. DOM 조작</h3>\n<p>DOM 조작은 새로운 노드를 생성하여 DOM에 추가하거나 기존 노드를 삭제 또는 교체하는것이다. DOM에 새로운 노드가 추가되거나 삭제되면 리플로우, 리페인트가 발생하므로 성능에 영향을 준다. 따라서 복잡한 DOM 조작은 주의해서 사용해야 한다.</p>\n<h4 id=\"innerhtml\" style=\"position:relative;\"><a href=\"#innerhtml\" aria-label=\"innerhtml permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>innerHTML</h4>\n<table>\n<thead>\n<tr>\n<th>장점</th>\n<th>단점</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>DOM 조작 방식에 비해 빠르고 간편하다.</td>\n<td>XSS 공격에 취약하다.</td>\n</tr>\n<tr>\n<td>간편하게 문자열로 정의한 여러 요소를 DOM에 추가할 수 있다.</td>\n<td>해당 요소의 내용을 덮어쓴다.(=HTML을 다시 파싱한다.)</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"dom-조작방식\" style=\"position:relative;\"><a href=\"#dom-%EC%A1%B0%EC%9E%91%EB%B0%A9%EC%8B%9D\" aria-label=\"dom 조작방식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DOM 조작방식</h4>\n<table>\n<thead>\n<tr>\n<th>장점</th>\n<th>단점</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>특정 노드 한개를 DOM에 추가할때 적합하다.</td>\n<td>innerHTML보다 느리고 더 많은 코드가 필요하다.</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"insertadjacenthtml\" style=\"position:relative;\"><a href=\"#insertadjacenthtml\" aria-label=\"insertadjacenthtml permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>insertAdjacentHTML()</h5>\n<table>\n<thead>\n<tr>\n<th>장점</th>\n<th>단점</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>간편하게 문자열로 정의된 여러 요소를 DOM에 추가할 수 있다.</td>\n<td>XSS 공격에 취약하다.</td>\n</tr>\n</tbody>\n</table>","excerpt":"1. 브라우저의 렌더링 과정 브라우저는 html,css,js,이미지,폰트 파일등 렌더링에 필요한 리소스를 요청하고 서버로부터 응답을 받는다. 브라우저의 렌더링 엔진은 서버로부터 응답된 html과 css를 파싱하여 DOM과 CSSOM을 생성하고 이들을 결합한 렌더 트리를 생성한다. 브라우저의 자바스크립트 엔진은 서버로부터 응답된 자바스크립트를 파싱하여 AST를 생성하고 바이트코드로 변환하여 실행한다. 이때 자바스크립트는 DOM API를 통해 DOM이나 CSSOM을 변경할 수 있다. 변경된 DOM과 CSSOM은 다시 렌더 트리로 결합된다. 렌더 트리를 기반으로 html 요소의 레이아웃을 계산하고 브라우저 화면에 html 요소를 페인팅한다. 2. DOM HTML 요소는 렌더링 엔진에 의해 파싱되어 DOM을 구성하는 요소 노드 객체로 변환된다. 노드 객체들로 구성된 트리 자료구조를  이라 한다. 노드 객체의 트리로 구조화되어 있기 때문에 DOM을 DOM트리 라고 부른다. domtree D…","frontmatter":{"date":"March 22, 2022","title":"38~39. 브라우저의 렌더링 과정, DOM","categories":"javascript","author":"sangzun","emoji":null},"fields":{"slug":"/자바스크립트/38.브라우저의 렌더링/"}},"next":{"id":"3b22e04a-dabd-5c3d-9e7c-aeba3e540c9a","html":"<h1 id=\"1-set\" style=\"position:relative;\"><a href=\"#1-set\" aria-label=\"1 set permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Set</h1>\n<p>Set 객체는 <code class=\"language-text\">중복되지 않는</code> 유일한 값들의 집합이다.</p>\n<table>\n<thead>\n<tr>\n<th>구분</th>\n<th>배열</th>\n<th>Set 객체</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>동일한 값을 중복하여 포함할 수 있다.</td>\n<td>O</td>\n<td>X</td>\n</tr>\n<tr>\n<td>요소 순서에 의미가 있다.</td>\n<td>O</td>\n<td>X</td>\n</tr>\n<tr>\n<td>인덱스로 요소에 접근할 수 있다.</td>\n<td>O</td>\n<td>X</td>\n</tr>\n</tbody>\n</table>\n<p>Set 생성자 함수는 이터러블을 인수로 전달받아 Set 객체를 생성한다. 이 때 중복된 값은 Set 객체에 요소로 저장 되지 않는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const set = new Set([1, 2, 3, 3]);\nconsole.log(set); // Set(3) {1,2,3}</code></pre></div>\n<h1 id=\"2-set-객체-메서드\" style=\"position:relative;\"><a href=\"#2-set-%EA%B0%9D%EC%B2%B4-%EB%A9%94%EC%84%9C%EB%93%9C\" aria-label=\"2 set 객체 메서드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Set 객체 메서드</h1>\n<p>Set 객체의 요소 개수를 확인할때는 <code class=\"language-text\">Set.prototype.size</code> 프로퍼티를 사용한다. size 프로퍼티는 setter 함수 없이 getter 함수만 존재하는 접근자 프로퍼티이다. 따라서 size 프로퍼티에 숫자를 할당하여 Set 객체의 요소 개수를 변경할 수 없다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const set = new Set[1, 2, 3, 3]);\nconsole.log(set.size); //\n\nset.size = 10; // 무시됨</code></pre></div>\n<p>Set 객체에 요소를 추가할 때는 <code class=\"language-text\">Set.prototype.add</code> 메서드를 사용한다. add 메서드는 새로운 요소가 추가된 Set 객체를 반환한다. 따라서 add 메서드를 연속적으로 호출할 수 있다.</p>\n<p>Set 객체에 특정 요소가 존재하는지 확인하려면 <code class=\"language-text\">Set.prototype.has</code> 메서드를 사용한다. has 메서드는 불리언 값을 반환한다.</p>\n<p>Set 객체의 특정 요소를 삭제하려면 <code class=\"language-text\">Set.prototype.delete</code> 메서드를 사용한다 delete 메서드는 불리언 값을 반환한다.</p>\n<p>Set 객체의 모든 요소를 일괄 삭제하려면 <code class=\"language-text\">Set.prototype.clear</code> 메서드를 사용한다. clear 메서드는 언제나 undefined를 반환한다.</p>\n<p>Set 객체의 요소를 순회하려면 <code class=\"language-text\">Set.prototype.forEach</code> 메서드를 사용한다. Set 객체는 이터러블이다. 따라서 for … of 문으로 순회할 수 있으며 스프레드 문법과 디스트럭처링의 대상이 될 수도 있다.</p>\n<p>Set 객체는 수학적 집합을 구현하기 위한 자료구조이다. 따라서 Set 객체를 통해 교집합, 합집합, 차집합등을 구현할 수 있다.</p>\n<h1 id=\"3-map\" style=\"position:relative;\"><a href=\"#3-map\" aria-label=\"3 map permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Map</h1>\n<p>Map 객체는 <code class=\"language-text\">키와 값의 쌍</code>으로 이루어진 컬렉션이다.</p>\n<table>\n<thead>\n<tr>\n<th>구분</th>\n<th>객체</th>\n<th>Map 객체</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>키로 사용할 수 있는 값</td>\n<td>문자열 또는 심벌 값</td>\n<td>객체를 포함한 모든 값</td>\n</tr>\n<tr>\n<td>이터러블</td>\n<td>X</td>\n<td>O</td>\n</tr>\n<tr>\n<td>요수 개수 확인</td>\n<td>Object.keys(obj).length</td>\n<td>map.size</td>\n</tr>\n</tbody>\n</table>\n<p>Map 생성자 함수는 이터러블을 인수로 전달받아 Map 객체를 생성한다. 이때 인수로 전달되느 이터러블은 키와 값의 쌍으로 이루어진 요소로 구성되어야 한다.</p>\n<p>Map 생성자 함수의 인수로 전달한 이터러블에 중복된 키를 갖는 요소가 존재하면 값이 덮어써진다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const map = new Map([['key1', 'value1'], ['key2', 'value2']]);\nconsole.log(map); // {'key1' => 'value1', 'key2' => 'value2'}\n\nconst map = new Map([['key1', 'value1'], ['key1', 'value2']]);\nconsole.log(map); //  {'key1' => 'value2'}</code></pre></div>\n<h1 id=\"4-map-객체-메서드\" style=\"position:relative;\"><a href=\"#4-map-%EA%B0%9D%EC%B2%B4-%EB%A9%94%EC%84%9C%EB%93%9C\" aria-label=\"4 map 객체 메서드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. Map 객체 메서드</h1>\n<p>Map 객체의 요소 개수를 확인할 때는 <code class=\"language-text\">Map.prototype.size</code> 프로퍼티를 사용한다.</p>\n<p>Map 객체의 요소를 추가할 때는 <code class=\"language-text\">Map.prototype.set</code> 메서드를 사용한다. set 메서드는 새로운 요소가 추가된 Map 객체를 반환한다. 따라서 set 메서드를 연속적으로 호출할 수 있다.</p>\n<p>Map 객체에서 특정 요소를 취득할 때는 <code class=\"language-text\">Map.prototype.get</code> 메서드를 사용한다. get 메서드는 인수로 전달한 키를 갖는 값을 반환하고 인수로 전달한 키를 갖는 요소가 존재하지 않으면 undefined를 반환한다.</p>\n<p>Map 객체에서 특정 요소가 존재하는지 확인하려면 <code class=\"language-text\">Map.prototype.has</code> 메서드를 사용한다. has 메서드는 불리언 값을 반환한다.</p>\n<p>Map 객체의 요소를 삭제하려면 <code class=\"language-text\">Map.prototype.delete</code> 메서드를 사용한다. delete 메서드는 불리언 값을 반환한다.</p>\n<p>Map 객체의 요소를순회하려면 <code class=\"language-text\">Map.prototype.forEach</code> 메서드를 사용한다.</p>\n<ul>\n<li>첫번째 인수 : 현재 순회중인 요소 값</li>\n<li>두번째 인수 : 현재 순회중인 요소 키</li>\n<li>세번째 인수 : 현재 순회중인 Map 객체</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const lee = { name : 'Lee' };\nconst kim = { name : 'Kim' };\n\nconst map = new Map([[lee, 'developer'], [kim, 'designer']]);\n\nmap.forEach((v,k,map) => console.log(v,k,map))</code></pre></div>\n<p>Map 객체는 이터러블이다. 따라서 for … of 문으로 순회할 수 있으며 스프레드 문법과 배열 디스트럭처링 할당의 대상이 될 수도 있다.</p>","frontmatter":{"date":"March 18, 2022","title":"37. Set과 Map","categories":"javascript","author":"sangzun","emoji":null},"fields":{"slug":"/자바스크립트/37.Set과 Map/"}},"prev":{"id":"7cf5fbb4-591c-5621-8bee-1233f46bc1e9","html":"<h1 id=\"1-이벤트\" style=\"position:relative;\"><a href=\"#1-%EC%9D%B4%EB%B2%A4%ED%8A%B8\" aria-label=\"1 이벤트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 이벤트</h1>\n<p>브라우저는 특정 일이 발생하면 이를 감지하여 이벤트를 발생시킨다. 이벤트가 발생했을 때 호출될 함수를 <code class=\"language-text\">이벤트 핸들러(event handler)</code> 라 하고 이벤트가 발생했을 때 브라우저에게 이벤트 핸들러의 호출을 위임하는 것을 <code class=\"language-text\">이벤트 핸들러 등록</code> 이라 한다.</p>\n<h1 id=\"2-이벤트-핸들러-등록\" style=\"position:relative;\"><a href=\"#2-%EC%9D%B4%EB%B2%A4%ED%8A%B8-%ED%95%B8%EB%93%A4%EB%9F%AC-%EB%93%B1%EB%A1%9D\" aria-label=\"2 이벤트 핸들러 등록 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 이벤트 핸들러 등록</h1>\n<p>이벤트 핸들러를 등록하는 방법은 3가지다.</p>\n<h3 id=\"2-1-이벤트-핸들러-어트리뷰트\" style=\"position:relative;\"><a href=\"#2-1-%EC%9D%B4%EB%B2%A4%ED%8A%B8-%ED%95%B8%EB%93%A4%EB%9F%AC-%EC%96%B4%ED%8A%B8%EB%A6%AC%EB%B7%B0%ED%8A%B8\" aria-label=\"2 1 이벤트 핸들러 어트리뷰트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2-1. 이벤트 핸들러 어트리뷰트</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;!DOCTYPE html>\n&lt;html>\n  &lt;body>\n    &lt;button onclick=\"sayHi('LEE')\">Click&lt;/button>\n  &lt;/body>\n  &lt;script>\n    function sayHi(name) {\n      console.log(`Hi ${name}`);\n    }\n  &lt;/script>\n&lt;/html></code></pre></div>\n<p>HTML과 자바스크립트는 관심사가 다르므로 분리하는것이 좋다. 따라서 이벤트 핸들러 어트리뷰트 방식은 사용하지 않는것이 좋다.</p>\n<h3 id=\"2-2-이벤트-핸들러-프로퍼티-방식\" style=\"position:relative;\"><a href=\"#2-2-%EC%9D%B4%EB%B2%A4%ED%8A%B8-%ED%95%B8%EB%93%A4%EB%9F%AC-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0-%EB%B0%A9%EC%8B%9D\" aria-label=\"2 2 이벤트 핸들러 프로퍼티 방식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2-2. 이벤트 핸들러 프로퍼티 방식</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;!DOCTYPE html>\n&lt;html>\n  &lt;body>\n    &lt;button>Click&lt;/button>\n  &lt;/body>\n  &lt;script>\n    const $button = document.querySelector('button');\n    $button.onclick = function () {\n      console.log('click');\n    };\n  &lt;/script>\n&lt;/html></code></pre></div>\n<p>이벤트 핸들러 어트리뷰트 방식도 DOM 노드 객체의 이벤트 핸들러 프로퍼티로 변환되므로 결과적으로 이벤트 핸들러 프로퍼티 방식과 동일하다고 할 수 있다. <code class=\"language-text\">이벤트 핸들러 프러퍼티 방식</code>은 이벤트 핸들러 어트리뷰트 방식의 HTML과 자바스크립트가 혼재되는 문제를 해결할 수 있지만 이벤트 핸들러 프러퍼티에 하나의 이벤트 핸들러만 바인딩 할 수 있다는 단점이 존재한다.</p>\n<h3 id=\"addeventlistener-메서드-방식\" style=\"position:relative;\"><a href=\"#addeventlistener-%EB%A9%94%EC%84%9C%EB%93%9C-%EB%B0%A9%EC%8B%9D\" aria-label=\"addeventlistener 메서드 방식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>addEventListener 메서드 방식</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;!DOCTYPE html>\n&lt;html>\n  &lt;body>\n    &lt;button>Click&lt;/button>\n  &lt;/body>\n  &lt;script>\n    const $button = document.querySelector('button');\n    $button.addEventListener('click', function () {\n      console.log('Click');\n    });\n  &lt;/script>\n&lt;/html></code></pre></div>\n<p>동일한 HTML 요소에서 동일한 이벤트에 대해 <code class=\"language-text\">addEventListener</code>메서드는 하나 이상의 이벤트 핸들러를 등록할 수 있다.</p>\n<h1 id=\"3-이벤트-핸들러-제거\" style=\"position:relative;\"><a href=\"#3-%EC%9D%B4%EB%B2%A4%ED%8A%B8-%ED%95%B8%EB%93%A4%EB%9F%AC-%EC%A0%9C%EA%B1%B0\" aria-label=\"3 이벤트 핸들러 제거 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 이벤트 핸들러 제거</h1>\n<p><code class=\"language-text\">addEventListener</code> 메서드르 등록한 이벤트 핸들러를 제거하려면 <code class=\"language-text\">removeEventListener</code>메서드를 사용한다. 단 addEventListener 메서드에 전달한 인수와 removeEventListener 메서드에 전달한 인수가 일치해야 한다. 따라서 무명 함수를 이벤트 핸들러로 등록한 경우 제거할 수 없다.</p>\n<p>또한 이벤트 핸들러 프로퍼티 방식으로 등록한 이벤트 핸들러는 removeEventListener로 제거할 수 없다 제거하려면 이벤트 핸들러 프로퍼티에 null을 할당해야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;!DOCTYPE html>\n&lt;html>\n  &lt;body>\n    &lt;button>Click&lt;/button>\n  &lt;/body>\n  &lt;script>\n    const $button = document.querySelector('button');\n    const handleClick = () => {\n      console.log('Click');\n    };\n    $button.onclick = null;\n  &lt;/script>\n&lt;/html></code></pre></div>\n<h1 id=\"4-이벤트-객체\" style=\"position:relative;\"><a href=\"#4-%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EA%B0%9D%EC%B2%B4\" aria-label=\"4 이벤트 객체 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 이벤트 객체</h1>\n<p>이벤트가 발생하면 이벤트에 관련된 정보를 담고 있는 이벤트 객체가 동적으로 생성되며 생성된 이벤트 객체는 이벤트 핸들러의 첫번째 인수로 전달된다.</p>\n<p>이벤트 핸들러 어트리뷰트 방식의 경우 이벤트 객체를 전달받으려면 이벤트 핸들러의 첫번째 매개변수는 반드시 event여야 한다.</p>\n<p><img src=\"/onclick.png\" alt=\"onclick\"></p>\n<h1 id=\"5이벤트-전파\" style=\"position:relative;\"><a href=\"#5%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EC%A0%84%ED%8C%8C\" aria-label=\"5이벤트 전파 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.이벤트 전파</h1>\n<p>DOM 트리 상에 존재하는 DOM 요소 노드에서 발생한 이벤트는 DOM 트리를 통해 전파된다. 이를 <code class=\"language-text\">이벤트 전파(event propagation</code>라고 한다.</p>\n<ul>\n<li>캡쳐링 단계(capturing phase) : 이벤트가 상위 요소에서 하위 요소 방향으로 전파</li>\n<li>타깃 단계(target phase) : 이벤트가 이벤트 타깃에 도달</li>\n<li>버블링 단계(bubbling phase) : 이벤트가 하위 요소에서 상위 요소 방향으로 전파</li>\n</ul>\n<p>이벤트 핸들러 어트리뷰트/프러퍼티 방식으로 등록한 이벤트는 타깃단계와 버블링 단계의 이벤트만 캐치 할수 있다. 하지만 addEventListener 메서드 방식으로 등록한 이벤트 핸들러는 3번째 인수로 true를 전달하면 캡쳐링 단계의 이벤트도 캐치할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;!DOCTYPE html>\n&lt;html>\n  &lt;body>\n    &lt;ul id=\"fruits\">\n      &lt;li id=\"apple\">Apple&lt;/li>\n      &lt;li id=\"banana\">Banana&lt;/li>\n      &lt;li id=\"orange\">Orange&lt;/li>\n    &lt;/ul>\n    &lt;script>\n      const $fruits = document.getElementById('fruits');\n      const $banana = document.getElementById('banana');\n\n      // 캡처링 단계의 이벤트를 캐치한다.\n      $fruits.addEventListener(\n        'click',\n        (e) => {\n          console.log(`이벤트 단계: ${e.eventPhase}`); // 1: 캡처링 단계\n          console.log(`이벤트 타깃: ${e.target}`);\n          console.log(`커런트 타깃: ${e.currentTarget}`);\n        },\n        true,\n      );\n\n      // 타깃 단계의 이벤트를 캐치한다.\n      $banana.addEventListener('click', (e) => {\n        console.log(`이벤트 단계: ${e.eventPhase}`); // 2: 타깃 단계\n        console.log(`이벤트 타깃: ${e.target}`);\n        console.log(`커런트 타깃: ${e.currentTarget}`);\n      });\n\n      // 버블링 단계의 이벤트를 캐치한다.\n      $fruits.addEventListener('click', (e) => {\n        console.log(`이벤트 단계: ${e.eventPhase}`); // 3: 버블링 단계\n        console.log(`이벤트 타깃: ${e.target}`);\n        console.log(`커런트 타깃: ${e.currentTarget}`);\n      });\n    &lt;/script>\n  &lt;/body>\n&lt;/html></code></pre></div>\n<p><code class=\"language-text\">이벤트는 이벤트를 발생시킨 이벤트 타킷은 물론 상위 DOM 요소에서도 캐치 할 수 있다.</code> 대부분의 이벤트는 캡처링과 버블링을 통해 전파된다. 하지만 몇개의 이벤트는 버블링을 통해 전파되지 않는다.</p>\n<ul>\n<li>foucs/blur</li>\n<li>load/unload/abort/error</li>\n<li>mouseenter/mouseleave</li>\n</ul>\n<p>위 이벤트는 버블링 되지 않으므로 이벤트 타깃의 상위 요소에서 위 이벤트를 캐치하려면 캡쳐링 단계의 이벤트를 캐치해야 한다. 만약 상위 요소에서 캐치 해야한다면 focusin/focusout, mouseover/mouseout으로 대체할 수 있다.</p>\n<h1 id=\"6이벤트-위임\" style=\"position:relative;\"><a href=\"#6%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EC%9C%84%EC%9E%84\" aria-label=\"6이벤트 위임 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6.이벤트 위임</h1>\n<p>이벤트 위임은 여러개의 하위 DOM 요소에 각각 이벤트 핸들러를 등록하는 대신 하나의 상위 DOM 요소애 이벤트 핸들러를 등록하는 방법을 말한다.</p>\n<p>이벤트 위임을 통해 하위 DOM 요소에서 발생한 이벤트를 처리할 때는 상위 요소에 이벤트 핸들러를 등록하기 때문에 이벤트를 실제로 발생시킨 DOM 요소가 기대한 DOM 요소가 아닐 수도 있다. 따라서 이벤트에 반응이 필요한 DOM 요소에 한정하여 이벤트 핸들러가 실행되도록 이벤트 타깃을 검사할 필요가 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function activate({ target }) {\n  // 이벤트를 발생시킨 요소(target)이 ul#fruits의 자식 요소가 아니라면 무시한다.\n  if (!target.matches('#fruits > li')) return;</code></pre></div>\n<h1 id=\"7-dom-요소의-기본동작-조작\" style=\"position:relative;\"><a href=\"#7-dom-%EC%9A%94%EC%86%8C%EC%9D%98-%EA%B8%B0%EB%B3%B8%EB%8F%99%EC%9E%91-%EC%A1%B0%EC%9E%91\" aria-label=\"7 dom 요소의 기본동작 조작 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>7. DOM 요소의 기본동작 조작</h1>\n<p>DOM 요소는 저마다 기본동작이 있다. a 요소는 href 어트리뷰트에 지정된 링크로 이동하고 checkbox, radio요소는 클릭하면 체크 또는 해제 된다. <code class=\"language-text\">preventDefault</code>메서드는 이러한 DOM 요소의 기본 동작을 중단시킨다.</p>\n<p>어느 한 요소를 이용하여 이벤트를 처리한 후 이벤트가 부모 요소로 이벤트가 전파되는 것을 중단시키기 위해서는 <code class=\"language-text\">stopPropagation</code>메서드를 이용한다.</p>","frontmatter":{"date":"March 25, 2022","title":"40. 이벤트","categories":"javascript","author":"sangzun","emoji":null},"fields":{"slug":"/자바스크립트/40.이벤트/"}},"site":{"siteMetadata":{"siteUrl":"https://github.com/sangzun-han","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/자바스크립트/38.브라우저의 렌더링/","nextSlug":"/자바스크립트/37.Set과 Map/","prevSlug":"/자바스크립트/40.이벤트/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}