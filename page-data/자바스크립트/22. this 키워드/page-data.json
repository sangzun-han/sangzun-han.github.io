{"componentChunkName":"component---src-templates-blog-template-js","path":"/자바스크립트/22. this 키워드/","result":{"data":{"cur":{"id":"78a75c8a-1338-54d9-9b4d-b06ad7e71e48","html":"<h1 id=\"1-this-키워드\" style=\"position:relative;\"><a href=\"#1-this-%ED%82%A4%EC%9B%8C%EB%93%9C\" aria-label=\"1 this 키워드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. this 키워드</h1>\n<p>메서드는 프로퍼티를 참조하고 변경할 수 있어야 한다. 이 때 메서드가 자신이 속한 객체의 프로퍼티를 참조하려면 자신이 속한 객체를 가리키는 식별자를 참조할 수 있어야 한다.</p>\n<p><em><strong>this는 자신이 속한 객체 또는 자신이 생성할 인스턴스를 가리키는 자기 참조 변수(self-referencing variable)다. this를 통해 자신이 속한 객체 또는 자신이 생성할 인스턴스의 프로퍼티나 메서드를 참조할 수 있다.</strong></em></p>\n<ul>\n<li>this 바인딩 : 바인딩이랑 식별자와 값을 연결하는 과정을 의미한다. this 바인딩은 this가 가리킬 객체를 바인딩 한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// 생성자 함수\nfunction Circle(radius) {\n  this.radius = radius;\n}\n\nCircle.prototype.getDiameter = function () {\n  return 2 * this.radius;\n};\n\n// 인스턴스 생성\nconst circle = new Circle(15);\nconsole.log(circle.getDiameter()); // 30</code></pre></div>\n<p>객체 리터럴의 메서드 내부에서의 this는 메서드를 호출한 객체, 즉 circle을 가리킨다.</p>\n<p>생성자 함수 내부의 this는 생성자 함수가 생성할 인스턴스를 가리킨다. this는 상황에 따라 가리키는 대상이 다르다.</p>\n<p>자바스크립트의 this는 함수가 호출되는 방식에 따라 this 바인딩이 동적으로 결정된다. 또한 strict mode는 this 바인딩에 영향을 준다.</p>\n<h1 id=\"2-함수-호출-방식과-this-바인딩\" style=\"position:relative;\"><a href=\"#2-%ED%95%A8%EC%88%98-%ED%98%B8%EC%B6%9C-%EB%B0%A9%EC%8B%9D%EA%B3%BC-this-%EB%B0%94%EC%9D%B8%EB%94%A9\" aria-label=\"2 함수 호출 방식과 this 바인딩 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 함수 호출 방식과 this 바인딩</h1>\n<h3 id=\"2-1-일반-함수-호출\" style=\"position:relative;\"><a href=\"#2-1-%EC%9D%BC%EB%B0%98-%ED%95%A8%EC%88%98-%ED%98%B8%EC%B6%9C\" aria-label=\"2 1 일반 함수 호출 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2-1. 일반 함수 호출</h3>\n<p>기본적으로 this에는 전역 객체가 바인딩된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function foo() {\n\tconsole.log(this) // undefined\n\tfunction bar() {\n\t\tconsole.log(this) // undefined\n\t}\n\tbar()\n}\nfoo()</code></pre></div>\n<p>중첩함수를 일반 함수로 호출하면 함수 내부의 this에는 전역객체가 바인됭된다. strict mode가 적용된 일반 함수 내부에는 undefined가 바인딩된다.</p>\n<p><em><strong>메서드 내부의 중첩함수나 콜백함수의 this 바인딩을 메서드의 this 바인딩과 일치시키는 방법</strong></em></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const obj = {\n  value: 100,\n  foo() {\n    const that = this;\n\n    setTimeout(function () {\n      console.log(that.value);\n    }, 1000);\n  },\n};\n\nobj.foo();</code></pre></div>\n<h3 id=\"2-2-메서드-호출\" style=\"position:relative;\"><a href=\"#2-2-%EB%A9%94%EC%84%9C%EB%93%9C-%ED%98%B8%EC%B6%9C\" aria-label=\"2 2 메서드 호출 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2-2. 메서드 호출</h3>\n<p>메서드 내부의 this에는 메서드를 호출한 객체가 바인딩 된다. 메서드 내부의 this는 메서드를 소유한 객체가 아닌 메서드를 호출한 객체가 바인딩 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const person = {\n  name: \"Lee\",\n  getName() {\n    return this.name;\n  },\n};\n\nconsole.log(person.getName());</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const anotherPerson = {\n  name: \"Kim\",\n};\n\nanotherPerson.getName = person.getName;\n\nconsole.log(anotherPerson.getName()); // kim\n\nconst getName = person.getName;\nconsole.log(getName()); // 일반 함수로 호출된 getName 함수는  내부의 this.name은 window.name과 같다.</code></pre></div>\n<h3 id=\"2-3-생성자-함수-호출\" style=\"position:relative;\"><a href=\"#2-3-%EC%83%9D%EC%84%B1%EC%9E%90-%ED%95%A8%EC%88%98-%ED%98%B8%EC%B6%9C\" aria-label=\"2 3 생성자 함수 호출 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2-3. 생성자 함수 호출</h3>\n<p>생성자 함수 내부의 this에는 생성자 함수가 생성할 인스턴스가 바인딩된다.</p>\n<h3 id=\"2-4-functionprototypeapplycallbind\" style=\"position:relative;\"><a href=\"#2-4-functionprototypeapplycallbind\" aria-label=\"2 4 functionprototypeapplycallbind permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2-4. Function.prototype.apply/call/bind</h3>\n<p>apply,call,bind 메서드는 Function.prototype의 메서드다. 따라서 이 메서드들은 모든 함수가 상속받아 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function getThisBinding() {\n  return this;\n}\n\nconst thisArg = { a: 1 };\n\nconsole.log(getThisBinding()); // window\n\nconsole.log(getThisBinding.apply(thisArg)); // {a:1}\nconsole.log(getThisBinding.call(thisArg)); // {a:1}</code></pre></div>\n<p>apply와 call 메서드는 함수를 호출하는 것이다. apply와 call 메서드는 함수를 호출하면서 첫 번째 인수로 전달한 특정 객체를 호출한 함수의 this에 바인딩한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function getThisBinding() {\n  console.log(arguments);\n  return this;\n}\n\nconst thisArg = { a: 1 };\n\nconsole.log(getThisBinding());\n\nconsole.log(getThisBinding.apply(thisArg, [1, 2, 3]));\nconsole.log(getThisBinding.call(thisArg, 1, 2, 3));</code></pre></div>\n<p>apply 메서드는 호출할 함수의 인수를 배열로 묶어 전달한다. call 메서드는 호출할 함수의 인수를 쉼표로 구분한 리스트로 전달한다.</p>\n<p>Function.prototype.bind 메서드는 apply와 call 메서드와 달리 함수를 호출하지 않고 this로 사용할 객체만 전달한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function getThisBinding() {\n  return this;\n}\n\nconst thisArg = { a: 1 };\n\nconsole.log(getThisBinding.bind(thisArg));\nconsole.log(getThisBinding.bind(thisArg)()); // 명시적으로 호출</code></pre></div>","excerpt":"1. this 키워드 메서드는 프로퍼티를 참조하고 변경할 수 있어야 한다. 이 때 메서드가 자신이 속한 객체의 프로퍼티를 참조하려면 자신이 속한 객체를 가리키는 식별자를 참조할 수 있어야 한다. this는 자신이 속한 객체 또는 자신이 생성할 인스턴스를 가리키는 자기 참조 변수(self-referencing variable)다. this를 통해 자신이 속한 객체 또는 자신이 생성할 인스턴스의 프로퍼티나 메서드를 참조할 수 있다. this 바인딩 : 바인딩이랑 식별자와 값을 연결하는 과정을 의미한다. this 바인딩은 this가 가리킬 객체를 바인딩 한다. 객체 리터럴의 메서드 내부에서의 this는 메서드를 호출한 객체, 즉 circle을 가리킨다. 생성자 함수 내부의 this는 생성자 함수가 생성할 인스턴스를 가리킨다. this는 상황에 따라 가리키는 대상이 다르다. 자바스크립트의 this는 함수가 호출되는 방식에 따라 this 바인딩이 동적으로 결정된다. 또한 strict mod…","frontmatter":{"date":"December 13, 2021","title":"22.this","categories":"javascript","author":"sangzun","emoji":null},"fields":{"slug":"/자바스크립트/22. this 키워드/"}},"next":{"id":"928d6b58-2e9c-59c7-ae55-f8f2d66938ba","html":"<h1 id=\"1-자바스크립트-객체의-분류\" style=\"position:relative;\"><a href=\"#1-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EA%B0%9D%EC%B2%B4%EC%9D%98-%EB%B6%84%EB%A5%98\" aria-label=\"1 자바스크립트 객체의 분류 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 자바스크립트 객체의 분류</h1>\n<p>자바스크립트 객체는 크게 3개의 객체로 분류할 수 있다.</p>\n<ul>\n<li><em><strong>표준 빌트인 객체(standard built-in objects/native objects/global objects)</strong></em></li>\n</ul>\n<p>표준 빌트인 객체는 ECMAScript 사양에 정의된 객체를 말하며 자바스크립트 실행 환경과 관계없이 언제나 사용할수 있다. 별도의 선언 없이 전역 변수처럼 언제나 참조 할 수 있다.</p>\n<ul>\n<li>호스트 객체(host objects)</li>\n</ul>\n<p>호스트 객체는 ECMAScript 사양에 정의되어 있지 않지만 자바스크립트 실행 환경에서 추가로 제공하는 객체이다.</p>\n<ul>\n<li>사용자 정의 객체(user-defined objects)</li>\n</ul>\n<p>사용자 정의 객체는 사용자가 직접 정의한 객체이다.</p>\n<h1 id=\"2-표준-빌트인-객체\" style=\"position:relative;\"><a href=\"#2-%ED%91%9C%EC%A4%80-%EB%B9%8C%ED%8A%B8%EC%9D%B8-%EA%B0%9D%EC%B2%B4\" aria-label=\"2 표준 빌트인 객체 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 표준 빌트인 객체</h1>\n<p>자바스크립트는 Object, String, Number, Symbol, Date등 40여개의 표준 빌트인 객체를 제공한다.</p>\n<p>Math, Reflect, JSON을제외한 표준 빌트인객체는 모두 인서턴스를 생성할수 있는 생성자 함수 객체다.</p>\n<p><em><strong>생성자 함수 객체인 표준 빌트인 객체는 프로토타입 메서드와 정적 메서드를 제공하고 생성자 함수 객체가 아닌 표준 빌트인 객체는 정적 메서드만 제공한다.</strong></em></p>\n<h1 id=\"3-원시값과-래퍼-객체\" style=\"position:relative;\"><a href=\"#3-%EC%9B%90%EC%8B%9C%EA%B0%92%EA%B3%BC-%EB%9E%98%ED%8D%BC-%EA%B0%9D%EC%B2%B4\" aria-label=\"3 원시값과 래퍼 객체 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 원시값과 래퍼 객체</h1>\n<p>원시값은 객체가 아니므로 프로퍼티나 메서드를 가질 수 없지만 원시값인 문자열은 객처럼 동작한다. 이것은 원시값인 문자열, 숫자, 불리언 값의 경우 원시값에 대해 마침표 표기법으로 접근하면 자바스크립트 엔진이 일시적으로 원시값을 연관된 객체로 변환해주기 때문이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const str = \"hello\";\n\nconsole.log(str.length) // 5\n\nconsole.log(typeof str); // string</code></pre></div>\n<p>원시값을 객체처럼 사용하면 자바스크립트 엔진은 암묵적으로 연관된 객체를 생성하여 생성된 객체로 프로퍼티에 접근하거나 메서드를 호출하고 다시 원시값으로 되돌린다.</p>\n<p>이 때 생성되는 객체를 <em><strong>래퍼 객체(wrapper object)라 한다.</strong></em></p>\n<p>아래의 그림은 <strong>문자열 래퍼 객체의 프로토타입 체인</strong>을 나태난 그림이다.</p>\n<p><img src=\"/wrapper.jpg\" alt=\"wrapper\"></p>\n<h1 id=\"4-전역-객체\" style=\"position:relative;\"><a href=\"#4-%EC%A0%84%EC%97%AD-%EA%B0%9D%EC%B2%B4\" aria-label=\"4 전역 객체 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 전역 객체</h1>\n<p>전역 객체는 코드가 실행되기 이전에 가장 먼저 생성되는 객체이며, 어떤 객체에도 속하지 않는 최상위 객체이다.</p>\n<ul>\n<li>전역객체는 개발자가 의도적으로 생성할 수 없다. 즉 생성자 함수가 제공되지 않는다.</li>\n<li>전역객체의 프로퍼티를 참조할때 window(또는 global)를 생략할 수 있다.</li>\n</ul>\n<h3 id=\"4-1-빌트인-전역-프로퍼티\" style=\"position:relative;\"><a href=\"#4-1-%EB%B9%8C%ED%8A%B8%EC%9D%B8-%EC%A0%84%EC%97%AD-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0\" aria-label=\"4 1 빌트인 전역 프로퍼티 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4-1. 빌트인 전역 프로퍼티</h3>\n<p>빌트인 전역 프로퍼티는 전역 객체의 프로퍼티를 의미한다.</p>\n<ul>\n<li>Infinity</li>\n<li>NaN</li>\n<li>undefined</li>\n</ul>\n<h3 id=\"4-2-빌트인-전역-함수\" style=\"position:relative;\"><a href=\"#4-2-%EB%B9%8C%ED%8A%B8%EC%9D%B8-%EC%A0%84%EC%97%AD-%ED%95%A8%EC%88%98\" aria-label=\"4 2 빌트인 전역 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4-2. 빌트인 전역 함수</h3>\n<p>빌트인 전역 함수는 애플리케이션 전역에서 호출할 수 있는 빌트인 함수로 전역 객체의 메서드다.</p>\n<ul>\n<li>eval : eval 함수는 자바스크립트 코드를 나타내는 문자열을 인수로 전달 받는다. 문자열 코드가 여러개의 문으로 이루어져 있다면 모든 문을 실행한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">eval('1+2;') //3\n\neval('var x = 5;') // undefined</code></pre></div>\n<p><em><strong>eval 함수를 통해 실행되는 코드는 자바스크립트 엔진에 의해 최적화가 수행되지 않으므로 일반적인 코드에 비해 처리 속도가 느리다 따라서 eval 함수의 사용은 금지.</strong></em></p>\n<ul>\n<li>inFinite : 전달받은 인수가 유한수라면 true, 무한수라면 false</li>\n<li>isNaN : 전달받은 인수가 NaN이면 ture 아니라면 false</li>\n<li>parseFloat : 전달받은 문자열 인수를 실수로 해석하여 반환</li>\n<li>parseInt : 전달받은 문자열 인수를 정수로 해석하여 반환</li>\n<li>endcodeURI / decodeURI</li>\n</ul>\n<p>URI는 인터넷이 있는 자원을 나타내는 주소이다. URI의 하위개념으로 URL, URN이 있다.</p>\n<p>encodeURI는 URI를 문자열로 전달받아 인코딩한다. decodeURI는 인코딩된 URI를 인수로 전달받아 디코딩한다.</p>\n<p><em><strong>인코딩이란 URI문자들을 ASCII 문자 셋으로 변환하는 것을 뜻한다.</strong></em></p>\n<h3 id=\"4-3-암묵적-전역\" style=\"position:relative;\"><a href=\"#4-3-%EC%95%94%EB%AC%B5%EC%A0%81-%EC%A0%84%EC%97%AD\" aria-label=\"4 3 암묵적 전역 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4-3. 암묵적 전역</h3>\n<p>암묵적 전역이란 전역 객체의 프로퍼티가 되어 마치 전역변수처럼 동작하는것을 말한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">console.log(y); // y is not defined\n\nfunction foo() {\n  y = 20;\n}\nfoo();\n\nconsole.log(y) // 20</code></pre></div>\n<p>y는 변수 선언 없이 단지 전역 객체의 프로퍼티 추가되었을 뿐이다. y는 변수가 아니다 그러므로 변수 호이스팅도 발생하지 않는다.</p>\n<p>프로퍼티인 y는 delete 연산자로 삭제할 수 있다. 전역변수는 delete로 삭제할 수 없다.</p>","frontmatter":{"date":"December 11, 2021","title":"21. 빌트인 객체","categories":"javascript","author":"sangzun","emoji":null},"fields":{"slug":"/자바스크립트/21.빌트인 객체/"}},"prev":{"id":"ee3c4328-e002-5a71-97be-799c95b72291","html":"<p>실행컨택스트(execution context) 자바스크립트의 원리를 담고 있는 핵심 개념이다.</p>\n<h1 id=\"1-소스코드의타입\" style=\"position:relative;\"><a href=\"#1-%EC%86%8C%EC%8A%A4%EC%BD%94%EB%93%9C%EC%9D%98%ED%83%80%EC%9E%85\" aria-label=\"1 소스코드의타입 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 소스코드의타입</h1>\n<p>실행컨텍스트는 다음과 같은 것들을 이용하면 execution context stack에 쌓이게된다.</p>\n<p><img src=\"/executionstack.png\" alt=\"executionstack\"></p>\n<ul>\n<li>전역코드</li>\n<li>함수코드</li>\n<li>eval 코드</li>\n<li>모듈 코드</li>\n</ul>\n<h1 id=\"2-렉시컬-환경\" style=\"position:relative;\"><a href=\"#2-%EB%A0%89%EC%8B%9C%EC%BB%AC-%ED%99%98%EA%B2%BD\" aria-label=\"2 렉시컬 환경 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 렉시컬 환경</h1>\n<p>렉시컬 환경(Lexical Environment)은 식별자와 식별자에 바인딩된 값, 상위스코프에 대한 참조를 기록하는 자료구조이다.</p>\n<p>Lexical environmet는 EnvirenmetRecore와 OuterLexicalEnvironmentReference로 구성된다</p>\n<p><em><strong>환경레코드(Environment Recode)</strong></em> : 스코프에 포함된 식별자를 등록하고 등록된 식별자에 바인딩된 값을 관리하는 저장소</p>\n<p><em><strong>외부 렉시컬 환경에 대한 참조(OuterLexicalEnvironmentReference)</strong></em>: 외부 렉시컬 환경에 대한 참조는 상위 스코프를 가리킨다.</p>\n<p><img src=\"/executioncontext.jpg\" alt=\"executioncontext\"></p>\n<h3 id=\"2-1-environment-recode\" style=\"position:relative;\"><a href=\"#2-1-environment-recode\" aria-label=\"2 1 environment recode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2-1. Environment Recode</h3>\n<p>***(Environment Recode)***에는 객체 환경 레코드(Object Environment Record)와 선언적 환경 레코드(Declarative Environment Record)로 구성되어 있다.</p>\n<p>Object Environment Record에는 var로 선언된 전역변수 전역함수, 빌트인 전역 프로퍼티와 전역함수,객체를 관리하고 Declarative Environment Record는 let, const 키워드로 선언한 전역 변수를 관리한다.</p>\n<p>전역 코드 평가 과정에서 var로 선언한 전역 변수와 함수 선언문으로 정의된 전역 함수는 Object Environment Record에 연결된 BindingObject를 통해 전역 객체의 프로퍼티와 메서드가 된다.</p>\n<p>![ObjectEnvironmentRecord](/Object Environment Record.jpg)</p>\n<p>따러서 var 키워드로 선언한 변수는 코드 실행 단계에서 변수 선언문 이전에도 참조할 수 있다.</p>\n<p>let,const 키워드로 선언한 전역 변수는 전역 객체의 프로퍼티가 되지 않기 때문에 전역 객체의 프로퍼티로서 참조할 수 없다. 따라서 런타임에 실행 흐름이 변수 선언문에 도달하기 전까지 <em><strong>TDZ</strong></em>에 빠지게 된다.</p>\n<p>Global Environmnet Record에 [[GlobalThisValue]] 내부 슬롯에 this가 바인딩된다.</p>\n<h3 id=\"2-2outerlexicalenvironmentreference\" style=\"position:relative;\"><a href=\"#2-2outerlexicalenvironmentreference\" aria-label=\"2 2outerlexicalenvironmentreference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2-2.OuterLexicalEnvironmentReference</h3>\n<p>Outer LexicalEnvironment Reference는 현재 평가중인 소스코드를 포함하는 외부 소스코드의 상위 스코프를 가리킨다.</p>\n<h1 id=\"3-요약\" style=\"position:relative;\"><a href=\"#3-%EC%9A%94%EC%95%BD\" aria-label=\"3 요약 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 요약</h1>\n<ol>\n<li>\n<p>자바스크립트 엔진이 코드를 실행시킬때 Execution Context라는 실행 가능한 환경을 만들고 Execution Context를 기준으로 코드를 실행한다.</p>\n</li>\n<li>\n<p>전역에서 생성되는 global execution context와 함수 실행 코드를 만나면 생성되는 function execution context가 있다.</p>\n</li>\n<li>\n<p>생성단계일 때 Lexical Environmet를 생성한다. 이때 Lexical Environemt에는 스코프의 변수와 함수를 선언한다.</p>\n</li>\n<li>\n<p>실행단계일 때 스크립트를 읽으며 생성한 Lexical Environemt에 할당 및 코드를 실행한다.</p>\n</li>\n<li>\n<p>Execution statck이 빌 때 까지 위의 동작을 반복한다.</p>\n</li>\n</ol>","frontmatter":{"date":"December 14, 2021","title":"23.실행 컨텍스트","categories":"javascript","author":"sangzun","emoji":null},"fields":{"slug":"/자바스크립트/23.실행컨텍스트/"}},"site":{"siteMetadata":{"siteUrl":"https://github.com/sangzun-han","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/자바스크립트/22. this 키워드/","nextSlug":"/자바스크립트/21.빌트인 객체/","prevSlug":"/자바스크립트/23.실행컨텍스트/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}