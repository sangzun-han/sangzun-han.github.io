{"componentChunkName":"component---src-templates-blog-template-js","path":"/자바스크립트/23.실행컨텍스트/","result":{"data":{"cur":{"id":"70d6fb80-bd6f-59d1-860e-a761f03c53ab","html":"<p>실행컨택스트(execution context) 자바스크립트의 원리를 담고 있는 핵심 개념이다.</p>\n<h1 id=\"1-소스코드의타입\" style=\"position:relative;\"><a href=\"#1-%EC%86%8C%EC%8A%A4%EC%BD%94%EB%93%9C%EC%9D%98%ED%83%80%EC%9E%85\" aria-label=\"1 소스코드의타입 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 소스코드의타입</h1>\n<p>실행컨텍스트는 다음과 같은 것들을 이용하면 execution context stack에 쌓이게된다.</p>\n<p><img src=\"/executionstack.png\" alt=\"executionstack\"></p>\n<ul>\n<li>전역코드</li>\n<li>함수코드</li>\n<li>eval 코드</li>\n<li>모듈 코드</li>\n</ul>\n<h1 id=\"2-렉시컬-환경\" style=\"position:relative;\"><a href=\"#2-%EB%A0%89%EC%8B%9C%EC%BB%AC-%ED%99%98%EA%B2%BD\" aria-label=\"2 렉시컬 환경 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 렉시컬 환경</h1>\n<p>렉시컬 환경(Lexical Environment)은 식별자와 식별자에 바인딩된 값, 상위스코프에 대한 참조를 기록하는 자료구조이다.</p>\n<p>Lexical environmet는 EnvirenmetRecore와 OuterLexicalEnvironmentReference로 구성된다</p>\n<p><strong><em>환경레코드(Environment Recode)</em></strong> : 스코프에 포함된 식별자를 등록하고 등록된 식별자에 바인딩된 값을 관리하는 저장소</p>\n<p><strong><em>외부 렉시컬 환경에 대한 참조(OuterLexicalEnvironmentReference)</em></strong>: 외부 렉시컬 환경에 대한 참조는 상위 스코프를 가리킨다.</p>\n<p><img src=\"/executioncontext.jpg\" alt=\"executioncontext\"></p>\n<h3 id=\"2-1-environment-recode\" style=\"position:relative;\"><a href=\"#2-1-environment-recode\" aria-label=\"2 1 environment recode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2-1. Environment Recode</h3>\n<p><strong><em>(Environment Recode)</em></strong>에는 객체 환경 레코드(Object Environment Record)와 선언적 환경 레코드(Declarative Environment Record)로 구성되어 있다.</p>\n<p>Object Environment Record에는 var로 선언된 전역변수 전역함수, 빌트인 전역 프로퍼티와 전역함수,객체를 관리하고 Declarative Environment Record는 let, const 키워드로 선언한 전역 변수를 관리한다.</p>\n<p>전역 코드 평가 과정에서 var로 선언한 전역 변수와 함수 선언문으로 정의된 전역 함수는 Object Environment Record에 연결된 BindingObject를 통해 전역 객체의 프로퍼티와 메서드가 된다.</p>\n<p><img src=\"/Object%20Environment%20Record.jpg\" alt=\"ObjectEnvironmentRecord\"></p>\n<p>따러서 var 키워드로 선언한 변수는 코드 실행 단계에서 변수 선언문 이전에도 참조할 수 있다.</p>\n<p>let,const 키워드로 선언한 전역 변수는 전역 객체의 프로퍼티가 되지 않기 때문에 전역 객체의 프로퍼티로서 참조할 수 없다. 따라서 런타임에 실행 흐름이 변수 선언문에 도달하기 전까지 <strong><em>TDZ</em></strong>에 빠지게 된다.</p>\n<p>Global Environmnet Record에 [[GlobalThisValue]] 내부 슬롯에 this가 바인딩된다.</p>\n<h3 id=\"2-2outerlexicalenvironmentreference\" style=\"position:relative;\"><a href=\"#2-2outerlexicalenvironmentreference\" aria-label=\"2 2outerlexicalenvironmentreference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2-2.OuterLexicalEnvironmentReference</h3>\n<p>Outer LexicalEnvironment Reference는 현재 평가중인 소스코드를 포함하는 외부 소스코드의 상위 스코프를 가리킨다.</p>\n<h1 id=\"3-요약\" style=\"position:relative;\"><a href=\"#3-%EC%9A%94%EC%95%BD\" aria-label=\"3 요약 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 요약</h1>\n<ol>\n<li>자바스크립트 엔진이 코드를 실행시킬때 Execution Context라는 실행 가능한 환경을 만들고 Execution Context를 기준으로 코드를 실행한다.</li>\n<li>전역에서 생성되는 global execution context와 함수 실행 코드를 만나면 생성되는 function execution context가 있다.</li>\n<li>생성단계일 때 Lexical Environmet를 생성한다. 이때 Lexical Environemt에는 스코프의 변수와 함수를 선언한다.</li>\n<li>실행단계일 때 스크립트를 읽으며 생성한 Lexical Environemt에 할당 및 코드를 실행한다.</li>\n<li>Execution statck이 빌 때 까지 위의 동작을 반복한다.</li>\n</ol>","excerpt":"실행컨택스트(execution context) 자바스크립트의 원리를 담고 있는 핵심 개념이다. 1. 소스코드의타입 실행컨텍스트는 다음과 같은 것들을 이용하면 execution context stack에 쌓이게된다. executionstack 전역코드 함수코드 eval 코드 모듈 코드 2. 렉시컬 환경 렉시컬 환경(Lexical Environment)은 식별자와 식별자에 바인딩된 값, 상위스코프에 대한 참조를 기록하는 자료구조이다. Lexical environmet는 EnvirenmetRecore와 OuterLexicalEnvironmentReference로 구성된다 환경레코드(Environment Recode) : 스코프에 포함된 식별자를 등록하고 등록된 식별자에 바인딩된 값을 관리하는 저장소 외부 렉시컬 환경에 대한 참조(OuterLexicalEnvironmentReference): 외부 렉시컬 환경에 대한 참조는 상위 스코프를 가리킨다. executioncontext 2-1. …","frontmatter":{"date":"December 14, 2021","title":"23.실행 컨텍스트","categories":"javascript","author":"sangzun","emoji":null},"fields":{"slug":"/자바스크립트/23.실행컨텍스트/"}},"next":{"id":"e31ef671-3590-5adb-b910-684a6e5cfe27","html":"<h1 id=\"1-this-키워드\" style=\"position:relative;\"><a href=\"#1-this-%ED%82%A4%EC%9B%8C%EB%93%9C\" aria-label=\"1 this 키워드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. this 키워드</h1>\n<p>메서드는 프로퍼티를 참조하고 변경할 수 있어야 한다. 이 때 메서드가 자신이 속한 객체의 프로퍼티를 참조하려면 자신이 속한 객체를 가리키는 식별자를 참조할 수 있어야 한다.</p>\n<p><strong><em>this는 자신이 속한 객체 또는 자신이 생성할 인스턴스를 가리키는 자기 참조 변수(self-referencing variable)다. this를 통해 자신이 속한 객체 또는 자신이 생성할 인스턴스의 프로퍼티나 메서드를 참조할 수 있다.</em></strong></p>\n<ul>\n<li>this 바인딩 : 바인딩이랑 식별자와 값을 연결하는 과정을 의미한다. this 바인딩은 this가 가리킬 객체를 바인딩 한다. </li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// 생성자 함수\nfunction Circle(radius) {\n  this.radius = radius;\n}\n\nCircle.prototype.getDiameter = function () {\n  return 2 * this.radius;\n};\n\n// 인스턴스 생성\nconst circle = new Circle(15);\nconsole.log(circle.getDiameter()); // 30</code></pre></div>\n<p>객체 리터럴의 메서드 내부에서의 this는 메서드를 호출한 객체, 즉 circle을 가리킨다. </p>\n<p>생성자 함수 내부의 this는 생성자 함수가 생성할 인스턴스를 가리킨다. this는 상황에 따라 가리키는 대상이 다르다.</p>\n<p>자바스크립트의 this는 함수가 호출되는 방식에 따라 this 바인딩이 동적으로 결정된다. 또한 strict mode는 this 바인딩에 영향을 준다.</p>\n<h1 id=\"2-함수-호출-방식과-this-바인딩\" style=\"position:relative;\"><a href=\"#2-%ED%95%A8%EC%88%98-%ED%98%B8%EC%B6%9C-%EB%B0%A9%EC%8B%9D%EA%B3%BC-this-%EB%B0%94%EC%9D%B8%EB%94%A9\" aria-label=\"2 함수 호출 방식과 this 바인딩 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 함수 호출 방식과 this 바인딩</h1>\n<h3 id=\"2-1-일반-함수-호출\" style=\"position:relative;\"><a href=\"#2-1-%EC%9D%BC%EB%B0%98-%ED%95%A8%EC%88%98-%ED%98%B8%EC%B6%9C\" aria-label=\"2 1 일반 함수 호출 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2-1. 일반 함수 호출</h3>\n<p>기본적으로 this에는 전역 객체가 바인딩된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function foo() {\n\tconsole.log(this) // undefined\n\tfunction bar() {\n\t\tconsole.log(this) // undefined\n\t}\n\tbar()\n}\nfoo()</code></pre></div>\n<p>중첩함수를 일반 함수로 호출하면 함수 내부의 this에는 전역객체가 바인됭된다. strict mode가 적용된 일반 함수 내부에는 undefined가 바인딩된다.</p>\n<p><strong><em>메서드 내부의 중첩함수나 콜백함수의 this 바인딩을 메서드의 this 바인딩과 일치시키는 방법</em></strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const obj = {\n  value: 100,\n  foo() {\n    const that = this;\n\n    setTimeout(function () {\n      console.log(that.value);\n    }, 1000);\n  },\n};\n\nobj.foo();</code></pre></div>\n<h3 id=\"2-2-메서드-호출\" style=\"position:relative;\"><a href=\"#2-2-%EB%A9%94%EC%84%9C%EB%93%9C-%ED%98%B8%EC%B6%9C\" aria-label=\"2 2 메서드 호출 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2-2. 메서드 호출</h3>\n<p>메서드 내부의 this에는 메서드를 호출한 객체가 바인딩 된다. 메서드 내부의 this는 메서드를 소유한 객체가 아닌 메서드를 호출한 객체가 바인딩 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const person = {\n  name: \"Lee\",\n  getName() {\n    return this.name;\n  },\n};\n\nconsole.log(person.getName());</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const anotherPerson = {\n  name: \"Kim\",\n};\n\nanotherPerson.getName = person.getName;\n\nconsole.log(anotherPerson.getName()); // kim\n\nconst getName = person.getName;\nconsole.log(getName()); // 일반 함수로 호출된 getName 함수는  내부의 this.name은 window.name과 같다.</code></pre></div>\n<h3 id=\"2-3-생성자-함수-호출\" style=\"position:relative;\"><a href=\"#2-3-%EC%83%9D%EC%84%B1%EC%9E%90-%ED%95%A8%EC%88%98-%ED%98%B8%EC%B6%9C\" aria-label=\"2 3 생성자 함수 호출 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2-3. 생성자 함수 호출</h3>\n<p>생성자 함수 내부의 this에는 생성자 함수가 생성할 인스턴스가 바인딩된다.</p>\n<h3 id=\"2-4-functionprototypeapplycallbind\" style=\"position:relative;\"><a href=\"#2-4-functionprototypeapplycallbind\" aria-label=\"2 4 functionprototypeapplycallbind permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2-4. Function.prototype.apply/call/bind</h3>\n<p>apply,call,bind 메서드는 Function.prototype의 메서드다. 따라서 이 메서드들은 모든 함수가 상속받아 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function getThisBinding() {\n  return this;\n}\n\nconst thisArg = { a: 1 };\n\nconsole.log(getThisBinding()); // window\n\nconsole.log(getThisBinding.apply(thisArg)); // {a:1}\nconsole.log(getThisBinding.call(thisArg)); // {a:1}</code></pre></div>\n<p>apply와 call 메서드는 함수를 호출하는 것이다. apply와 call 메서드는 함수를 호출하면서 첫 번째 인수로 전달한 특정 객체를 호출한 함수의 this에 바인딩한다. </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function getThisBinding() {\n  console.log(arguments);\n  return this;\n}\n\nconst thisArg = { a: 1 };\n\nconsole.log(getThisBinding());\n\nconsole.log(getThisBinding.apply(thisArg, [1, 2, 3]));\nconsole.log(getThisBinding.call(thisArg, 1, 2, 3));</code></pre></div>\n<p>apply 메서드는 호출할 함수의 인수를 배열로 묶어 전달한다. call 메서드는 호출할 함수의 인수를 쉼표로 구분한 리스트로 전달한다.</p>\n<p>Function.prototype.bind 메서드는 apply와 call 메서드와 달리 함수를 호출하지 않고 this로 사용할 객체만 전달한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function getThisBinding() {\n  return this;\n}\n\nconst thisArg = { a: 1 };\n\nconsole.log(getThisBinding.bind(thisArg));\nconsole.log(getThisBinding.bind(thisArg)()); // 명시적으로 호출</code></pre></div>","frontmatter":{"date":"December 13, 2021","title":"22.this","categories":"javascript","author":"sangzun","emoji":null},"fields":{"slug":"/자바스크립트/22. this 키워드/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://github.com/sangzun-han","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/자바스크립트/23.실행컨텍스트/","nextSlug":"/자바스크립트/22. this 키워드/","prevSlug":""}},"staticQueryHashes":["1073350324","2938748437"]}