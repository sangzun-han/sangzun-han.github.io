{"componentChunkName":"component---src-templates-blog-template-js","path":"/자바스크립트/26.ES6 함수의 추가 기능/","result":{"data":{"cur":{"id":"209945ee-90b6-5619-b734-cde95f60a792","html":"<p>ES6 이전의 함수는 사용 목적에 따라 명확히 구분되지 않는다. 즉 ES6 이전의 모든 함수는 일반 함수로서 호출할 수 있는 것은 물론 생성자 함수로서 호출할 수 있다. ES6이전의 모든 함수는 callable이면서 constructor이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var obj = {\n  x:10,\n  f: fucntion() { return this.x }\n}\nconsole.log(obj.f()); // 10\n\nvar bar = obj.f;\nconsole.log(bar()); //undefined\ncosole.log(new obj.f()); // f{}</code></pre></div>\n<p>객체에 바인딩된 함수를 생성자 함수로 호출하는 경우가 흔치는 않지만 문법상 가능하다. 그리고 이는 성능면에서 문제가 있다.</p>\n<p>객체에 바인딩된 함수가 constructor라는것은 prototype 프로퍼티를 가지며 프로토타입 객체를 생성한다는 것을 의미한다. 따라서 불필요한 프로타티입 객체를 생성한다.</p>\n<table>\n<thead>\n<tr>\n<th>ES6 함수의 구분</th>\n<th align=\"center\">constructor</th>\n<th align=\"center\">prototype</th>\n<th align=\"center\">super</th>\n<th align=\"center\">arguments</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>일반함수</td>\n<td align=\"center\">O</td>\n<td align=\"center\">O</td>\n<td align=\"center\">X</td>\n<td align=\"center\">O</td>\n</tr>\n<tr>\n<td>메서드</td>\n<td align=\"center\">X</td>\n<td align=\"center\">X</td>\n<td align=\"center\">O</td>\n<td align=\"center\">O</td>\n</tr>\n<tr>\n<td>화살표함수</td>\n<td align=\"center\">X</td>\n<td align=\"center\">X</td>\n<td align=\"center\">X</td>\n<td align=\"center\">X</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"1-메서드\" style=\"position:relative;\"><a href=\"#1-%EB%A9%94%EC%84%9C%EB%93%9C\" aria-label=\"1 메서드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 메서드</h1>\n<p>ES6 이전에는 메서드에 대한 명확한 정의가 없었다. 일반적으로 메서드는 객체에 바인딩 된 함수를 가리켰다.\nES6에서는 메서드에 대한 정의를 <em><strong>메서드 축약 표현으로 정의된 함수만을 의미한다.</strong></em></p>\n<p>ES6에서 정의한 메서드는 <em><strong>인스턴스를 생성할 수 없는 non-constructor</strong></em>이다.</p>\n<p><em><strong>ES6 메서드는 자신을 바인딩한 객체를 가리키는 내부 슬롯[[HomeObject]]를 갖는다.</strong></em> super 참조는 내부 슬롯 [[HomeObject]]를 사용하여 수퍼클래스의 메서드를 참조한다.</p>\n<h1 id=\"2-화살표-함수\" style=\"position:relative;\"><a href=\"#2-%ED%99%94%EC%82%B4%ED%91%9C-%ED%95%A8%EC%88%98\" aria-label=\"2 화살표 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 화살표 함수</h1>\n<p>화살표 함수(arrow function)은 function 키워드 대신 화살표를 사용하여 기존의 함수 정의 방식보다 간략하게 함수를 정의할 수 있다.</p>\n<p>화살표 함수는 표현만 간략한것이 아니라 내부 동작도 기존의 함수보다 간략하다.</p>\n<h3 id=\"2-1-화살표-함수-정의\" style=\"position:relative;\"><a href=\"#2-1-%ED%99%94%EC%82%B4%ED%91%9C-%ED%95%A8%EC%88%98-%EC%A0%95%EC%9D%98\" aria-label=\"2 1 화살표 함수 정의 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2-1. 화살표 함수 정의</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const multiply = (x,y) => x * y;\nmultiply(2,3) // 6</code></pre></div>\n<ul>\n<li>매개변수가 여러개 인 경우 () 안에 매개변수를 선언한다.</li>\n<li>매개변수가 한개인 경우 () 생략 가능하다.</li>\n<li>매개변수가 없는 경우 () 생략 불가능하다.</li>\n<li>함수의 몸체가 하나의 문으로 구성된다면 {}를 생략할 수 있다.</li>\n<li>{} 생략됐다면 함수 몸체 내부의 문이 표현식이 아니라면 에러가 발생한다. 표현식이 아니라면 반환할 수 없기 때문이다.</li>\n<li>객체 리터럴을 반환하는 경우 ()로 감싸주어야 한다.</li>\n<li>화살표 함수도 즉시 실행 함수로 사용할 수 있다.</li>\n</ul>\n<h3 id=\"2-2-화살표-함수-vs-일반함수\" style=\"position:relative;\"><a href=\"#2-2-%ED%99%94%EC%82%B4%ED%91%9C-%ED%95%A8%EC%88%98-vs-%EC%9D%BC%EB%B0%98%ED%95%A8%EC%88%98\" aria-label=\"2 2 화살표 함수 vs 일반함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2-2. 화살표 함수 vs 일반함수</h3>\n<ul>\n<li>화살표 함수는 인스턴스를 생성할 수 없으므로 prototype 프로퍼티가 없고 prototype도 생성하지 않는다.</li>\n<li>중복된 매개변수 이름을 선언할 수 없다.</li>\n<li>화살표 함수는 함수 자체의 this,arguments,super,new.target 바인딩을 갖지 않는다.</li>\n</ul>\n<h3 id=\"2-3-this\" style=\"position:relative;\"><a href=\"#2-3-this\" aria-label=\"2 3 this permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2-3. this</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class Prefixer {\n  constructor(prefix) {\n    this.prefix = prefix;\n  }\n\n  add(arr){\n    return arr.map(item => this.prefix + item)\n  }\n}\n\nconst prefixer = new Prefixer('-webkit-');\nconsole.log(prefixer.add(['transition', 'user-select']));\n\n// ['-webkit-transition', '-webkit-user-select']</code></pre></div>\n<p><em><strong>화살표 함수는 함수 자체의 this 바인딩을 갖지 않는다. 따라서 화살표 함수 내부에서 this를 참조하면 상위스코프의 this를 그대로 참조한다.</strong></em></p>\n<p>화살표 함수는 this 바인딩을 갖지 않기 때문에 Function.prototype.call ,Function.prototype.apply, Function.prototype.bind 메서드를 사용해도 화살표 함수 내부의 this를 교체할 수 없다.</p>\n<p>메서드를 화살표 함수로 정의하는것은 피해야 한다. 메서드를 정의 할 때는 ES6메서드 축약표현으로 정의한 ES6 메서드를 사용하는것이 좋다.</p>\n<p>프로퍼티를 동적으로 추가할때는 ES6 메서드 정의를 사용할 수 없으므로 일반 함수를 할당한다.</p>\n<h3 id=\"2-4-super\" style=\"position:relative;\"><a href=\"#2-4-super\" aria-label=\"2 4 super permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2-4. super</h3>\n<p>화살표 함수는 함수 자체의 super 바인딩을 갖지 않는다. 따라서 화살표 함수 내부에서 super를 참조하면 this와 마찬가지로 상위 스코프의 super를 참조한다.</p>\n<h3 id=\"2-5-arguments\" style=\"position:relative;\"><a href=\"#2-5-arguments\" aria-label=\"2 5 arguments permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2-5. arguments</h3>\n<p>화살표 함수는 함수 자체의 arguments 바인딩을 갖지 않는다 따라서 화살표 함수 내부에서 arguments를 참조하면 상위 스코프의 arguments를 참조한다.</p>\n<h1 id=\"3-rest-파라미터\" style=\"position:relative;\"><a href=\"#3-rest-%ED%8C%8C%EB%9D%BC%EB%AF%B8%ED%84%B0\" aria-label=\"3 rest 파라미터 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Rest 파라미터</h1>\n<p>Rest 파라미터는 매개변수 이름앞에 …을 붙여서 정의한 매개변수를 의미한다. Rest 파라미터는 함수에 전달된 인수들의 목록을 배열로 전달받는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function foo(...rest) {\n  console.log(rest); // [1,2,3,4,5]\n}\n\nfoo(1,2,3,4,5)</code></pre></div>\n<p>일반 매개변수와 Rest 파라미터는 함께 사용할 수 있다. 이 때 함수에 전달된 인수들은 매개벼눗와 Rest 파라미터에 순차적으로 할당된다. —> Rest 파라미터는 반드시 마지막 파라미터여야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">fucntion foo(param, ...rest) {\n  console.log(param); // 1\n  console.log(test); // [2,3,4,5]\n}\n\nfoo(1,2,3,4,5);</code></pre></div>\n<ul>\n<li>Rest 파라미터는 단 하나만 선언할 수 있다.</li>\n<li>Rest 파라미터는 함수 정의 시 선언한 매개변수 개수를 나타내는 함수 객체의 length 프로퍼티에 영향을 주지 않는다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function foo(...rest) {} // 0\nconsole.log(foo.length)</code></pre></div>\n<h1 id=\"4-매개변수-기본값\" style=\"position:relative;\"><a href=\"#4-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98-%EA%B8%B0%EB%B3%B8%EA%B0%92\" aria-label=\"4 매개변수 기본값 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 매개변수 기본값</h1>\n<p>인수가 전달되지 않는 매개변수의 값은 undefined이다. 이는 의도치 않은 문제를 발생 시킬 수 있다.</p>\n<p>ES6에서 도입된 매개변수 기본값을 사용하면 함수 내에서 수행하던 인수 체크 및 초기화를 간소화 할 수 있다.</p>\n<p>매개변수 기본값은 함수 정의시 선언한 매개변수 개수를 나타내는 함수 객체의 length 프로퍼티와 arguments 객체에 아무런 영향을 주지 않는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function sum(x = 0, y = 0) {\n  return x + y;\n}\n\nconsole.log(sum(1)); // 1</code></pre></div>\n<p>Rest 파라미터에는 기본값을 지정할 수 없다.</p>","excerpt":"ES6 이전의 함수는 사용 목적에 따라 명확히 구분되지 않는다. 즉 ES6 이전의 모든 함수는 일반 함수로서 호출할 수 있는 것은 물론 생성자 함수로서 호출할 수 있다. ES6이전의 모든 함수는 callable이면서 constructor이다. 객체에 바인딩된 함수를 생성자 함수로 호출하는 경우가 흔치는 않지만 문법상 가능하다. 그리고 이는 성능면에서 문제가 있다. 객체에 바인딩된 함수가 constructor라는것은 prototype 프로퍼티를 가지며 프로토타입 객체를 생성한다는 것을 의미한다. 따라서 불필요한 프로타티입 객체를 생성한다. ES6 함수의 구분 constructor prototype super arguments 일반함수 O O X O 메서드 X X O O 화살표함수 X X X X 1. 메서드 ES6 이전에는 메서드에 대한 명확한 정의가 없었다. 일반적으로 메서드는 객체에 바인딩 된 함수를 가리켰다.\nES6에서는 메서드에 대한 정의를 메서드 축약 표현으로 정의된 함수만을…","frontmatter":{"date":"December 20, 2021","title":"26. ES6 함수의 추가 기능","categories":"javascript","author":"sangzun","emoji":null},"fields":{"slug":"/자바스크립트/26.ES6 함수의 추가 기능/"}},"next":{"id":"0bf39bea-a0b2-595d-9dcc-c5aadf7ad769","html":"<h1 id=\"1-클래스\" style=\"position:relative;\"><a href=\"#1-%ED%81%B4%EB%9E%98%EC%8A%A4\" aria-label=\"1 클래스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 클래스</h1>\n<p>자바스크립트에서 클래스는 생성자 함수와 유사하게 동작하지만 몇 가지 차이가 있다.</p>\n<ul>\n<li>클래스를 new 연산자 없이 호출하면 에러가 발생한다.</li>\n<li>클래스는 상속을 지원하는 extends와 super 키워드를 제공한다.</li>\n<li>클래스는 호이스팅이 발생하지 않는 것처럼 동작한다.</li>\n<li>클래스 내의 모든 코드는 암묵적으로 strict mode가 살행된다.</li>\n<li>클래스는 열거되지 않는다.</li>\n</ul>\n<h1 id=\"2-프로퍼티\" style=\"position:relative;\"><a href=\"#2-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0\" aria-label=\"2 프로퍼티 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 프로퍼티</h1>\n<ol>\n<li>인스턴스 프로퍼티 : constructor 내부에서 정의해야 한다.</li>\n<li>접근자 프로퍼티: 자체적으로 값을 갖지 않고 다른 데이터 프로퍼티 값을 읽거나 저장할 때 사용하는 접근자 함수로 구성된 프로퍼티</li>\n<li>클래스 필드 : 클래스 기반의 객체 지향 언어에서 클래스가 생성할 인스턴스의 프로퍼티</li>\n<li>private : private 필드의 앞에는 #을 붙여주고 참조할 때도 붙여준다.</li>\n</ol>\n<h1 id=\"3-상속에-의한-클래스-확장\" style=\"position:relative;\"><a href=\"#3-%EC%83%81%EC%86%8D%EC%97%90-%EC%9D%98%ED%95%9C-%ED%81%B4%EB%9E%98%EC%8A%A4-%ED%99%95%EC%9E%A5\" aria-label=\"3 상속에 의한 클래스 확장 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 상속에 의한 클래스 확장</h1>\n<p>상속에 의한 클래스 확장은 기존 클래스를 상속받아 새로운 클래스를 ***확장(extends)***하여 정의하는것이다.</p>\n<p>상속을 통해 클래스를 확장하려면 extends 키워드를 사용하여 상속받을 클래스를 정의한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class Base {}\n\nclass Derived extends Base {}</code></pre></div>\n<p>extends 키워드는 클래스뿐만 아니라 생성자 함수를 상속받아 클래스를 확장할 수 도 있다.</p>\n<p>extends 키워드 다음에는 클래스뿐만 아니라 [[Construct]] 내부 메서드를 갖는 함수 객체로 평가될 수 있는 모든 표현식을 사용할 수 있다.</p>\n<p>super 키워드는 함수처럼 호출할 수 도 있고 this와 같이 식별자처럼 참조할 수 있는 특수한 키워드이다.</p>\n<ul>\n<li>super를 호출하면 수퍼클래스의 constructor를 호출한다.</li>\n<li>super를 참조하면 수퍼클래스의 메서드를 호출할 수 있다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class Base {\n  constructor(a,b) {\n    this.a = a;\n    this.b = b;\n  }\n}\n\nclass Derived extends Base {\n  constructor(a,b,c) {\n    super(a,b);\n    this.c = c;\n  }\n}\n\nconst derived = new Derived(1,2,3);\nconsole.log(derived); // Derived {a: 1, b: 2, c: 3}</code></pre></div>\n<ul>\n<li>서브클래스에서 constructor를 생략하지 않는 경우 서브클래스의 constructor에서는 반드시 super를 호출해야 한다.</li>\n<li>서브클래스의 constructor에서 super를 호출하기 전에는 this를 참조할 수 없다.</li>\n<li>super는 반드시 서브클래스의 constructor에서만 호출한다.</li>\n<li><em><strong>메서드 내에서 super를 참조하면 수퍼클래스의 메서드를 호출 할 수 있다.</strong></em></li>\n</ul>","frontmatter":{"date":"December 15, 2021","title":"25. 클래스","categories":"javascript","author":"sangzun","emoji":null},"fields":{"slug":"/자바스크립트/25.클래스/"}},"prev":{"id":"690b0511-94e1-561f-b653-6697e38f9d94","html":"<h1 id=\"1-배열\" style=\"position:relative;\"><a href=\"#1-%EB%B0%B0%EC%97%B4\" aria-label=\"1 배열 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 배열</h1>\n<p>배열은 여러 개의 값을 순차적으로 나열한 자료구조이다. 배열은 인덱스와 length 프로퍼티를 갖기 때문에 for문을 통해 순차적으로 접근할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const arr = ['a','b','c'];\nfor (let i=0; i &lt; arr.length; i++) {\n  console.log(arr[i])\n}</code></pre></div>\n<p>배열은 객체 타입이다. 배열 리터럴, Array 생성자 함수, Array.of, Array.from 메서드로 생성할 수 있다.</p>\n<h1 id=\"2-자바스크립트의-배열\" style=\"position:relative;\"><a href=\"#2-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%9D%98-%EB%B0%B0%EC%97%B4\" aria-label=\"2 자바스크립트의 배열 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 자바스크립트의 배열</h1>\n<p>자바스크립트의 배열은 배열의 요소를 위한 각각의 메모리 공간은 동일한 크기를 갖지 않아도 되며, 연속적으로 이어져 있지 않을 수도 있다. 즉 <strong><em>희소 행렬(sparse array)이다.</em></strong></p>\n<ul>\n<li>자바스크립트 배열은 해시 테이블로 구현된 객체이므로 인덱스로 요소에 접근하는 경우 일반적인 배열보다 성능적인 면에서 느린 구조적인 단점이 있다. 하지만 특정 요소를 검색하거나 삽입,삭제하는 경우에는 일반적인 배열보다 빠른 성능을 기대할 수 있다.</li>\n</ul>\n<h1 id=\"3-length프로퍼티-희소행렬\" style=\"position:relative;\"><a href=\"#3-length%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0-%ED%9D%AC%EC%86%8C%ED%96%89%EB%A0%AC\" aria-label=\"3 length프로퍼티 희소행렬 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. length프로퍼티, 희소행렬</h1>\n<p>length 프로퍼티 값은 배열의 길이를 바탕으로 결정되지만 임의의 숫자 값을 명시적으로 할당할 수 도 있다.</p>\n<p>현재 length 프로퍼티 값보다 작은 숫자 값을 할당하면 배열의 길이가 줄어든다.</p>\n<p>현재 length 프로퍼티 값보다 큰 값을 할당하면 값은 변경되지만 배열의 길이가 늘어나지는 않는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const arr = [1,2,3,4,5];\n\narr.length = 3;\n\nconsole.log(arr); // [1,2,3]</code></pre></div>\n<p><strong><em>희소배열은 legnth와 배열 요소의 개수가 일치하지 않는다. 희소 배열의 legnth는 희소 배열의 실제 요소개수보다 언제나 크다.</em></strong></p>\n<p>배열을 생성할 때는 희소 배열을 생성하지 않도록 주의해야한다.</p>\n<h1 id=\"4-배열-생성\" style=\"position:relative;\"><a href=\"#4-%EB%B0%B0%EC%97%B4-%EC%83%9D%EC%84%B1\" aria-label=\"4 배열 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 배열 생성</h1>\n<h3 id=\"4-1-배열리터럴\" style=\"position:relative;\"><a href=\"#4-1-%EB%B0%B0%EC%97%B4%EB%A6%AC%ED%84%B0%EB%9F%B4\" aria-label=\"4 1 배열리터럴 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4-1. 배열리터럴</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const arr = [1,2,3];</code></pre></div>\n<h3 id=\"4-2-array-생성자-함수\" style=\"position:relative;\"><a href=\"#4-2-array-%EC%83%9D%EC%84%B1%EC%9E%90-%ED%95%A8%EC%88%98\" aria-label=\"4 2 array 생성자 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4-2. Array 생성자 함수</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const arr = new Array(10);</code></pre></div>\n<p>이 때 생성된 배열은 희소 배열이다. length프로퍼티 값은 0이 아니지만 실제로 배열의 요소는 존재하지 않는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">new Array(1,2,3); // [1,2,3]\n\nArray(1,2,3); // [1,2,3]</code></pre></div>\n<h3 id=\"4-3-arrayof\" style=\"position:relative;\"><a href=\"#4-3-arrayof\" aria-label=\"4 3 arrayof permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4-3. Array.of</h3>\n<p>ES6에서 도입된 Array.of 메서드는 전달된 인수를 요소로 갖는 배열을 생성한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Array.of(1); // [1]\nArray.of('string') // ['string']</code></pre></div>\n<h3 id=\"4-4-arrayfrom\" style=\"position:relative;\"><a href=\"#4-4-arrayfrom\" aria-label=\"4 4 arrayfrom permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4-4. Array.from</h3>\n<p>ES6에서 도입된 Array.from 메서드는 유사배열객체(array-like-object) 또는 이터러블 객체(iterable object)를 인수로 전달받아 배열러 변환하여 반환한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Array.from({length: 2, 0: 'a', 1: 'b'}) //['a','b'];\nArray.from('Hello') // ['H','e','l','l','o']</code></pre></div>\n<h1 id=\"5-배열-요소-추가-갱신-삭제\" style=\"position:relative;\"><a href=\"#5-%EB%B0%B0%EC%97%B4-%EC%9A%94%EC%86%8C-%EC%B6%94%EA%B0%80-%EA%B0%B1%EC%8B%A0-%EC%82%AD%EC%A0%9C\" aria-label=\"5 배열 요소 추가 갱신 삭제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. 배열 요소 추가 갱신 삭제</h1>\n<p>배열에도 요소를 동적으로 추가할 수 있다.</p>\n<p>만약 현재 배열의 length프로퍼티 값보다 큰 인덱스로 새로운 요소를 추가하면 희소배열이 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const arr =[0];\narr[100] = 100;\nconsole.log(arr); // (101) [0, empty × 99, 100]</code></pre></div>\n<p>배열은 객체이기 때문에 delete 연산자를 사용할 수 있다. delete 연산자는 객체의 프로퍼티를 삭제한다. 따라서 배열에서 delete 연산자를 사용할 경우 희소배열을 만들 수 있다.</p>\n<p>따라서 희소배열을 만들지 않기 위해 Array.prototype.splice 메서드를 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const arr = [1,2,3];\n\narr.splice(1,1) // arr[1]부터 1개의 요소 삭제\nconsole.log(arr) // [1,3]</code></pre></div>\n<h1 id=\"6-배열-메서드\" style=\"position:relative;\"><a href=\"#6-%EB%B0%B0%EC%97%B4-%EB%A9%94%EC%84%9C%EB%93%9C\" aria-label=\"6 배열 메서드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. 배열 메서드</h1>\n<p>배열에는 원본배열을 직접 변경하는 메서드(mutator method)와 원본배열을 변경하지 않고 새로운 배열을 생성하여 반환하는 메서드(accessor method)가 있다.</p>\n<ul>\n<li><code class=\"language-text\">Array.isArray</code> : 전달된 인수가 Array이면 true 아니면 false</li>\n<li><code class=\"language-text\">Array.prototype.indexOf</code> : 원본배열에서 인수로 전달된 요소를 검색하여 인덱스를 반환</li>\n<li><code class=\"language-text\">Array.prototype.push</code> : 인수로 전달받은 모든값을 원본배열의 마지막 요소로 추가하고 length 프로퍼티 값을 반환한다.</li>\n<li><code class=\"language-text\">Array.prototype.pop</code> : 원본배열에서 마지막 요소를 제거하고 제거한 요소를 반환한다.</li>\n<li><code class=\"language-text\">Array.prototype.unshift</code> : 인수로 전달받은 모든 값을 원본 배열의 선두에 요소로 추가하고 length 프로퍼티 값을 반환한다.</li>\n<li><code class=\"language-text\">Array.prototype.shift</code> : 원본배열에서 첫번째 요소를 제거하고 제거한 요소를 반환한다.</li>\n<li><code class=\"language-text\">Array.prototype.concat</code> : 인수로 전달된 값들을 원본배열의 마지막 요소로 추가한 새로운 배열을 반환한다. 원본배열은 변경되지 않는다.</li>\n<li><code class=\"language-text\">Array.prototype.splice</code> : splice(start, deleteCount, items) start 인덱스부터 deleteCount만큼 원본배열에서 요소를 제거한다. 제거한 위치에 items를 원본배열에 삽입한다.</li>\n<li><code class=\"language-text\">Array.prototype.slice</code> : 인수로 전달된 범위의 요소들을 복사하여 배열로 반환한다. 원본배열은 변경되지 않는다.</li>\n<li><code class=\"language-text\">Array.prototype.join</code> : 원본 배열의 모든 요소를 문자열로 변환한 후 구분자로 연결한 문자열을 반환한다. 구분자는 생략가능하다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const arr = [1,2,3];\n\narr.join(); // '1,2,3,4';\narr.join(''); // '1234'</code></pre></div>\n<ul>\n<li><code class=\"language-text\">Array.prototype.reverse</code> : 원본 배열의 순서를 반대로 뒤집는다.</li>\n<li><code class=\"language-text\">Array.prototype.fill</code> : 인수로 전달받은 값을 배열의 처음부터 끝까지 요소로 채운다. 원본 배열이 변경된다. 두번째 인수로 요소채우기를 시작할 인덱스를 전달 할 수 있고 세번째 인수로 요소 채우기를 멈출 인덱스를 전달 할 수 있다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const arr = [1,2,3];\n\narr.fill('a');\nconsole.log(arr); // ['a','a','a']</code></pre></div>\n<ul>\n<li>\n<p><code class=\"language-text\">Array.prototype.includes</code> : 배열 내에 특정 요소가 있다면 true 아니면 false 두번째 인수로 검색을 시작할 인덱스를 전달 할 수 있다. 음수를 전달하면 (length + index)를 검색 시작 인덱스로 설정한다.</p>\n</li>\n<li>\n<p><code class=\"language-text\">Array.prototype.flat</code> : 인수로 전달한 깊이만큼 재귀적으로 배열을 평탄화 한다.</p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[1,[2,3,4,5]].flat(); // [1,2,3,4,5];\n\n[1,[2,[3,[4]]]].flat(Infinity); // [1,2,3,4]</code></pre></div>\n<h1 id=\"7-배열-고차함수\" style=\"position:relative;\"><a href=\"#7-%EB%B0%B0%EC%97%B4-%EA%B3%A0%EC%B0%A8%ED%95%A8%EC%88%98\" aria-label=\"7 배열 고차함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>7. 배열 고차함수</h1>\n<p>고차함수는 함수를 인수로 전달받거나 함수를 반환하는 함수이다.</p>\n<ul>\n<li><code class=\"language-text\">Array.prototype.sort</code> : 배열의 요소를 정렬한다. 원본배열을 직접 변경하며 정렬된 배열을 반환한다.</li>\n</ul>\n<p>sort 메서드는 유니코드 코드 포인트의 순서를 따른다. 따라서 배열의 요소가 숫자타입이라면 주의가 필요하다.</p>\n<p>숫자 요소를 정렬할 때는 sort 메서드에 정렬 순서를 정의하는 비교 함수를 인수로 전달해야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const arr = [40,100,1,5,2,25,10];\narr.sort((a,b) => a - b); // [1, 2, 5, 10, 25, 40, 100]</code></pre></div>\n<ul>\n<li><code class=\"language-text\">Array.prototype.forEach</code> : 자신의 내부에서 반복문을 실행한다. forEach는 원본배열을 변경하지 않지만 콜백함수를 통해 원본 배열을 변경 할 수는 있다. forEach 메서드는 break, continue 문을 사용할 수 없다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const numbers = [1,2,3];\nconst pows = [];\n\nnumbers.forEach(item => pows.push(item ** 2));\nconsole.log(pows) // 1,4,9</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const numbers = [1,2,3];\n\nnumbers.forEach(item, index, arr) => {arr[index] = item ** 2}\n// 세번째 인자 arr는 원본배열을 가리킨다.\nconsole.log(numbers) // 1,4,9</code></pre></div>\n<ul>\n<li>\n<p><code class=\"language-text\">Array.prototype.map</code> : 자신을 호출한 배열의 모든 요소를 순회하면서 인수로 전달받은 콜백함수를 반복 호출한다. 그리고 콜백 함수의 반환값들로 구성된 새로운 배열을 반환한다. <strong><em>원본 배열은 변경되지 않는다.</em></strong></p>\n</li>\n<li>\n<p><code class=\"language-text\">Array.prototype.filter</code> : 자신을 호출한 배열의 모든 요소를 순회하면서 인수로 전달받은 콜백함수를 반복 호출한다. 콜백 함수의 반환값이 true인 요소로만 구성된 새로운 배열을 반환한다. <strong><em>원본 배열은 변경되지 않는다.</em></strong></p>\n</li>\n<li>\n<p><code class=\"language-text\">Array.prototype.reduce</code> : 자신을 호출한 배열의 모든 요소를 순회하며 인수로 전달받은 콜백함수를 반복 호출한다. 콜백 함수의 반환값을 다음 순회시에 콜백함수의 첫번째 인수로 전달하면서 콜백 함수를 호출하여 하나의 결과값을 만들어 반환한다. <strong><em>원본 배열은 변경되지 않는다.</em></strong></p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const sum = [1,2,3,4].reduce((accumulator, currentValue, index, arr) => accumulator + currentValue , 0)\n\nconsole.log(sum) // 10</code></pre></div>\n<ul>\n<li>\n<p><code class=\"language-text\">Array.prototype.some</code> : 자신을 호출한 배열의 모든 요소를 순회하며 인수로 전달받은 콜백함수를 반복 호출한다. 콜백 함수의 반환값이 단 한번이라도 참이라면 true 모두 거짓이면 false를 반환한다.</p>\n</li>\n<li>\n<p><code class=\"language-text\">Array.prototype.every</code> : 자신을 호출한 배열의 모든 요소를 순회하며 인수로 전달받은 콜백함수를 반복 호출한다 콜백 함수의 반환값이 모두 참이라면 true 단 한번이라도 거짓이라면 false를 반환한다.</p>\n</li>\n<li>\n<p><code class=\"language-text\">Array.prototype.find</code> : 자신을 호출한 배열의 모든 요소를 순회하면서 인수로 전달된 콜백 함수를 호출하여 반환값이 true인 첫번째 요소를 반환한다. 반환값이 true인 요소가 없다면 undefined를 반환한다.</p>\n</li>\n<li>\n<p><code class=\"language-text\">Array.prototype.findIndex</code> : 자신을 호출한 배열의 모든 요소를 순회하면서 인수로 전달된 콜백 함수를 호출하여 반환값이 true인 첫번째 요소의 인덱스를 반환한다. 반환값이 true인 요소가 없다면 -1를 반환한다.</p>\n</li>\n<li>\n<p><code class=\"language-text\">Array.prototype.flatMap</code> : map 메서드를 통해 생성된 새로운 배열을 평탄화 한다. 즉 map 메서드와 flat 메서드를 순차적으로 실행하는 효과가 있다. (ES10)</p>\n</li>\n</ul>","frontmatter":{"date":"December 21, 2021","title":"27. 배열","categories":"javascript","author":"sangzun","emoji":null},"fields":{"slug":"/자바스크립트/27.배열/"}},"site":{"siteMetadata":{"siteUrl":"https://github.com/sangzun-han","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/자바스크립트/26.ES6 함수의 추가 기능/","nextSlug":"/자바스크립트/25.클래스/","prevSlug":"/자바스크립트/27.배열/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}