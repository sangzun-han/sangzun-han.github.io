{"componentChunkName":"component---src-templates-blog-template-js","path":"/자바스크립트/25.클래스/","result":{"data":{"cur":{"id":"ed79635c-23ae-5ec9-ba92-04748464be11","html":"<h1 id=\"1-클래스\" style=\"position:relative;\"><a href=\"#1-%ED%81%B4%EB%9E%98%EC%8A%A4\" aria-label=\"1 클래스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 클래스</h1>\n<p>자바스크립트에서 클래스는 생성자 함수와 유사하게 동작하지만 몇 가지 차이가 있다.</p>\n<ul>\n<li>클래스를 new 연산자 없이 호출하면 에러가 발생한다.</li>\n<li>클래스는 상속을 지원하는 extends와 super 키워드를 제공한다.</li>\n<li>클래스는 호이스팅이 발생하지 않는 것처럼 동작한다.</li>\n<li>클래스 내의 모든 코드는 암묵적으로 strict mode가 살행된다.</li>\n<li>클래스는 열거되지 않는다.</li>\n</ul>\n<h1 id=\"2-프로퍼티\" style=\"position:relative;\"><a href=\"#2-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0\" aria-label=\"2 프로퍼티 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 프로퍼티</h1>\n<ol>\n<li>인스턴스 프로퍼티 : constructor 내부에서 정의해야 한다.</li>\n<li>접근자 프로퍼티: 자체적으로 값을 갖지 않고 다른 데이터 프로퍼티 값을 읽거나 저장할 때 사용하는 접근자 함수로 구성된 프로퍼티</li>\n<li>클래스 필드 : 클래스 기반의 객체 지향 언어에서 클래스가 생성할 인스턴스의 프로퍼티</li>\n<li>private : private 필드의 앞에는 #을 붙여주고 참조할 때도 붙여준다.</li>\n</ol>\n<h1 id=\"3-상속에-의한-클래스-확장\" style=\"position:relative;\"><a href=\"#3-%EC%83%81%EC%86%8D%EC%97%90-%EC%9D%98%ED%95%9C-%ED%81%B4%EB%9E%98%EC%8A%A4-%ED%99%95%EC%9E%A5\" aria-label=\"3 상속에 의한 클래스 확장 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 상속에 의한 클래스 확장</h1>\n<p>상속에 의한 클래스 확장은 기존 클래스를 상속받아 새로운 클래스를 <strong><em>확장(extends)</em></strong>하여 정의하는것이다.</p>\n<p>상속을 통해 클래스를 확장하려면 extends 키워드를 사용하여 상속받을 클래스를 정의한다. </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class Base {}\n\nclass Derived extends Base {}</code></pre></div>\n<p>extends 키워드는 클래스뿐만 아니라 생성자 함수를 상속받아 클래스를 확장할 수 도 있다.</p>\n<p>extends 키워드 다음에는 클래스뿐만 아니라 [[Construct]] 내부 메서드를 갖는 함수 객체로 평가될 수 있는 모든 표현식을 사용할 수 있다.</p>\n<p>super 키워드는 함수처럼 호출할 수 도 있고 this와 같이 식별자처럼 참조할 수 있는 특수한 키워드이다. </p>\n<ul>\n<li>super를 호출하면 수퍼클래스의 constructor를 호출한다.</li>\n<li>super를 참조하면 수퍼클래스의 메서드를 호출할 수 있다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class Base {\n  constructor(a,b) {\n    this.a = a;\n    this.b = b;\n  }\n}\n\nclass Derived extends Base {\n  constructor(a,b,c) {\n    super(a,b);\n    this.c = c;\n  }\n}\n\nconst derived = new Derived(1,2,3);\nconsole.log(derived); // Derived {a: 1, b: 2, c: 3}</code></pre></div>\n<ul>\n<li>서브클래스에서 constructor를 생략하지 않는 경우 서브클래스의 constructor에서는 반드시 super를 호출해야 한다.</li>\n<li>서브클래스의 constructor에서 super를 호출하기 전에는 this를 참조할 수 없다.</li>\n<li>super는 반드시 서브클래스의 constructor에서만 호출한다.</li>\n<li><strong><em>메서드 내에서 super를 참조하면 수퍼클래스의 메서드를 호출 할 수 있다.</em></strong></li>\n</ul>","excerpt":"1. 클래스 자바스크립트에서 클래스는 생성자 함수와 유사하게 동작하지만 몇 가지 차이가 있다. 클래스를 new 연산자 없이 호출하면 에러가 발생한다. 클래스는 상속을 지원하는 extends와 super 키워드를 제공한다. 클래스는 호이스팅이 발생하지 않는 것처럼 동작한다. 클래스 내의 모든 코드는 암묵적으로 strict mode가 살행된다. 클래스는 열거되지 않는다. 2. 프로퍼티 인스턴스 프로퍼티 : constructor 내부에서 정의해야 한다. 접근자 프로퍼티: 자체적으로 값을 갖지 않고 다른 데이터 프로퍼티 값을 읽거나 저장할 때 사용하는 접근자 함수로 구성된 프로퍼티 클래스 필드 : 클래스 기반의 객체 지향 언어에서 클래스가 생성할 인스턴스의 프로퍼티 private : private 필드의 앞에는 #을 붙여주고 참조할 때도 붙여준다. 3. 상속에 의한 클래스 확장 상속에 의한 클래스 확장은 기존 클래스를 상속받아 새로운 클래스를 확장(extends)하여 정의하는것이다. 상속…","frontmatter":{"date":"December 15, 2021","title":"25. 클래스","categories":"javascript","author":"sangzun","emoji":null},"fields":{"slug":"/자바스크립트/25.클래스/"}},"next":{"id":"588da58c-3e3c-504f-bc9d-93ce025652a0","html":"<p>실행컨택스트(execution context) 자바스크립트의 원리를 담고 있는 핵심 개념이다.</p>\n<h1 id=\"1-소스코드의타입\" style=\"position:relative;\"><a href=\"#1-%EC%86%8C%EC%8A%A4%EC%BD%94%EB%93%9C%EC%9D%98%ED%83%80%EC%9E%85\" aria-label=\"1 소스코드의타입 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 소스코드의타입</h1>\n<p>실행컨텍스트는 다음과 같은 것들을 이용하면 execution context stack에 쌓이게된다.</p>\n<p><img src=\"/executionstack.png\" alt=\"executionstack\"></p>\n<ul>\n<li>전역코드</li>\n<li>함수코드</li>\n<li>eval 코드</li>\n<li>모듈 코드</li>\n</ul>\n<h1 id=\"2-렉시컬-환경\" style=\"position:relative;\"><a href=\"#2-%EB%A0%89%EC%8B%9C%EC%BB%AC-%ED%99%98%EA%B2%BD\" aria-label=\"2 렉시컬 환경 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 렉시컬 환경</h1>\n<p>렉시컬 환경(Lexical Environment)은 식별자와 식별자에 바인딩된 값, 상위스코프에 대한 참조를 기록하는 자료구조이다.</p>\n<p>Lexical environmet는 EnvirenmetRecore와 OuterLexicalEnvironmentReference로 구성된다</p>\n<p><strong><em>환경레코드(Environment Recode)</em></strong> : 스코프에 포함된 식별자를 등록하고 등록된 식별자에 바인딩된 값을 관리하는 저장소</p>\n<p><strong><em>외부 렉시컬 환경에 대한 참조(OuterLexicalEnvironmentReference)</em></strong>: 외부 렉시컬 환경에 대한 참조는 상위 스코프를 가리킨다.</p>\n<p><img src=\"/executioncontext.jpg\" alt=\"executioncontext\"></p>\n<h3 id=\"2-1-environment-recode\" style=\"position:relative;\"><a href=\"#2-1-environment-recode\" aria-label=\"2 1 environment recode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2-1. Environment Recode</h3>\n<p><strong><em>(Environment Recode)</em></strong>에는 객체 환경 레코드(Object Environment Record)와 선언적 환경 레코드(Declarative Environment Record)로 구성되어 있다.</p>\n<p>Object Environment Record에는 var로 선언된 전역변수 전역함수, 빌트인 전역 프로퍼티와 전역함수,객체를 관리하고 Declarative Environment Record는 let, const 키워드로 선언한 전역 변수를 관리한다.</p>\n<p>전역 코드 평가 과정에서 var로 선언한 전역 변수와 함수 선언문으로 정의된 전역 함수는 Object Environment Record에 연결된 BindingObject를 통해 전역 객체의 프로퍼티와 메서드가 된다.</p>\n<p><img src=\"/Object%20Environment%20Record.jpg\" alt=\"ObjectEnvironmentRecord\"></p>\n<p>따러서 var 키워드로 선언한 변수는 코드 실행 단계에서 변수 선언문 이전에도 참조할 수 있다.</p>\n<p>let,const 키워드로 선언한 전역 변수는 전역 객체의 프로퍼티가 되지 않기 때문에 전역 객체의 프로퍼티로서 참조할 수 없다. 따라서 런타임에 실행 흐름이 변수 선언문에 도달하기 전까지 <strong><em>TDZ</em></strong>에 빠지게 된다.</p>\n<p>Global Environmnet Record에 [[GlobalThisValue]] 내부 슬롯에 this가 바인딩된다.</p>\n<h3 id=\"2-2outerlexicalenvironmentreference\" style=\"position:relative;\"><a href=\"#2-2outerlexicalenvironmentreference\" aria-label=\"2 2outerlexicalenvironmentreference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2-2.OuterLexicalEnvironmentReference</h3>\n<p>Outer LexicalEnvironment Reference는 현재 평가중인 소스코드를 포함하는 외부 소스코드의 상위 스코프를 가리킨다.</p>\n<h1 id=\"3-요약\" style=\"position:relative;\"><a href=\"#3-%EC%9A%94%EC%95%BD\" aria-label=\"3 요약 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 요약</h1>\n<ol>\n<li>자바스크립트 엔진이 코드를 실행시킬때 Execution Context라는 실행 가능한 환경을 만들고 Execution Context를 기준으로 코드를 실행한다.</li>\n<li>전역에서 생성되는 global execution context와 함수 실행 코드를 만나면 생성되는 function execution context가 있다.</li>\n<li>생성단계일 때 Lexical Environmet를 생성한다. 이때 Lexical Environemt에는 스코프의 변수와 함수를 선언한다.</li>\n<li>실행단계일 때 스크립트를 읽으며 생성한 Lexical Environemt에 할당 및 코드를 실행한다.</li>\n<li>Execution statck이 빌 때 까지 위의 동작을 반복한다.</li>\n</ol>","frontmatter":{"date":"December 14, 2021","title":"23.실행 컨텍스트","categories":"javascript","author":"sangzun","emoji":null},"fields":{"slug":"/자바스크립트/23.실행컨텍스트/"}},"prev":{"id":"7663b168-d1a9-5781-8d45-b289f0b1f1f1","html":"<p>ES6 이전의 함수는 사용 목적에 따라 명확히 구분되지 않는다. 즉 ES6 이전의 모든 함수는 일반 함수로서 호출할 수 있는 것은 물론 생성자 함수로서 호출할 수 있다. ES6이전의 모든 함수는 callable이면서 constructor이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var obj = {\n  x:10,\n  f: fucntion() { return this.x }\n}\nconsole.log(obj.f()); // 10\n\nvar bar = obj.f;\nconsole.log(bar()); //undefined\ncosole.log(new obj.f()); // f{}</code></pre></div>\n<p>객체에 바인딩된 함수를 생성자 함수로 호출하는 경우가 흔치는 않지만 문법상 가능하다. 그리고 이는 성능면에서 문제가 있다.</p>\n<p>객체에 바인딩된 함수가 constructor라는것은 prototype 프로퍼티를 가지며 프로토타입 객체를 생성한다는 것을 의미한다. 따라서 불필요한 프로타티입 객체를 생성한다.</p>\n<table>\n<thead>\n<tr>\n<th>ES6 함수의 구분</th>\n<th align=\"center\">constructor</th>\n<th align=\"center\">prototype</th>\n<th align=\"center\">super</th>\n<th align=\"center\">arguments</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>일반함수</td>\n<td align=\"center\">O</td>\n<td align=\"center\">O</td>\n<td align=\"center\">X</td>\n<td align=\"center\">O</td>\n</tr>\n<tr>\n<td>메서드</td>\n<td align=\"center\">X</td>\n<td align=\"center\">X</td>\n<td align=\"center\">O</td>\n<td align=\"center\">O</td>\n</tr>\n<tr>\n<td>화살표함수</td>\n<td align=\"center\">X</td>\n<td align=\"center\">X</td>\n<td align=\"center\">X</td>\n<td align=\"center\">X</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"1-메서드\" style=\"position:relative;\"><a href=\"#1-%EB%A9%94%EC%84%9C%EB%93%9C\" aria-label=\"1 메서드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 메서드</h1>\n<p>ES6 이전에는 메서드에 대한 명확한 정의가 없었다. 일반적으로 메서드는 객체에 바인딩 된 함수를 가리켰다.\nES6에서는 메서드에 대한 정의를 <strong><em>메서드 축약 표현으로 정의된 함수만을 의미한다.</em></strong></p>\n<p>ES6에서 정의한 메서드는 <strong><em>인스턴스를 생성할 수 없는 non-constructor</em></strong>이다.</p>\n<p><strong><em>ES6 메서드는 자신을 바인딩한 객체를 가리키는 내부 슬롯[[HomeObject]]를 갖는다.</em></strong> super 참조는 내부 슬롯 [[HomeObject]]를 사용하여 수퍼클래스의 메서드를 참조한다.</p>\n<h1 id=\"2-화살표-함수\" style=\"position:relative;\"><a href=\"#2-%ED%99%94%EC%82%B4%ED%91%9C-%ED%95%A8%EC%88%98\" aria-label=\"2 화살표 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 화살표 함수</h1>\n<p>화살표 함수(arrow function)은 function 키워드 대신 화살표를 사용하여 기존의 함수 정의 방식보다 간략하게 함수를 정의할 수 있다. </p>\n<p>화살표 함수는 표현만 간략한것이 아니라 내부 동작도 기존의 함수보다 간략하다.</p>\n<h3 id=\"2-1-화살표-함수-정의\" style=\"position:relative;\"><a href=\"#2-1-%ED%99%94%EC%82%B4%ED%91%9C-%ED%95%A8%EC%88%98-%EC%A0%95%EC%9D%98\" aria-label=\"2 1 화살표 함수 정의 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2-1. 화살표 함수 정의</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const multiply = (x,y) => x * y;\nmultiply(2,3) // 6</code></pre></div>\n<ul>\n<li>매개변수가 여러개 인 경우 () 안에 매개변수를 선언한다.</li>\n<li>매개변수가 한개인 경우 () 생략 가능하다.</li>\n<li>매개변수가 없는 경우 () 생략 불가능하다.</li>\n<li>함수의 몸체가 하나의 문으로 구성된다면 {}를 생략할 수 있다.</li>\n<li>{} 생략됐다면 함수 몸체 내부의 문이 표현식이 아니라면 에러가 발생한다. 표현식이 아니라면 반환할 수 없기 때문이다.</li>\n<li>객체 리터럴을 반환하는 경우 ()로 감싸주어야 한다.</li>\n<li>화살표 함수도 즉시 실행 함수로 사용할 수 있다.</li>\n</ul>\n<h3 id=\"2-2-화살표-함수-vs-일반함수\" style=\"position:relative;\"><a href=\"#2-2-%ED%99%94%EC%82%B4%ED%91%9C-%ED%95%A8%EC%88%98-vs-%EC%9D%BC%EB%B0%98%ED%95%A8%EC%88%98\" aria-label=\"2 2 화살표 함수 vs 일반함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2-2. 화살표 함수 vs 일반함수</h3>\n<ul>\n<li>화살표 함수는 인스턴스를 생성할 수 없으므로 prototype 프로퍼티가 없고 prototype도 생성하지 않는다.</li>\n<li>중복된 매개변수 이름을 선언할 수 없다.</li>\n<li>화살표 함수는 함수 자체의 this,arguments,super,new.target 바인딩을 갖지 않는다.</li>\n</ul>\n<h3 id=\"2-3-this\" style=\"position:relative;\"><a href=\"#2-3-this\" aria-label=\"2 3 this permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2-3. this</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class Prefixer {\n  constructor(prefix) {\n    this.prefix = prefix;\n  }\n\n  add(arr){\n    return arr.map(item => this.prefix + item)\n  }\n}\n\nconst prefixer = new Prefixer('-webkit-');\nconsole.log(prefixer.add(['transition', 'user-select']));\n\n// ['-webkit-transition', '-webkit-user-select']</code></pre></div>\n<p><strong><em>화살표 함수는 함수 자체의 this 바인딩을 갖지 않는다. 따라서 화살표 함수 내부에서 this를 참조하면 상위스코프의 this를 그대로 참조한다.</em></strong></p>\n<p>화살표 함수는 this 바인딩을 갖지 않기 때문에 Function.prototype.call ,Function.prototype.apply, Function.prototype.bind 메서드를 사용해도 화살표 함수 내부의 this를 교체할 수 없다.</p>\n<p>메서드를 화살표 함수로 정의하는것은 피해야 한다. 메서드를 정의 할 때는 ES6메서드 축약표현으로 정의한 ES6 메서드를 사용하는것이 좋다.</p>\n<p>프로퍼티를 동적으로 추가할때는 ES6 메서드 정의를 사용할 수 없으므로 일반 함수를 할당한다.</p>\n<h3 id=\"2-4-super\" style=\"position:relative;\"><a href=\"#2-4-super\" aria-label=\"2 4 super permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2-4. super</h3>\n<p>화살표 함수는 함수 자체의 super 바인딩을 갖지 않는다. 따라서 화살표 함수 내부에서 super를 참조하면 this와 마찬가지로 상위 스코프의 super를 참조한다.</p>\n<h3 id=\"2-5-arguments\" style=\"position:relative;\"><a href=\"#2-5-arguments\" aria-label=\"2 5 arguments permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2-5. arguments</h3>\n<p>화살표 함수는 함수 자체의 arguments 바인딩을 갖지 않는다 따라서 화살표 함수 내부에서 arguments를 참조하면 상위 스코프의 arguments를 참조한다.</p>\n<h1 id=\"3-rest-파라미터\" style=\"position:relative;\"><a href=\"#3-rest-%ED%8C%8C%EB%9D%BC%EB%AF%B8%ED%84%B0\" aria-label=\"3 rest 파라미터 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Rest 파라미터</h1>\n<p>Rest 파라미터는 매개변수 이름앞에 …을 붙여서 정의한 매개변수를 의미한다. Rest 파라미터는 함수에 전달된 인수들의 목록을 배열로 전달받는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function foo(...rest) {\n  console.log(rest); // [1,2,3,4,5]\n}\n\nfoo(1,2,3,4,5)</code></pre></div>\n<p>일반 매개변수와 Rest 파라미터는 함께 사용할 수 있다. 이 때 함수에 전달된 인수들은 매개벼눗와 Rest 파라미터에 순차적으로 할당된다. —> Rest 파라미터는 반드시 마지막 파라미터여야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">fucntion foo(param, ...rest) {\n  console.log(param); // 1\n  console.log(test); // [2,3,4,5]\n}\n\nfoo(1,2,3,4,5);</code></pre></div>\n<ul>\n<li>Rest 파라미터는 단 하나만 선언할 수 있다.</li>\n<li>Rest 파라미터는 함수 정의 시 선언한 매개변수 개수를 나타내는 함수 객체의 length 프로퍼티에 영향을 주지 않는다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function foo(...rest) {} // 0\nconsole.log(foo.length)</code></pre></div>\n<h1 id=\"4-매개변수-기본값\" style=\"position:relative;\"><a href=\"#4-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98-%EA%B8%B0%EB%B3%B8%EA%B0%92\" aria-label=\"4 매개변수 기본값 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 매개변수 기본값</h1>\n<p>인수가 전달되지 않는 매개변수의 값은 undefined이다. 이는 의도치 않은 문제를 발생 시킬 수 있다.</p>\n<p>ES6에서 도입된 매개변수 기본값을 사용하면 함수 내에서 수행하던 인수 체크 및 초기화를 간소화 할 수 있다.</p>\n<p>매개변수 기본값은 함수 정의시 선언한 매개변수 개수를 나타내는 함수 객체의 length 프로퍼티와 arguments 객체에 아무런 영향을 주지 않는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function sum(x = 0, y = 0) {\n  return x + y;\n}\n\nconsole.log(sum(1)); // 1</code></pre></div>\n<p>Rest 파라미터에는 기본값을 지정할 수 없다.</p>","frontmatter":{"date":"December 20, 2021","title":"26. ES6 함수의 추가 기능","categories":"javascript","author":"sangzun","emoji":null},"fields":{"slug":"/자바스크립트/26.ES6 함수의 추가 기능/"}},"site":{"siteMetadata":{"siteUrl":"https://github.com/sangzun-han","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/자바스크립트/25.클래스/","nextSlug":"/자바스크립트/23.실행컨텍스트/","prevSlug":"/자바스크립트/26.ES6 함수의 추가 기능/"}},"staticQueryHashes":["1073350324","2938748437"]}