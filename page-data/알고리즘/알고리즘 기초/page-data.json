{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/알고리즘/알고리즘 기초/",
    "result": {"data":{"cur":{"id":"fe793ae8-d08b-5d55-8f9b-d08e45f2b1fb","html":"<h1 id=\"1-알고리즘-기초\" style=\"position:relative;\"><a href=\"#1-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EA%B8%B0%EC%B4%88\" aria-label=\"1 알고리즘 기초 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 알고리즘 기초</h1>\n<h2 id=\"문제-해결-과정\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C-%ED%95%B4%EA%B2%B0-%EA%B3%BC%EC%A0%95\" aria-label=\"문제 해결 과정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제 해결 과정</h2>\n<ol>\n<li>문제를 읽고 이해한다.</li>\n<li>문제를 익숙한 용어로 재정의한다.</li>\n<li>어떻게 해결할지 계획을 세운다.</li>\n<li>계획을 검증한다.</li>\n<li>프로그램으로 구현한다.</li>\n<li>어떻게 풀었는지 돌아보고, 개선할 방법이 있는지 찾아본다.</li>\n</ol>\n<h3 id=\"체계적인-접근을-위한-질문\" style=\"position:relative;\"><a href=\"#%EC%B2%B4%EA%B3%84%EC%A0%81%EC%9D%B8-%EC%A0%91%EA%B7%BC%EC%9D%84-%EC%9C%84%ED%95%9C-%EC%A7%88%EB%AC%B8\" aria-label=\"체계적인 접근을 위한 질문 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>체계적인 접근을 위한 질문</h3>\n<ul>\n<li>비슷한 문제를 풀어본적 있는가</li>\n<li>단순한 방법에서 시작할 수 있을까</li>\n<li>문제를 단순화 할 수 있을까</li>\n<li>그림으로 그려 볼 수 있을까</li>\n<li>수식으로 표현할 수 있을까</li>\n<li>문제를 분해 할 수 있을까</li>\n<li>뒤에서부터 생각해서 문제를 풀 수 있을까</li>\n<li>특정 형태의 답만을 고려할 수 있을까</li>\n<li>정렬하고 풀 수 있을까</li>\n</ul>\n<p>Ex) 1부터 100까지 합을 구하는 문제</p>\n<ul>\n<li>1+2+3…+100 = 5050 (반복문)</li>\n<li>100*(1+100) / 2 = 5050</li>\n</ul>\n<h2 id=\"시간복잡도\" style=\"position:relative;\"><a href=\"#%EC%8B%9C%EA%B0%84%EB%B3%B5%EC%9E%A1%EB%8F%84\" aria-label=\"시간복잡도 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>시간복잡도</h2>\n<h3 id=\"최선의-경우-best-case\" style=\"position:relative;\"><a href=\"#%EC%B5%9C%EC%84%A0%EC%9D%98-%EA%B2%BD%EC%9A%B0-best-case\" aria-label=\"최선의 경우 best case permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>최선의 경우 (Best Case)</h3>\n<ul>\n<li>빅 오메가 표기법 사용 <code class=\"language-text\">big-Ω</code></li>\n<li>최선의 시나리오로 최소 x 시간이 걸림</li>\n</ul>\n<h3 id=\"최악의-경우-worst-case\" style=\"position:relative;\"><a href=\"#%EC%B5%9C%EC%95%85%EC%9D%98-%EA%B2%BD%EC%9A%B0-worst-case\" aria-label=\"최악의 경우 worst case permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>최악의 경우 (Worst Case)</h3>\n<ul>\n<li>빅 오 표기법 사용 <code class=\"language-text\">Big-O</code></li>\n<li>최악의 시나리오로 아무리 오래 걸려도 이 시간보다 덜 걸림</li>\n</ul>\n<h3 id=\"평균의경우-avaerage-case\" style=\"position:relative;\"><a href=\"#%ED%8F%89%EA%B7%A0%EC%9D%98%EA%B2%BD%EC%9A%B0-avaerage-case\" aria-label=\"평균의경우 avaerage case permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>평균의경우 (Avaerage Case)</h3>\n<ul>\n<li>빅 세타 <code class=\"language-text\">big-Θ</code></li>\n<li>평균 시간</li>\n</ul>\n<p>→ 재귀의 경우 호출횟수로 계산함</p>\n<h3 id=\"p-n개의-서로-다른-데이터가-저장되어-있는-배열에서-원하는-값-x를-탐색하는-알고리즘에서의-시간-복잡도\" style=\"position:relative;\"><a href=\"#p-n%EA%B0%9C%EC%9D%98-%EC%84%9C%EB%A1%9C-%EB%8B%A4%EB%A5%B8-%EB%8D%B0%EC%9D%B4%ED%84%B0%EA%B0%80-%EC%A0%80%EC%9E%A5%EB%90%98%EC%96%B4-%EC%9E%88%EB%8A%94-%EB%B0%B0%EC%97%B4%EC%97%90%EC%84%9C-%EC%9B%90%ED%95%98%EB%8A%94-%EA%B0%92-x%EB%A5%BC-%ED%83%90%EC%83%89%ED%95%98%EB%8A%94-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EC%97%90%EC%84%9C%EC%9D%98-%EC%8B%9C%EA%B0%84-%EB%B3%B5%EC%9E%A1%EB%8F%84\" aria-label=\"p n개의 서로 다른 데이터가 저장되어 있는 배열에서 원하는 값 x를 탐색하는 알고리즘에서의 시간 복잡도 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>p. n개의 서로 다른 데이터가 저장되어 있는 배열에서 원하는 값 x를 탐색하는 알고리즘에서의 시간 복잡도</h3>\n<ol>\n<li>최선의 경우 : <code class=\"language-text\">1</code></li>\n<li>최악의 경우 : <code class=\"language-text\">N</code></li>\n<li>평균적인 경우 : <code class=\"language-text\">N/2</code></li>\n</ol>\n<h2 id=\"공간복잡도\" style=\"position:relative;\"><a href=\"#%EA%B3%B5%EA%B0%84%EB%B3%B5%EC%9E%A1%EB%8F%84\" aria-label=\"공간복잡도 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>공간복잡도</h2>\n<ul>\n<li>메모리 사용량</li>\n</ul>","excerpt":"1. 알고리즘 기초 문제 해결 과정 문제를 읽고 이해한다. 문제를 익숙한 용어로 재정의한다. 어떻게 해결할지 계획을 세운다. 계획을 검증한다. 프로그램으로 구현한다. 어떻게 풀었는지 돌아보고, 개선할 방법이 있는지 찾아본다. 체계적인 접근을 위한 질문 비슷한 문제를 풀어본적 있는가 단순한 방법에서 시작할 수 있을까 문제를 단순화 할 수 있을까 그림으로 그려 볼 수 있을까 수식으로 표현할 수 있을까 문제를 분해 할 수 있을까 뒤에서부터 생각해서 문제를 풀 수 있을까 특정 형태의 답만을 고려할 수 있을까 정렬하고 풀 수 있을까 Ex) 1부터 100까지 합을 구하는 문제 1+2+3…+100 = 5050 (반복문) 100*(1+100) / 2 = 5050 시간복잡도 최선의 경우 (Best Case) 빅 오메가 표기법 사용  최선의 시나리오로 최소 x 시간이 걸림 최악의 경우 (Worst Case) 빅 오 표기법 사용  최악의 시나리오로 아무리 오래 걸려도 이 시간보다 덜 걸림 평균의경우 …","frontmatter":{"date":"August 01, 2022","title":"알고리즘 기초","categories":"알고리즘","author":"sangzun","emoji":"😂"},"fields":{"slug":"/알고리즘/알고리즘 기초/"}},"next":{"id":"0728da14-b3f9-5ce6-beeb-d3fd1d827c79","html":"<h2 id=\"반복과-재귀\" style=\"position:relative;\"><a href=\"#%EB%B0%98%EB%B3%B5%EA%B3%BC-%EC%9E%AC%EA%B7%80\" aria-label=\"반복과 재귀 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>반복과 재귀</h2>\n<ul>\n<li>반복과 재귀는 유사한 작업을 수행할 수 있다.</li>\n<li>반복은 수행하는 작업이 완료될 때 까지 계속 반복</li>\n<li>재귀는 주어진 문제의 해를 구하기 위해 동일하면서 더 작은 문제의 해를 이용하는 방법\n<ul>\n<li>하나의 큰 문제를 해결할 수 있는 더 작은 문제로 쪼개고 결과들을 결합한다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"재귀-함수-recursive-function\" style=\"position:relative;\"><a href=\"#%EC%9E%AC%EA%B7%80-%ED%95%A8%EC%88%98-recursive-function\" aria-label=\"재귀 함수 recursive function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>재귀 함수 (recursive function)</h3>\n<ol>\n<li>함수에 대한 정의를 명확히 <code class=\"language-text\">What</code></li>\n<li>평평하게 로직을 바라보기 <code class=\"language-text\">Flat</code></li>\n<li>각 재귀의 실행을 결정하는 결정요인(값)은 <code class=\"language-text\">매개변수</code>로 선언한다.</li>\n<li>종료조건 존재?</li>\n</ol>\n<ul>\n<li>함수 내부에서 직접 혹은 간접적으로 자기 자신을 호출하는 함수 <code class=\"language-text\">자신을 통해 자신을 정의</code></li>\n<li>일반적으로 재귀적 정의를 이용해서 재귀함수를 구현</li>\n<li>재귀적 프로그램을 작성하는 것은 반복구조에 비해 간결하고 이해하기 쉬움</li>\n<li>함수 호출은 프로그램 메모리 구조에서 <code class=\"language-text\">스택</code>을 사용</li>\n<li>따라서 재귀 호출은 반복적인 스택의 사용을 의미하며 메모리 및 속도에서 성능저하 발생\n<table>\n<thead>\n<tr>\n<th></th>\n<th>재귀</th>\n<th>반복</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>종료</td>\n<td>재귀 함수 호출이 종료되는 base case</td>\n<td>반복문의 종료 조건</td>\n</tr>\n<tr>\n<td>수행시간</td>\n<td>(상대적) 느림</td>\n<td>빠름</td>\n</tr>\n<tr>\n<td>메모리 공간</td>\n<td>(상대적) 많이 사용</td>\n<td>적게 사용</td>\n</tr>\n<tr>\n<td>소스 코드 길이</td>\n<td>짧고 간결</td>\n<td>길다</td>\n</tr>\n<tr>\n<td>소스 코드 형태</td>\n<td>선택 구조(if … else)</td>\n<td>반복 구조(for, while)</td>\n</tr>\n<tr>\n<td>무한 반복시</td>\n<td>스택 오버플로우</td>\n<td>cpu를 반복해서 점유</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ul>\n<h3 id=\"피보나치-수열\" style=\"position:relative;\"><a href=\"#%ED%94%BC%EB%B3%B4%EB%82%98%EC%B9%98-%EC%88%98%EC%97%B4\" aria-label=\"피보나치 수열 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>피보나치 수열</h3>\n<ul>\n<li>이전의 두 수 합을 다음 항으로 하는 수열\n<ul>\n<li>F0 = 0, F1 = 1</li>\n<li>Fn = Fn-1 + fn-2 (n≥2)</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 중복 호출</span>\n<span class=\"token function\">fibo</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> n<span class=\"token operator\">&lt;</span><span class=\"token number\">2</span> <span class=\"token keyword\">return</span> n\n\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> <span class=\"token function\">fibo</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">fibo</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">/*\nmemoization\n이전에 계산한 값을 메모리에 저장해서 매번 다시 계산하지 않도록\n전체적인 실행속도를 빠르게하는 기술.\n*/</span></code></pre></div>\n<h3 id=\"하노이탑\" style=\"position:relative;\"><a href=\"#%ED%95%98%EB%85%B8%EC%9D%B4%ED%83%91\" aria-label=\"하노이탑 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>하노이탑</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">/*\nn개의 원판을 이동시켜라\n1. 위에서부터 n-1까지 임시기둥으로 옮기기\n2. n 원판을 목적기둥으로 옮기기\n3. 임시기둥에 있는 n-1개의 원판을 목적기둥으로 옮기기\n*/</span>\n<span class=\"token function\">hanoi</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> start<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> temp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n\t<span class=\"token comment\">// 위 ~ n-1 이동</span>\n\t<span class=\"token function\">hanoi</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// n 이동</span>\n\t<span class=\"token comment\">// n-1을 n위에 이동</span>\n\t<span class=\"token function\">hanoi</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> temp<span class=\"token punctuation\">,</span>start<span class=\"token punctuation\">,</span>end<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"순열\" style=\"position:relative;\"><a href=\"#%EC%88%9C%EC%97%B4\" aria-label=\"순열 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>순열</h2>\n<ul>\n<li>서로 다른 것들 중 몇개를 뽑아서 한 줄로 나열하는 것</li>\n<li>서로 다른 n개 중 r개를 택하는 순열</li>\n</ul>\n<p><code class=\"language-text\">nPr</code> = n _ (n-1) _ (n-2) _ (n-3) _ … * (n-r+1)</p>\n<p><code class=\"language-text\">npn</code> = n!</p>\n<p><code class=\"language-text\">순서에 의미가 있다면 순열</code> <code class=\"language-text\">순서에 의미가 없다면 조합</code></p>\n<p>ex) 1~9까지 숫자 한번씩 사용해서 4자리의 비밀번호를 만든다. →9P4 (순열)</p>\n<p>ex) 1~9까지 여러번 사용해서 4자리의 비밀번호를 만든다 →9<strong>𝛱</strong>4 (중복순열)</p>\n<p>ex) 복권 70개의 숫자중 5개를 뽑는다. → 70C5 (조합)</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// {1,2,3]을 포함하는 모든 순열을 생성하는 함수</span>\nnumbers<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token comment\">// 순열 저장 배열</span>\nisSelected<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> 인덱스에 해당하는 숫자가 사용 중인지 저장하는 배열\n<span class=\"token function\">perm</span><span class=\"token punctuation\">(</span>cnt<span class=\"token punctuation\">)</span> <span class=\"token comment\">// cnt : 현재까지 뽑은 순열 수의 개수</span>\n\n<span class=\"token keyword\">if</span> cnt <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span>\n\t순열 생성 완료\n<span class=\"token keyword\">else</span>\n\t<span class=\"token keyword\">for</span> i from <span class=\"token number\">1</span> <span class=\"token keyword\">to</span> <span class=\"token number\">3</span>\n\t\t<span class=\"token keyword\">if</span> isSelcted<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">true</span> then <span class=\"token keyword\">continue</span>\n\t\tnumbers<span class=\"token punctuation\">[</span>cnt<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i\n\t\tisSelected<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n\t\t<span class=\"token function\">perm</span><span class=\"token punctuation\">(</span>cnt<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\tisSelected<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n\tend <span class=\"token keyword\">for</span>\n</code></pre></div>\n<h3 id=\"조합\" style=\"position:relative;\"><a href=\"#%EC%A1%B0%ED%95%A9\" aria-label=\"조합 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>조합</h3>\n<ul>\n<li>서로 다른 n개의 원소 중 r개를 순서 없이 골라낸 것</li>\n</ul>\n<p><code class=\"language-text\">nCr</code> = n! / (n-r)!*r!</p>\n<ul>\n<li>조합의 수가 많아지는 경우는 r의값이 n/2</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">}</span> 중 원소 <span class=\"token number\">3</span>개를 포함하는 모든 조합을 생성\n<span class=\"token keyword\">for</span> i from <span class=\"token number\">1</span> <span class=\"token keyword\">to</span> <span class=\"token number\">4</span>\n\t<span class=\"token keyword\">for</span> j <span class=\"token keyword\">to</span> <span class=\"token namespace\">i</span><span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token keyword\">to</span> <span class=\"token number\">4</span>\n\t\t<span class=\"token keyword\">for</span> k from j<span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token keyword\">to</span> <span class=\"token number\">4</span>\n\t\t\t\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">,</span>k<span class=\"token punctuation\">)</span>\n\t\tend <span class=\"token keyword\">for</span>\n\tend <span class=\"token keyword\">for</span>\nend <span class=\"token keyword\">for</span>\n\n<span class=\"token comment\">// nCr -> n개의 원소 중 r개 원소를 갖는 조합 생성</span>\ninput<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> n개의 원소를 가지고 있는 배열\nnumbers<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> r개의 크기의 배열<span class=\"token punctuation\">,</span> 조합이 저장될 배열\n\n<span class=\"token function\">comb</span><span class=\"token punctuation\">(</span>cnt<span class=\"token punctuation\">,</span>start<span class=\"token punctuation\">)</span> <span class=\"token comment\">// cnt: 현재까지 뽑은 조합 원소 개수, start: 조합 시도할 원소의 시작 인덱스</span>\n\t<span class=\"token keyword\">if</span> cnt <span class=\"token operator\">==</span> r<span class=\"token operator\">:</span>\n\t\t\t조합생성 완료\n\t<span class=\"token keyword\">else</span>\n\t\t\t<span class=\"token keyword\">for</span> i from start <span class=\"token keyword\">to</span> <span class=\"token namespace\">n</span><span class=\"token operator\">-</span><span class=\"token number\">1</span>\n\t\t\t\tnumbers<span class=\"token punctuation\">[</span>cnt<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> input<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n\t\t\t\t<span class=\"token function\">comb</span><span class=\"token punctuation\">(</span>cnt<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t\tend <span class=\"token keyword\">for</span></code></pre></div>\n<h3 id=\"주사위-던지기-1\" style=\"position:relative;\"><a href=\"#%EC%A3%BC%EC%82%AC%EC%9C%84-%EB%8D%98%EC%A7%80%EA%B8%B0-1\" aria-label=\"주사위 던지기 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>주사위 던지기 1</h3>\n<ul>\n<li>주사위를 3번 던져서 나올 수 있는 모든 경우 → <code class=\"language-text\">중복순열</code></li>\n<li>n𝜫r</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">첫번째 두번째 세번재\n<span class=\"token number\">6</span> <span class=\"token operator\">*</span> <span class=\"token number\">6</span> <span class=\"token operator\">*</span> <span class=\"token number\">6</span> <span class=\"token operator\">=</span> <span class=\"token number\">216</span>가지\n<span class=\"token number\">6</span>𝜫<span class=\"token number\">3</span>주사위</code></pre></div>\n<h3 id=\"주사위-던지기-2\" style=\"position:relative;\"><a href=\"#%EC%A3%BC%EC%82%AC%EC%9C%84-%EB%8D%98%EC%A7%80%EA%B8%B0-2\" aria-label=\"주사위 던지기 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>주사위 던지기 2</h3>\n<ul>\n<li>주사위를 3번 던져서 모두 다른 수가 나올 수 있는 경우 단 123,132,321같은 결과는 서로 다른 경우로 봄 → <code class=\"language-text\">순열</code></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token number\">6</span>P3 <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token operator\">*</span><span class=\"token number\">5</span><span class=\"token operator\">*</span><span class=\"token number\">4</span> <span class=\"token operator\">=</span> <span class=\"token number\">120</span>가지</code></pre></div>\n<h3 id=\"주사위-던지기-3\" style=\"position:relative;\"><a href=\"#%EC%A3%BC%EC%82%AC%EC%9C%84-%EB%8D%98%EC%A7%80%EA%B8%B0-3\" aria-label=\"주사위 던지기 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>주사위 던지기 3</h3>\n<ul>\n<li>주사위를 3번 던진 결과가 다음과 같이 중복되는 경우를 제외하고 나올 수 있는 모든 경우(112,121,211 → 중복되는 경우) → <code class=\"language-text\">중복조합</code></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token number\">6</span>H3 <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token operator\">-</span><span class=\"token number\">1</span>C3 <span class=\"token operator\">=</span> <span class=\"token number\">8</span>C3  <span class=\"token operator\">=</span> <span class=\"token number\">56</span>가지\nnHr <span class=\"token operator\">=</span> n<span class=\"token operator\">+</span>r<span class=\"token operator\">-</span><span class=\"token number\">1</span>Cr</code></pre></div>\n<h3 id=\"주사위-던지기-4\" style=\"position:relative;\"><a href=\"#%EC%A3%BC%EC%82%AC%EC%9C%84-%EB%8D%98%EC%A7%80%EA%B8%B0-4\" aria-label=\"주사위 던지기 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>주사위 던지기 4</h3>\n<ul>\n<li>주사위를 3번 던져서 모두 다른 수가 나올 수 있는 모든 경우 단 123,132,321와 같은 경우는 중복되는 경우로봄 → <code class=\"language-text\">조합</code></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token number\">6</span>C3 <span class=\"token operator\">=</span> <span class=\"token number\">30</span>가지</code></pre></div>\n<h2 id=\"부분-집합\" style=\"position:relative;\"><a href=\"#%EB%B6%80%EB%B6%84-%EC%A7%91%ED%95%A9\" aria-label=\"부분 집합 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>부분 집합</h2>\n<ul>\n<li>집합에 포함된 원소들을 선택하는 것</li>\n<li>다수의 중요 알고리즘이 원소들의 그룹에서 최적의 부분집합을 찾는 것 ex) knapsack</li>\n<li>부분집합의 수\n<ul>\n<li>집합의 원소가 n개일때 공집합을 포함한 부분집합의 개수는 2^n개 이다.</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">input<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> 숫자 배열\nisSelected<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> 부분 집합에 포함 <span class=\"token operator\">/</span> 비포함 여부 저장\n</code></pre></div>","frontmatter":{"date":"August 01, 2022","title":"알고리즘 기초 - 재귀함수","categories":"알고리즘","author":"sangzun","emoji":"😂"},"fields":{"slug":"/알고리즘/재귀함수/"}},"prev":{"id":"f318eb7e-4c6f-5544-9516-81168136789d","html":"<h3 id=\"강의실-배정\" style=\"position:relative;\"><a href=\"#%EA%B0%95%EC%9D%98%EC%8B%A4-%EB%B0%B0%EC%A0%95\" aria-label=\"강의실 배정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>강의실 배정</h3>\n<ul>\n<li>어떤 방법으로 강의를 선택해야 회의실이 최소가 될까?\n<ul>\n<li>시작시간이 가장 빠른것을 선택 (X)</li>\n<li>끝나는 시간이 가장 빠른것을 선택 -> 종료되는 강의시간이 빠르면 더 많은 강의를 배정할 확률이 높아진다.</li>\n<li>수업시간이 짧은 강의부터 선택 (X)-> 0-1 1-4 4-5 3-5</li>\n</ul>\n</li>\n</ul>\n<ol>\n<li>시작시간을 기준으로 정렬</li>\n<li>탐색\n<ul>\n<li>첫번째 강의의 끝나는시간을 큐에 추가</li>\n<li>다음 강의의 시작시간이랑 큐의 가장 위에있는값 비교</li>\n<li>다음 강의 시작시간 >= 큐의 가장 위에있는 값 —> 같은 강의실 써도된다. (큐에서 제거)</li>\n<li>조건을 만족하지 못하면 큐에 추가</li>\n</ul>\n</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"markdown\"><pre class=\"language-markdown\"><code class=\"language-markdown\">Si = [1,3,0,5,3,5,6]\nTi = [4,5,6,7,8,9,10]\n\n0 6 --> 1번 강의실\n1 4 --> 2번 강의실\n3 5 --> 3번 강의실\n3 8 --> 4번 강의실\n5 7 --> 2번 강의실\n5 9 --> 3번 강의실\n6 10 --> 1번 강의실\n</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Comparator</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PriorityQueue</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">StringTokenizer</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Boj11000</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">BufferedReader</span> br <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">StringTokenizer</span> st <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">PriorityQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> queue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PriorityQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>br<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> lectures <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n         st <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringTokenizer</span><span class=\"token punctuation\">(</span>br<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token keyword\">int</span> <span class=\"token class-name\">Si</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">.</span><span class=\"token function\">nextToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token keyword\">int</span> <span class=\"token class-name\">Ti</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">.</span><span class=\"token function\">nextToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         lectures<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Si</span><span class=\"token punctuation\">;</span>\n         lectures<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Ti</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>lectures<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Comparator</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n         <span class=\"token annotation punctuation\">@Override</span>\n         <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> o1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> o2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>o1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> o2<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> o1<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> o2<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 오름차순</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> o1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> o2<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 오름차순</span>\n         <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n      <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n         <span class=\"token keyword\">int</span> ti <span class=\"token operator\">=</span> lectures<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n         <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>queue<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> lectures<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            queue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">}</span>\n         queue<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span>ti<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>","frontmatter":{"date":"August 02, 2022","title":"백준 11000 강의실 배정","categories":"알고리즘","author":"sangzun","emoji":"😂"},"fields":{"slug":"/알고리즘/백준11000/"}},"site":{"siteMetadata":{"siteUrl":"https://github.com/sangzun-han","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/알고리즘/알고리즘 기초/","nextSlug":"/알고리즘/재귀함수/","prevSlug":"/알고리즘/백준11000/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}