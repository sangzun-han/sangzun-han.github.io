{"componentChunkName":"component---src-templates-blog-template-js","path":"/알고리즘/기초/","result":{"data":{"cur":{"id":"ca8e4070-0bb6-54c6-80ac-44428080e797","html":"","excerpt":"","frontmatter":{"date":"October 25, 2021","title":"알고리즘","categories":"알고리즘","author":"sangzun","emoji":"🧢"},"fields":{"slug":"/알고리즘/기초/"}},"next":{"id":"3fc8376d-d467-5b77-9a99-ced2558a07a4","html":"","frontmatter":{"date":"July 01, 2021","title":"AI 홈트레이너","categories":"PROJECT","author":"sangzun","emoji":"🧢"},"fields":{"slug":"/PROJECT/fit-sibang/"}},"prev":{"id":"42b705d1-3dff-5534-ba07-94bdd835188d","html":"<h1 id=\"1-변수\" style=\"position:relative;\"><a href=\"#1-%EB%B3%80%EC%88%98\" aria-label=\"1 변수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 변수</h1>\n<p>변수는 하나의 값을 저장하기 위해 확보한 메모리 공간 자체 또는 그 메모리 공간을 식별하기 위해 붙인 이름을 말한다. 간단히 말하자면 변수는 값의 위치를 가리키는 상징적인 이름이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var result = 10 + 20;</code></pre></div>\n<p>10+20은 연산을 통해 새로운 값 30을 생성한다. 연산을 통해 생성된 값 30은 메모리 공간에 저장된다. 이때 메모리에 저장된 값 30을 다시 읽어 들여 재사용할 수 있도록 값이 저장된 메모리 공간에 상징적인 이름을 붙인것이 변수이다.</p>\n<p>변수에 값을 저장하는 것을 <strong>할당(assignment)</strong>이라 하고 변수에 저장된 값을 읽어 들이는 것을 <strong>참조(reference)</strong>라고 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var result = 10 + 20;\nconsole.log(result) // 30</code></pre></div>\n<h1 id=\"2-식별자\" style=\"position:relative;\"><a href=\"#2-%EC%8B%9D%EB%B3%84%EC%9E%90\" aria-label=\"2 식별자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 식별자</h1>\n<p>식별자는 어떤 값을 구별해서 식별할 수 있는 고유한 이름을 말한다. <strong>식별자는 값이 아니라 메모리 주소를 기억하고 있다.</strong>\n식별자로 값을 구별해서 식별한다는 것은 식별자가 기억하고 있는 메모리 주소를 통해 메모리 공간에 저장된 값에 접근할 수 있다는 의미이다.</p>\n<p><img src=\"/identifier.jpg\" alt=\"식별자\"></p>\n<h1 id=\"3변수-선언\" style=\"position:relative;\"><a href=\"#3%EB%B3%80%EC%88%98-%EC%84%A0%EC%96%B8\" aria-label=\"3변수 선언 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.변수 선언</h1>\n<p>변수를 사용하려면 반드시 선언이 필요하다. 변수를 선언할 때는 var, let, const 키워드를 사용한다.</p>\n<p><strong>블록 레벨 스코프(block-level scope)</strong></p>\n<p>모든 코드 블록(함수, if문, for문, while문, try/catch문 등)내에서\n선언된 변수는 코드 블록 내에서만 유효하며 코드 블록 외부에서는 참조할 수 없다.\n즉 코드 블록 내부에서 선언한 변수는 지역변수이다.</p>\n<p><strong>함수 레벨 스코프(function-level scope)</strong></p>\n<p>함수내에서 선언된 변수는 함수 내에서만 유효하며 함수 외부에서는 참조할 수 없다.\n즉 함수 내부에서 선언한 변수는 지역 변수이며 함수 외부에서 선언한 변수는\n모두 전역변수이다.</p>\n<p><strong>var 키워드</strong>는 블록 레벨 스코프를 지원하지 않고 함수 레벨 스코프를 지원한다.\n이로 인해 의도치 않게 전역 변수가 선언되어 오류가 발생 할 수 있다.</p>\n<p>var 키워드는 선언 단계와 초기화 단계가 동시에 진행된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var score; // undefined</code></pre></div>\n<h1 id=\"4-변수-선언-실행-시점과-호이스팅\" style=\"position:relative;\"><a href=\"#4-%EB%B3%80%EC%88%98-%EC%84%A0%EC%96%B8-%EC%8B%A4%ED%96%89-%EC%8B%9C%EC%A0%90%EA%B3%BC-%ED%98%B8%EC%9D%B4%EC%8A%A4%ED%8C%85\" aria-label=\"4 변수 선언 실행 시점과 호이스팅 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 변수 선언 실행 시점과 호이스팅</h1>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">console.log(score); // undefined\nvar score; // 변수 선언</code></pre></div>\n<p>참조에러(ReferenceError)가 발생할 것 같지만 undefined가 출력된다.\n그 이유는 <strong>변수 선언이 소스코드가 한 줄씩 순차적으로 실행되는 시점, 즉 런타임이 아니라 그 이전 단계에서 먼저 실행되기 때문이다.</strong></p>\n<p>이처럼 <strong>변수 선언문이 코드의 선두로 끌어 올려진것처럼 동작하는 자바스크립트 고유의 특징을 변수 호이스팅(variable hoisting)</strong>이라 한다.</p>\n<h1 id=\"5-값의-할당\" style=\"position:relative;\"><a href=\"#5-%EA%B0%92%EC%9D%98-%ED%95%A0%EB%8B%B9\" aria-label=\"5 값의 할당 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. 값의 할당</h1>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var score; // 변수 선언\nscore = 80; // 값의 할당\nvar score = 80;</code></pre></div>\n<p>변수 선언은 소스코드가 순차적으로 실행되는 시점인 런타임 이전에 실행되지만 할당은 런타임에 실행된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">console.log(score); // undefined\nvar score = 80;\nconsole.log(score) // 80</code></pre></div>\n<p><img src=\"/reallocation.jpg\" alt=\"할당\"></p>\n<p>변수에 값을 할당할 때에는 undefined가 저장되어 있던 메모리 공간을 지우고 그 메모리 공간에 새로 저장하는 것이 아니라 새로운 메모리 공간을 확보하고 그곳에 할당값을 저장한다.</p>\n<h1 id=\"6-값의-재할당\" style=\"position:relative;\"><a href=\"#6-%EA%B0%92%EC%9D%98-%EC%9E%AC%ED%95%A0%EB%8B%B9\" aria-label=\"6 값의 재할당 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. 값의 재할당</h1>\n<p>var 키워드로 선언한 변수는 값을 재할당 할 수 있다. 만약 값을 재 할당 할 수 없다면 변수가 아니라 <strong>상수(constant)라</strong> 한다</p>\n<h3 id=\"언매니지드-언어unmanaged-language-vs-매니지드-언어managed-language\" style=\"position:relative;\"><a href=\"#%EC%96%B8%EB%A7%A4%EB%8B%88%EC%A7%80%EB%93%9C-%EC%96%B8%EC%96%B4unmanaged-language-vs-%EB%A7%A4%EB%8B%88%EC%A7%80%EB%93%9C-%EC%96%B8%EC%96%B4managed-language\" aria-label=\"언매니지드 언어unmanaged language vs 매니지드 언어managed language permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>언매니지드 언어(unmanaged language) vs 매니지드 언어(managed language)</h3>\n<p>프로그래밍 언어는 메모리 관리 방식에 따라 언매니지드 언어와 매니지드 언어로 분류할 수 있다.\nC언어 같은 언매니지드 언어는 명시적으로 메모리를 할당하고 해제하기 위해 malloc()과 free()같은 저수준 메모리 제어 기능을 제공한다.\n개발자의 역량에 따라 최적의 성능을 확보 할 수 있지만 그 반대의 경우 치명적 오류를 생산할 수 도 있다.</p>\n<p>자바스크립트 같은 매니지드 언어는 메모리의 할당 및 해제를 위한 메모리 관리 기능을 언어 차원에서 담당하고 개발자의 직접적인 메모리 제어를 허용하지 않는다.\n더 이상 사용하지 않는 메모리의 해제는 <strong>가비지 콜렉터</strong>가 수행하며, 어느정도 일정한 생산성을 확보할 수 있다는 장점이 있지만\n성능 면에서는 어느정도 손실을 감수해야 한다.</p>\n<h1 id=\"7-식별자-네이밍-규칙\" style=\"position:relative;\"><a href=\"#7-%EC%8B%9D%EB%B3%84%EC%9E%90-%EB%84%A4%EC%9D%B4%EB%B0%8D-%EA%B7%9C%EC%B9%99\" aria-label=\"7 식별자 네이밍 규칙 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>7. 식별자 네이밍 규칙</h1>\n<ul>\n<li>예약어는 식별자로 사용 X</li>\n<li>특수문자를 제외한 문자, 숫자 ,_ , $ 포함가능</li>\n<li>숫자로 시작하는것은 허용 X</li>\n<li>자바스크립트은 대소문자를 구별한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var firstName // camelCase\nvar first_name // snake case\nvar FirstName // Pascal Case\nvar strFirstName // Hungarian Case</code></pre></div>","frontmatter":{"date":"November 09, 2021","title":"04. 변수","categories":"javascript","author":"sangzun","emoji":null},"fields":{"slug":"/자바스크립트/04.변수/"}},"site":{"siteMetadata":{"siteUrl":"https://github.com/sangzun-han","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/알고리즘/기초/","nextSlug":"/PROJECT/fit-sibang/","prevSlug":"/자바스크립트/04.변수/"}},"staticQueryHashes":["1073350324","2938748437"]}