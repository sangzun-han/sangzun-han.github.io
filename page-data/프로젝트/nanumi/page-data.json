{"componentChunkName":"component---src-templates-blog-template-js","path":"/프로젝트/nanumi/","result":{"data":{"cur":{"id":"e2b3449d-2419-59f9-9e95-8fc8c7223e58","html":"<p>리액트 네이티브를 이용한 무료나눔 앱을 만들었습니다.</p>\n<p><a href=\"https://play.google.com/store/apps/details?id=com.nanumimobile\">nanumi App</a></p>\n<h2 id=\"프로젝트-컨셉\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%BB%A8%EC%85%89\" aria-label=\"프로젝트 컨셉 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로젝트 컨셉</h2>\n<ul>\n<li>14:00에 물품을 나눔받을 수 있고 나눔받을 수 있는 사람은 선착순 3명으로 지정된다.</li>\n<li>물건을 올린 사람은 3명 중 마음에 드는 사람에 채팅을 하여 거래를 한다.</li>\n</ul>\n<h2 id=\"구현사항\" style=\"position:relative;\"><a href=\"#%EA%B5%AC%ED%98%84%EC%82%AC%ED%95%AD\" aria-label=\"구현사항 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>구현사항</h2>\n<ul>\n<li>react-query의 useInfinityQuery 이용한 무한스크롤, useQuery를 이용한 데이터 fetching</li>\n<li>reocil을 이용한 유저정보, 모달 전역상태관리</li>\n<li>axios interceptor를 이용해서 access_token 재발급</li>\n<li>Webview를 이용해서 카카오 소셜 로그인 구현</li>\n<li>AsyncStorage를 이용해서 로그인이 풀리지 않도록 구현</li>\n<li>stomp/stompjs를 이용한 1:1 채팅 구현</li>\n</ul>\n<h3 id=\"트러블-슈팅\" style=\"position:relative;\"><a href=\"#%ED%8A%B8%EB%9F%AC%EB%B8%94-%EC%8A%88%ED%8C%85\" aria-label=\"트러블 슈팅 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>트러블 슈팅</h3>\n<ul>\n<li>EC2를 제공받아서 하는만큼 서버에 API요청을 보낼 수 있는 시간은 프로젝트 기간동안이었습니다. 리팩토링을 따로 할 시간은 없었기 때문에 구현하면서 이건 아니다 싶은건 백엔드와 소통하면서 바로바로 코드를 고쳐나갔지만 6주라는 짧은시간동안 생각한대로 구현하지 못한 부분이 있습니다.</li>\n</ul>\n<ol>\n<li>\n<p>카카오 소셜 로그인</p>\n<ul>\n<li>\n<p>싸피 교육생들을 대상으로 4일정도 운영을 진행했습니다. 피드백중 회원가입이 불편하다는 의견이 있어 소셜로그인을 추가하기로 했습니다.</p>\n</li>\n<li>\n<p>react-native에는 자체적으로 카카오에 로그인하고 로그아웃하는 <code class=\"language-text\">react-native-kakao-login</code>이라는 라이브러리가 존재합니다. 백엔드쪽에서 이미 피드백을 바탕으로 소셜로그인을 구현한 상태였고 그에 따라서 Webview를 이용해서 웹처럼 소셜 로그인을 구현했습니다.</p>\n</li>\n<li>\n<p>카카오 로그인 시 redirect되는것을 막을 방법을 못찾아서 로그인, 필수활용동의서에 취소를 누를 때에는 Webview의 투명도를 0으로 만들어서 사용자에게는 에러페이지가 보이지않게하고 다시 앱으로 redirect되도록 해결은 했습니다만 올바른 방법은 아니라고 생각합니다.</p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javacsript\"><pre class=\"language-javacsript\"><code class=\"language-javacsript\">&lt;View style={{flex: 1, opacity: opacity ? 0 : 1}}&gt;\r\n   &lt;WebView source={{ uri: `kakao`}}\r\n     injectedJavaScript={INJECTED_JAVASCRIPT}\r\n     onMessage={handleMessage}\r\n     onNavigationStateChange={handleNavigationStataChange}\r\n   /&gt;\r\n&lt;/View&gt;</code></pre></div>\n<h3 id=\"변경-전---변경-후\" style=\"position:relative;\"><a href=\"#%EB%B3%80%EA%B2%BD-%EC%A0%84---%EB%B3%80%EA%B2%BD-%ED%9B%84\" aria-label=\"변경 전   변경 후 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>변경 전 -> 변경 후</h3>\n<div style=\"display:flex\">\n   <img src=\"/nanumi_kakao_visible.gif\" width=\"250\" height=\"500\">\n   <img src=\"/nanumi_kakao_novisible.gif\" width=\"250\" height=\"500\">\n</div>\n</li>\n<li>\n<p>recoil을 통한 모달 전역관리</p>\n<ul>\n<li>\n<p>사실 이 프로젝트에서 전역으로 상태할 변수는 상품데이터, 유저, 모달정도였습니다. 프로젝트를 진행하면서 상품데이터는 어디서도 같은 데이터를 쓰는곳이 없어서 전역으로 상태관리를 하지 않아도 된다고 판단했고 모달,유저정보 정도만 전역으로 상태를 관리했습니다.</p>\n</li>\n<li>\n<p>기존의 모두 각각 모달이 열리는 부모 컴포넌트쪽에서 props를 내려서 관리하고 있었습니다. 모달은 약 10개정도의 모달이 존재했고 모달의 개수가 많아질수록 관리해야 할 상태들과 코드들이 많아져 관리가 힘들어졌습니다. 띠라서 모달의 상태는 따로 관심사를 나눠야 한다는 생각이 들었습니다.</p>\n</li>\n<li>\n<p>모달은 한개의 버튼이 있는 모달, 두개의 버튼이 있는 모달, 카테고리 모달이 존재했고 버튼이 한개인 모달은 <code class=\"language-text\">OneButtonModal</code>, 두개의 버튼이 있는 모달은 <code class=\"language-text\">TwoButtonModal</code>로 선언하여 props로 각 버튼에 대한 이벤트와 해당 모달에 들어갈 title, content, event를 받아서 처리했습니다..</p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// useModal.jsx</span>\r\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useMemo <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useRecoilState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'recoil'</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> modalState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./../state/modal'</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useModal</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>modal<span class=\"token punctuation\">,</span> setModal<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useRecoilState</span><span class=\"token punctuation\">(</span>modalState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">showModal</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> modalType<span class=\"token punctuation\">,</span> modalProps <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token function\">setModal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> modalType<span class=\"token punctuation\">,</span> modalProps <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">hideModal</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token function\">setModal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\r\n      modalType<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\r\n      modalProps<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\r\n        visible<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\r\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token keyword\">return</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> modal<span class=\"token punctuation\">,</span> setModal<span class=\"token punctuation\">,</span> showModal<span class=\"token punctuation\">,</span> hideModal <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>modal<span class=\"token punctuation\">,</span> setModal<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// profile.jsx</span>\r\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleOpenWithdrawalModal</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token function\">showModal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\r\n    modalType<span class=\"token operator\">:</span> <span class=\"token string\">'TwoButtonModal'</span><span class=\"token punctuation\">,</span>\r\n    modalProps<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\r\n      title<span class=\"token operator\">:</span> <span class=\"token string\">'회원탈퇴'</span><span class=\"token punctuation\">,</span>\r\n      content<span class=\"token operator\">:</span> <span class=\"token string\">'정말 탈퇴하시겠어요?'</span><span class=\"token punctuation\">,</span>\r\n      visible<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\r\n      onConfirm<span class=\"token operator\">:</span> handleDeleteUser<span class=\"token punctuation\">,</span>\r\n      onCancel<span class=\"token operator\">:</span> hideModal<span class=\"token punctuation\">,</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token constant\">MODAL_TYPES</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\r\n  TransactionCompleteModal<span class=\"token operator\">:</span> <span class=\"token string\">'TransactionCompleteModal'</span><span class=\"token punctuation\">,</span>\r\n  MatchingUserModal<span class=\"token operator\">:</span> <span class=\"token string\">'MatchingUserModal'</span><span class=\"token punctuation\">,</span>\r\n  HomeCategoryModal<span class=\"token operator\">:</span> <span class=\"token string\">'HomeCategoryModal'</span><span class=\"token punctuation\">,</span>\r\n  CreateCategoryModal<span class=\"token operator\">:</span> <span class=\"token string\">'CreateCategoryModal'</span><span class=\"token punctuation\">,</span>\r\n  OneButtonModal<span class=\"token operator\">:</span> <span class=\"token string\">'OneButtonModal'</span><span class=\"token punctuation\">,</span>\r\n  TwoButtonModal<span class=\"token operator\">:</span> <span class=\"token string\">'TwoButtonModal'</span><span class=\"token punctuation\">,</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">const</span> <span class=\"token constant\">MODAL_COMPONENTS</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token punctuation\">[</span><span class=\"token constant\">MODAL_TYPES</span><span class=\"token punctuation\">.</span>TransactionCompleteModal<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> TransactionCompleteModal<span class=\"token punctuation\">,</span>\r\n  <span class=\"token punctuation\">[</span><span class=\"token constant\">MODAL_TYPES</span><span class=\"token punctuation\">.</span>MatchingUserModal<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> MatchingUserModal<span class=\"token punctuation\">,</span>\r\n  <span class=\"token punctuation\">[</span><span class=\"token constant\">MODAL_TYPES</span><span class=\"token punctuation\">.</span>HomeCategoryModal<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> HomeCategoryModal<span class=\"token punctuation\">,</span>\r\n  <span class=\"token punctuation\">[</span><span class=\"token constant\">MODAL_TYPES</span><span class=\"token punctuation\">.</span>CreateCategoryModal<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> CreateCategoryModal<span class=\"token punctuation\">,</span>\r\n  <span class=\"token punctuation\">[</span><span class=\"token constant\">MODAL_TYPES</span><span class=\"token punctuation\">.</span>OneButtonModal<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> OneButtonModal<span class=\"token punctuation\">,</span>\r\n  <span class=\"token punctuation\">[</span><span class=\"token constant\">MODAL_TYPES</span><span class=\"token punctuation\">.</span>TwoButtonModal<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> TwoButtonModal<span class=\"token punctuation\">,</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">GlobalModal</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>modal<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useRecoilState</span><span class=\"token punctuation\">(</span>modalState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>modal<span class=\"token operator\">?.</span>modalType<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token keyword\">const</span> ModalComponent <span class=\"token operator\">=</span> <span class=\"token constant\">MODAL_COMPONENTS</span><span class=\"token punctuation\">[</span>modal<span class=\"token punctuation\">.</span>modalType<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token keyword\">return</span> ModalComponent <span class=\"token operator\">?</span> <span class=\"token operator\">&lt;</span>ModalComponent <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>modal<span class=\"token operator\">?.</span>modalProps<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span> <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> GlobalModal<span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>소켓 연결</p>\n</li>\n</ol>\n<ul>\n<li>\n<p>백엔드쪽에서 <code class=\"language-text\">STOMP</code>를 이용해서 소켓을 구현했습니다. 프론트에서는 <code class=\"language-text\">stomp/stompjs</code>를 이용해서 소켓 연결을 시도했으나 연결이 되지 않았습니다. 같은 코드로 웹에서 테스트해보니 웹쪽에서는 문제없이 연결이 되었습니다.</p>\n<p><a href=\"https://stomp-js.github.io/workaround/stompjs/rx-stomp/react-native-additional-notes.html\">stomp-js</a></p>\n</li>\n<li>\n<p><code class=\"language-text\">stomp-js</code> 공식문서에서 문제점을 찾을 수 있었습니다. 디버그 모드에서는 실제 브라우저에서 실행되어 TextEncoder/TextDecoder가 사용 가능하지만 프로덕션 모드에서는 TextEncoder/TextDecoder가 사용 불가능하기 때문에 동작하지 않는다고 합니다.\r\n<code class=\"language-text\">text-encoding</code>을 설치하고 import하는 것으로 간단하게 해결할 수 있었습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">npm install text<span class=\"token operator\">-</span>encoding\r\n\r\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> encoding <span class=\"token keyword\">from</span> <span class=\"token string\">'text-encoding'</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n<ol start=\"4\">\n<li>플레이 스토어 배포\r\n<img src=\"/google_reject.png\" /></li>\n</ol>\n<ul>\n<li>\n<p>플레이 스토어의 배포 과정중 약 7번의 reject를 당했습니다.</p>\n</li>\n<li>\n<p>배포를 처음 해보기도 하지만 앱의 환경에 대해 무지하다 보니 아무리 거절 사유를 찾아봐도 뭐를 뜻하는지 몰랐습니다. 특히나\r\n아래와 같은 거절 사유를 받았는데 제 <code class=\"language-text\">AndroidManifest.xml</code>에는 MANAGE_EXTERNAL_STORAGE 권한을 요청한 코드를 찾지 못했습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"markdown\"><pre class=\"language-markdown\"><code class=\"language-markdown\">기능이 이 권한을 사용하지 않도록 앱을 업데이트하세요.\r\n앱에서 MANAGE_EXTERNAL_STORAGE 권한 액세스가 필요하지 않은 경우,\r\n정책 검토 요구사항을 충족하려면 앱의 매니페스트에서 이 권한을 삭제해야 합니다.</code></pre></div>\n</li>\n<li>\n<p>며칠을 찾아본 결과 저는 이미지 업로드를 위해 <code class=\"language-text\">@baronha/react-native-multiple-image-picker</code>를 사용하고 있었습니다. 이 라이브러리 안에 <code class=\"language-text\">MANAGE_EXTERNAL_STORAGE</code> 권한을 요청하고 있었고 이 것을 제거하고 다시 심사를 받아본 결과 승인을 받을 수 있었습니다.</p>\n</li>\n</ul>\n<h3 id=\"아쉬웠던-점\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%89%AC%EC%9B%A0%EB%8D%98-%EC%A0%90\" aria-label=\"아쉬웠던 점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아쉬웠던 점</h3>\n<ul>\n<li>\n<p>데이터베이스로 <code class=\"language-text\">mongodb</code>와 <code class=\"language-text\">mysql</code>을 사용했습니다. 그 중에 채팅방과 채팅과 관련된 내용만 <code class=\"language-text\">mongodb</code>에 저장하고 그 외 모든 정보는 mysql에 저장했습니다.</p>\n</li>\n<li>\n<p>회원정보를 수정하면 <code class=\"language-text\">mysql</code>의 유저정보가 업데이트 되고 <code class=\"language-text\">mongodb</code>에 있는 채팅과 관련된 유저들의 정보는 따로 업데이트가 이루어지지 않았습니다. 데이터의 불일치가 있었기 때문에 프론트에서는 채팅에서 회원과 관련된 정보를 제거했습니다. 기간이 조금 더 있었다면 해결 할 수 있는 문제라 아쉬웠습니다.</p>\n</li>\n</ul>","excerpt":"리액트 네이티브를 이용한 무료나눔 앱을 만들었습니다. nanumi App 프로젝트 컨셉 14:00에 물품을 나눔받을 수 있고 나눔받을 수 있는 사람은 선착순 3명으로 지정된다. 물건을 올린 사람은 3명 중 마음에 드는 사람에 채팅을 하여 거래를 한다. 구현사항 react-query의 useInfinityQuery 이용한 무한스크롤, useQuery를 이용한 데이터 fetching reocil을 이용한 유저정보, 모달 전역상태관리 axios interceptor를 이용해서 access_token 재발급 Webview를 이용해서 카카오 소셜 로그인 구현 AsyncStorage를 이용해서 로그인이 풀리지 않도록 구현 stomp/stompjs를 이용한 1:1 채팅 구현 트러블 슈팅 EC2를 제공받아서 하는만큼 서버에 API요청을 보낼 수 있는 시간은 프로젝트 기간동안이었습니다. 리팩토링을 따로 할 시간은 없었기 때문에 구현하면서 이건 아니다 싶은건 백엔드와 소통하면서 바로바로 코드를 고쳐…","frontmatter":{"date":"May 22, 2023","title":"나누미","categories":"프로젝트","author":"sangzun","emoji":"😂"},"fields":{"slug":"/프로젝트/nanumi/"}},"next":{"id":"7fdf8f5b-a9fa-5a1e-b7cb-5c97440660fa","html":"<h3 id=\"백준-2473-세-용액\" style=\"position:relative;\"><a href=\"#%EB%B0%B1%EC%A4%80-2473-%EC%84%B8-%EC%9A%A9%EC%95%A1\" aria-label=\"백준 2473 세 용액 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>백준 2473. 세 용액</h3>\n<ul>\n<li>2470번 두 용액 문제와 유사합니다. 다른점이라면 2470번 문제는 용액 두개를 선택해서 0과 가까운 것을 찾는거고\r\n이 문제는 3개의 용액을 선택해서 0과 가까운것을 찾는것입니다.</li>\n</ul>\n<ol>\n<li>투 포인터</li>\n</ol>\n<ul>\n<li>2470번과 비슷하게 투 포인터로 풀었습니다. 단 주의해야할점은 투 포인터로는 두 가지의 용액밖에 선택할 수 없기 때문에 반복문 하나를 통해서 하나의 용액을 고정시켜놓고 투포인터를 돌려야 합니다. 따라서 시간복잡도는 O(N^2)이고 시간제한 1초안에 들어올수 있다고 판단했습니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">{</span>\r\n        <span class=\"token class-name\">BufferedReader</span> br <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token class-name\">StringTokenizer</span> st<span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">int</span> <span class=\"token class-name\">N</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>br<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">long</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">N</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\n        st <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringTokenizer</span><span class=\"token punctuation\">(</span>br<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token class-name\">N</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n            nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">.</span><span class=\"token function\">nextToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span>\r\n\r\n        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">long</span> ans <span class=\"token operator\">=</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">long</span> ansL <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">long</span> ansR <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">long</span> ansC <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\r\n\r\n        <span class=\"token comment\">// k값하나 고정</span>\r\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k<span class=\"token operator\">&lt;</span><span class=\"token class-name\">N</span><span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n            <span class=\"token keyword\">int</span> left <span class=\"token operator\">=</span> k<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token keyword\">int</span> right <span class=\"token operator\">=</span> <span class=\"token class-name\">N</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;</span> right <span class=\"token operator\">&amp;&amp;</span> right<span class=\"token operator\">>=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>left<span class=\"token operator\">==</span>k<span class=\"token punctuation\">)</span> left<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\r\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>right<span class=\"token operator\">==</span>k<span class=\"token punctuation\">)</span> right<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\r\n                <span class=\"token keyword\">long</span> sum <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> ans<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n                    ans <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n                    ansL <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\n                    ansR <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\n                    ansC <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\n                <span class=\"token punctuation\">}</span>\r\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>sum <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> left<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\r\n                <span class=\"token keyword\">else</span> right<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token punctuation\">}</span>\r\n        <span class=\"token punctuation\">}</span>\r\n\r\n        <span class=\"token keyword\">long</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> ansArr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\n        ansArr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ansL<span class=\"token punctuation\">;</span>\r\n        ansArr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ansR<span class=\"token punctuation\">;</span>\r\n        ansArr<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ansC<span class=\"token punctuation\">;</span>\r\n        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>ansArr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>ansArr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span>\r\n\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<img alt=\"스크린샷 2022-12-25 오전 9 42 49\" src=\"https://user-images.githubusercontent.com/57563053/209454133-e4da4549-d493-4807-8fd5-d3dbd207f284.png\">","frontmatter":{"date":"December 24, 2022","title":"백준 2473 세 용액","categories":"알고리즘","author":"sangzun","emoji":"😂"},"fields":{"slug":"/알고리즘/2473/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://github.com/sangzun-han","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/프로젝트/nanumi/","nextSlug":"/알고리즘/2473/","prevSlug":""}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}