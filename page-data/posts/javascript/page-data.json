{"componentChunkName":"component---src-templates-category-template-js","path":"/posts/javascript","result":{"pageContext":{"currentCategory":"javascript","categories":["All","javascript","intervirew","알고리즘","PROJECT"],"edges":[{"node":{"id":"90a2b090-eaa8-5597-a0dd-5fc70e8611cb","excerpt":"1. var 키워드의 문제점 변수 중복 선언 허용 함수 레벨 스코프 : var 키워드로 선언한 변수는 오로지 함수의 코드 블록만을 지역 스코프로 인정한다. 따라서 함수 외부에서 var 키워드로 선언한 변수는 코드 블록 내에서 선언해도 모두 전역 변수가 된다. 변수 호이스팅 : 변수 선언문 이전에 변수를 참조하는것은 변수 호이스팅에 의해 에러를 발생시키지는 않지만 프로그램의 흐름상 맞지 않을뿐더러 가독성을 떨어뜨리고 오류를 발생시킬 여지를 남긴다. 2. let 키워드 변수 중복 선언 금지 블록 레벨 스코프 변수 호이스팅 : let키워드로 선언한 변수는 선언단계와 초기화단계가 분리되어 진행된다. 만약 초기화 되기 이전에 변수에 접근하려고 하면 참조 에러가 발생한다. 스코프의 시작지점부터 변수를 참조할 수 없는 구간을 일시적 사각지대(Temporal Dead Zone) TDZ 라고 부른다. 3. 전역객체와 let let 키워드로 선언된 전역 변수는 전역 객체의 프로퍼티가 아니다. 4. …","fields":{"slug":"/자바스크립트/15.let,const키워드와 블록레벨 스코프/"},"frontmatter":{"categories":"javascript","title":"15. let, const 키워드와 블록 레벨 스코프","date":"November 30, 2021"}},"next":{"fields":{"slug":"/자바스크립트/14.전역변수의 문제점/"}},"previous":null},{"node":{"id":"eacaa79a-7be0-5761-bbb0-05e2061e38cf","excerpt":"1. 변수의 생명주기 1-1. 지역변수의 생명주기 변수는 선언에 의해 생성되고 할당을 통해 값을 갖는다. 그리고 언젠가 소멸한다. 즉 변수는 생명주기(Life Cycle)가 있다. 변수에 생명주기가 없다면 한번 선언된 변수는 영원히 메모리 공간을 점유하게 된다.\n지역변수의 생명주기는 함수의 생명주기와 일치한다. 변수의 생명주기는 메모리 공간이 확보(allocate)된 시점부터 메모리 공간이 해제(release)되어 가용 메모리풀(memory pool)에 반환되는 시점까지다. 함수 내부에서 선언된 지역 변수는 함수가 생성한 스코프에 등록된다. 할당된 메모리 공간은 더 이상 그 누구도 참조하지 않을 때 가비지 콜렉터에 의해 해제되어 가용 메모리 풀에 반환된다. 즉 누군가 메모리 공간을 참조하고 있으면 해제되지 않고 확보된 상태로 남아 있게 된다. 마찬가지로 누군가 스코프를 참조하고 있으면 스코프는 소멸하지 않고 생존하게 된다. 1-2. 전역변수의 생명주기 전역코드는 명시적인 호출없이 …","fields":{"slug":"/자바스크립트/14.전역변수의 문제점/"},"frontmatter":{"categories":"javascript","title":"14. 전역변수의 문제점","date":"November 30, 2021"}},"next":{"fields":{"slug":"/자바스크립트/11.원시 값과 객체의 비교/"}},"previous":{"fields":{"slug":"/자바스크립트/15.let,const키워드와 블록레벨 스코프/"}}},{"node":{"id":"83f6605a-d5de-5f5a-9d9d-c6986a2e1db1","excerpt":"원시타입의 값은 변경 불가능한 값(immutable value)이다. 객체는 변경 가능한 값이다. 원시 값을 변수에 할당하면 변수(확보된 메모리 공간)에는 실제 값이 저장된다. 객체를 변수에 할당하면 변수(확보된 메모리 공간)에는 참조 값이 저장된다. 원시 값을 갖는 변수를 다른 변수에 할당하면 원본의 원시 값이 복사되어 전달된다. 이를 값에 의한 전달(pass by value)라고 한다. 객체를 가리키는 변수를 다른 변수에 할당하면 원본의 참조 값이 복사되어 전달된다. 이를 참조에 의한 전달(pass by reference)라고 한다. 1. 원시 값 원시 타입(primitive type)의 값, 즉 원시 값은 변경 불가능한 값이다. (read only) 데이터의 신뢰성 보장  변경 불가능하다는 것은 변수가 아니라 값에 의한 진술이다. \nprimitive 변수가 참조하던 메모리 공간의 주소가 변경된 이유는 변수에 할당된 원시 값이 변경 불가능한 값이기 때문이다. 만약 원시값이 변경…","fields":{"slug":"/자바스크립트/11.원시 값과 객체의 비교/"},"frontmatter":{"categories":"javascript","title":"11. 원시 값과 객체의 비교","date":"November 21, 2021"}},"next":{"fields":{"slug":"/자바스크립트/10.객체 리터럴/"}},"previous":{"fields":{"slug":"/자바스크립트/14.전역변수의 문제점/"}}},{"node":{"id":"bc81444a-6202-503e-85e2-56080b0e60dd","excerpt":"1. 객체 자바스크립트는 객체(Object) 기반의 프로그래밍 언어이며, 자바스크립트를 구성하는 거의 ‘모든 것’이 객체다 원시값을 제외한 나머지값은 모두 객체다. 객체는 0개 이상의 프로퍼티로 구성된 집합이며 프로퍼티는 key와 value로 구성된다. 프로퍼티의 값이 함수일 경우. 일반 함수와 구분하기 위해 메서드(method)라고 부른다. 2. 객체 리터럴에 의한 객체 생성 자바스크립트는 프로토타입 기반 객체지향 언어로서 클래스 기반객체지향 언어와는 달리 다양한 객체 생성 방법을 지원한다. 객체 리터럴 Object 생성 함수 생성자 함수 Object.create 메서드 클래스 (ES6) 객체 리터럴은 중괄호({…})내에 0개 이상의 프로퍼티를 정의한다. 변수에 할당되는 시점에 자바스크립트 엔진은 리터럴을 해석해 객체를 생성한다 만약 중괄호 내에 프로퍼티를 정의하지 않으면 빈 객체가 생성된다. 객체 리터럴의 중괄호는 코드블록을 의미하지 않는다. 코드 블록의 중괄호 뒤에는 세미콜론…","fields":{"slug":"/자바스크립트/10.객체 리터럴/"},"frontmatter":{"categories":"javascript","title":"10. 객체 리터럴","date":"November 19, 2021"}},"next":{"fields":{"slug":"/자바스크립트/09.타입변환과 단축 평가/"}},"previous":{"fields":{"slug":"/자바스크립트/11.원시 값과 객체의 비교/"}}},{"node":{"id":"21f6aad8-9d7b-5f96-ad41-00e298008d9c","excerpt":"1. 타입변환이란 자바스크립트의 모든 값은 타입이 있다. 값의 타입은 개발자의 의도에 따라 다른 타입으로 변환할 수 있다. 개발자가 의도적으로 값의 타입을 변환하는 것을 명시적 타입변환(explict coercion) 또는 타입 캐스팅(type casting)이라 한다. 명시적 타입 변환이나 암묵적 타입 변환이 기존 원시값을 직접 변경하는 것은 아니다. 원시 값은 변경 불가능한 값이므로 변경할 수 없다. 자바스크립트 엔진은 x + ’ ‘을 평가하기 위해 x 변수의 숫자 값을 바탕으로 새로운 문자열 값 ‘10’을 생성하고 이것으로 표현식 ‘10’+ ’ ‘을 평가한다. 이때 \n‘10’은 x변수에 재할당되지 않는다. 즉 암묵적 타입변환은 기존 변수 값을 재할당하여 변경하는 것이 아니다. 2. 암묵적 타입 변환 표현식을 평가할 때 코드의 문맥에 부합하지 않는 다양한 상황이 발생할 수 있다. 이때 자바스크립트는 가급적 에러를 발생시키지 않도록 암묵적 타입 변환을 통해 표현식을 평가한다. 자…","fields":{"slug":"/자바스크립트/09.타입변환과 단축 평가/"},"frontmatter":{"categories":"javascript","title":"09. 타입변환과 단축 평가","date":"November 18, 2021"}},"next":{"fields":{"slug":"/INTERVIEW/interview/"}},"previous":{"fields":{"slug":"/자바스크립트/10.객체 리터럴/"}}},{"node":{"id":"578f3370-5c06-5e2e-ba6e-625a711313d4","excerpt":"1. 블록문 블록문(block statement)은 0개 이상의 문을 중괄호로 묶은 것으로, 코드 블록 또는 블록이라고 부르기도 한다. 자바스크립트는 블록문을 하나의 실행 단위로 취급한다. 2. 조건문 조건문(conditional statement)는 주어진 조건식의 평가결과에 따라 코드 블록의 실행을 결정한다. 자바스크립트는 if else문과 switch문으로 두 가지 조건문을 제공한다. if문의 조건식은 boolean값으로 평가되어야 한다. boolean값이 아닐경우 암묵적으로 boolean값으로 강제 변환되어 실행할 코드 블록을 결정한다. 대부분의 if else문은 삼항 조건 연산자로 바꿔 쓸수 있다. 조건에 따라 값을 결정하여 변수에 할당하는 경우 if else 보다 삼항 조건 연산자를 사용하는 편이 가독성이 좋다. 하지만 조건에 따라 실행해야 할 내용이 복잡하여 여러 줄의 문이 필요하다면 if else문을 사용하는 편이 가독성이 좋다. switch문은 주어진 표현식을 평가…","fields":{"slug":"/자바스크립트/08.제어문/"},"frontmatter":{"categories":"javascript","title":"08. 제어문","date":"November 13, 2021"}},"next":{"fields":{"slug":"/자바스크립트/07.연산자/"}},"previous":{"fields":{"slug":"/INTERVIEW/interview/"}}},{"node":{"id":"a60b7614-b3fd-5820-a945-6e2996711bdb","excerpt":"연산자(operator)는 하나 이상의 표현식을 대상으로 산술, 할당, 비교, 논리, 타입, 지수연산등을 수행하여 하나의 값을 만든다. 이때 연산의 대상을 피연산자(operand)라고 한다. 피연산자는 ‘값’이라는 역할을 하며 연산자는 ‘피연산자를 연산하여 새로운 값을 만든다.’ 1. 산술 연산자 산술 연산자는 피연산자를 대상으로 수학적 계산을 수행해 새로운 숫자 값을 만든다. 산술연산이 불가능한 경우 NaN을 반환한다. 1-1. 이항 산술 연산자 모든 이항 산술 연산자는 피연산자의 값을 변경하는 부수효과(side effect)가 없다. 즉 피연산자의 값이 바뀌는 경우는 없고 언제나 새로운 값을 만들어 낸다. 1-2. 단항 산술 연산자 단항 산술 연산자는 1개의 피연산자를 산술 연산하여 숫자 값을 만든다.\n증가/감소(++/—) 연산자는 피연산자의 값을 변경하는 부수효과가 있다.\n즉 증가/감소 연산을 하면 피연산자의 값을 변경하는 암묵적 할당이 이루어진다. 숫자 타입이 아닌 피연산자…","fields":{"slug":"/자바스크립트/07.연산자/"},"frontmatter":{"categories":"javascript","title":"07. 연산자","date":"November 12, 2021"}},"next":{"fields":{"slug":"/자바스크립트/06.데이터 타입/"}},"previous":{"fields":{"slug":"/자바스크립트/08.제어문/"}}},{"node":{"id":"9dd21e96-2ce1-55b2-9df8-76554309656c","excerpt":"데이터타입은 값의 종류를 말한다. 자바스크립트는 7개의 데이터 타입을 제공한다.\n7개의 데이터 타입은 원시타입(primitive type)입과 객체타입(object/reference type)으로 분류할 수 있다. 1. 숫자 타입 숫자 타입의 값은 모든 수를 실수로 처리하며 정수만 표현하기 위한 데이터 타입이 존재하지 않는다. 정수, 실수, 2진수, 8진수, 16진수 리터럴은 모두 메모리에 배정밀도 64비트 부동소수점 형식의 2진수로 저장된다. 자바스크립트는 2진수, 8진수, 16진수를 표현하기 위한 데이터 타입을 제공하지 않기 때문에 이들 값을 참조하면 모두 10진수로 해석된다. 2. 문자열 타입 문자열 타입은 텍스트 데이터를 나타내는데 사용한다.\n문자열은  ”, \"\", 으로 텍스트를 감싼다.\n다른타입의 값과 달리 문자열을 따옴표로 감싸는 이유는 키워드나 식별자 같은 토큰과 구분하기 위해서다. 만약 문자열을 따옴표로 감싸지 않으면 자바스크립트 엔진은 키워드나 식별자 같은 토큰으로…","fields":{"slug":"/자바스크립트/06.데이터 타입/"},"frontmatter":{"categories":"javascript","title":"06. 데이터타입","date":"November 11, 2021"}},"next":{"fields":{"slug":"/자바스크립트/05.표현식과 문/"}},"previous":{"fields":{"slug":"/자바스크립트/07.연산자/"}}},{"node":{"id":"7327ae1f-2626-53da-b042-638a90c2aef3","excerpt":"1. 값 값(value)은 식(expression)이 평가(evaluate)되어 생성된 결과를 말한다. 2. 리터럴 리터럴(literal)은  사람이 이해할 수 있는 문자 또는 약속된 기호를 사용해 값을 생성하는 표기법(notation)을 말한다.\n자바스크립트 엔진은 코드가 실행되는 시점인 런타임에 리터럴을 평가해 값을 생성한다. 즉 리터럴은 값을 생성하기 위해 미리 약속한 표기법이라고 할 수 있다. 리터럴 예시 비고 정수 리터럴 100  부동소수점 리터럴 10.5  2진수 리터럴 0b010001 0b로 시작 8진수 리터럴 0o101 ES6에서 도입 0o로 시작 16진수 리터럴 0x41 ES6에서 도입 0x로 시작 문자열 리터럴 ‘Hello’  불리언 리터럴 true false  null 리터럴 null  undefined 리터럴 undefined  객체 리터럴 {name: ‘Lee’, address: ‘Seoul’}  배열 리터럴 1,2,3  함수 리터럴 function() {}…","fields":{"slug":"/자바스크립트/05.표현식과 문/"},"frontmatter":{"categories":"javascript","title":"05. 표현식과 문","date":"November 10, 2021"}},"next":{"fields":{"slug":"/자바스크립트/04.변수/"}},"previous":{"fields":{"slug":"/자바스크립트/06.데이터 타입/"}}},{"node":{"id":"42b705d1-3dff-5534-ba07-94bdd835188d","excerpt":"1. 변수 변수는 하나의 값을 저장하기 위해 확보한 메모리 공간 자체 또는 그 메모리 공간을 식별하기 위해 붙인 이름을 말한다. 간단히 말하자면 변수는 값의 위치를 가리키는 상징적인 이름이다. 10+20은 연산을 통해 새로운 값 30을 생성한다. 연산을 통해 생성된 값 30은 메모리 공간에 저장된다. 이때 메모리에 저장된 값 30을 다시 읽어 들여 재사용할 수 있도록 값이 저장된 메모리 공간에 상징적인 이름을 붙인것이 변수이다. 변수에 값을 저장하는 것을 할당(assignment)이라 하고 변수에 저장된 값을 읽어 들이는 것을 참조(reference)라고 한다. 2. 식별자 식별자는 어떤 값을 구별해서 식별할 수 있는 고유한 이름을 말한다. 식별자는 값이 아니라 메모리 주소를 기억하고 있다.\n식별자로 값을 구별해서 식별한다는 것은 식별자가 기억하고 있는 메모리 주소를 통해 메모리 공간에 저장된 값에 접근할 수 있다는 의미이다. 식별자 3.변수 선언 변수를 사용하려면 반드시 선언이 …","fields":{"slug":"/자바스크립트/04.변수/"},"frontmatter":{"categories":"javascript","title":"04. 변수","date":"November 09, 2021"}},"next":{"fields":{"slug":"/알고리즘/기초/"}},"previous":{"fields":{"slug":"/자바스크립트/05.표현식과 문/"}}}]}},"staticQueryHashes":["1073350324","2938748437"]}