{"componentChunkName":"component---src-templates-blog-template-js","path":"/INTERVIEW/interview/","result":{"data":{"cur":{"id":"c3072eda-9e6d-5d5a-be24-834de8586e49","html":"<h3 id=\"9-what-is-the-difference-between--and--operators\" style=\"position:relative;\"><a href=\"#9-what-is-the-difference-between--and--operators\" aria-label=\"9 what is the difference between  and  operators permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>9. What is the difference between == and === operators</h3>\n<p>JavaScript provides both strict(===, !==) and type-converting(==, !=) equality comparison. </p>\n<p>The strict operators take type of variable in consideration, while non-strict operators make type correction/conversion based upon values of variables. The strict operators follow the below conditions for different types,</p>\n<ul>\n<li>Two strings are strictly equal when they have the same sequence of characters, same length, and same characters in corresponding positions.</li>\n<li>\n<p>Two numbers are strictly equal when they are numerically equal. i.e, Having the same number value. There are two special cases in this,</p>\n<p>a.NaN is not equal to anything, including NaN.</p>\n<p>b.Positive and negative zeros are equal to one another.</p>\n</li>\n<li>Two Boolean operands are strictly equal if both are true or both are false.</li>\n<li>Two objects are strictly equal if they refer to the same Object.</li>\n<li>Null and Undefined types are not equal with ===, but equal with ==. i.e, null===undefined —> false but null==undefined —> true</li>\n</ul>\n<p>—해석—</p>\n<p>JS는 strict와 equlity comparion을 제공한다.</p>\n<p>strict 연산자는 변수의 타입을 고려하고 non-strict 연산자는 변수의 값을 고려한다. strict 연산자는 타입이 다르면 아래의 조건에 따른다.</p>\n<ul>\n<li>두 문자열은 문자의 순서,길이,위치가 같아야한다.</li>\n<li>\n<p>두 숫자는 수학적으로 같아야 한다. 즉 숫자값이 같아야한다. 두가지 특별한 경우</p>\n<p>a. NaN은 NaN을 포함하여 어떤것도 같지 않다.</p>\n<p>b. +0과 -0은 같다.</p>\n</li>\n<li>boolean은 둘다 true 또는 둘다 false일때 같다.</li>\n<li>null과 undefined타입은 ===로 비교할때 같지 않다 ==로 비교할때는 같다.</li>\n</ul>\n<h3 id=\"17-what-is-the-difference-between-let-and-var\" style=\"position:relative;\"><a href=\"#17-what-is-the-difference-between-let-and-var\" aria-label=\"17 what is the difference between let and var permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>17. What is the difference between let and var</h3>\n<table>\n<thead>\n<tr>\n<th>var</th>\n<th>let</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>It is been available from the beginning of JavaScript</td>\n<td>Introduced as part of ES6</td>\n</tr>\n<tr>\n<td>It has function scope</td>\n<td>It has block scope</td>\n</tr>\n<tr>\n<td>Variables will be hoisted</td>\n<td>Hoisted but not initalized</td>\n</tr>\n</tbody>\n</table>\n<p>—해석—</p>\n<table>\n<thead>\n<tr>\n<th>var</th>\n<th>let</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>자바스크립트 초기부터 사용할 수 있었다.</td>\n<td>ES6에서 도입되었다.</td>\n</tr>\n<tr>\n<td>function scope</td>\n<td>block scope</td>\n</tr>\n<tr>\n<td>변수가 호이스팅 된다.</td>\n<td>호이스팅 되지만 초기화는 되지 않는다.</td>\n</tr>\n</tbody>\n</table>\n<p><a href=\"https://github.com/sudheerj/javascript-interview-questions\">질문 목록</p>","excerpt":"9. What is the difference between == and === operators JavaScript provides both strict(===, !==) and type-converting(==, !=) equality comparison.  The strict operators take type of variable in consideration, while non-strict operators make type correction/conversion based upon values of variables. The strict operators follow the below conditions for different types, Two strings are strictly equal when they have the same sequence of characters, same length, and same characters in corresponding p…","frontmatter":{"date":"November 17, 2021","title":"interview","categories":"intervirew","author":"sangzun","emoji":null},"fields":{"slug":"/INTERVIEW/interview/"}},"next":{"id":"578f3370-5c06-5e2e-ba6e-625a711313d4","html":"<h1 id=\"1-블록문\" style=\"position:relative;\"><a href=\"#1-%EB%B8%94%EB%A1%9D%EB%AC%B8\" aria-label=\"1 블록문 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 블록문</h1>\n<p>블록문(block statement)은 0개 이상의 문을 중괄호로 묶은 것으로, 코드 블록 또는 블록이라고 부르기도 한다. 자바스크립트는 블록문을 하나의 실행 단위로 취급한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n  var foo = 10;\n}\n\nvar x = 1;\nif (x &lt; 10){\n  x++;\n}\n\nfunction sum(a,b) {\n  return a + b ;\n}</code></pre></div>\n<h1 id=\"2-조건문\" style=\"position:relative;\"><a href=\"#2-%EC%A1%B0%EA%B1%B4%EB%AC%B8\" aria-label=\"2 조건문 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 조건문</h1>\n<p>조건문(conditional statement)는 주어진 조건식의 평가결과에 따라 코드 블록의 실행을 결정한다. 자바스크립트는 if else문과 switch문으로 두 가지 조건문을 제공한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">if (조건식) {\n\n} else if(조건식) {\n\n} else {\n\n}</code></pre></div>\n<p>if문의 조건식은 boolean값으로 평가되어야 한다. boolean값이 아닐경우 암묵적으로 boolean값으로 강제 변환되어 실행할 코드 블록을 결정한다.</p>\n<p>대부분의 if else문은 삼항 조건 연산자로 바꿔 쓸수 있다. 조건에 따라 값을 결정하여 변수에 할당하는 경우 if else 보다 삼항 조건 연산자를 사용하는 편이 가독성이 좋다. 하지만 조건에 따라 실행해야 할 내용이 복잡하여 여러 줄의 문이 필요하다면 if else문을 사용하는 편이 가독성이 좋다.</p>\n<p>switch문은 주어진 표현식을 평가하여 그 값과 일치하는 표현식을 갖는 case문으로 실행 흐름을 옮긴다. case문은 상황을 의미하는 표현식을 지정하고 콜론으로 마친다. 그리고 그 뒤로 실행할 문들을 위치 시킨다.</p>\n<p>switch문의 표현식과 일치하는 case문이 없다면 실행순서는 default로 옮긴다. default는 선택사항이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">switch (표현식) {\n  case 표현식1:\n    ~~~~\n    break;\n  case 표현식2:\n    ~~~~\n    break;\n  default:\n    ~~~\n}</code></pre></div>\n<p>switch문은 boolean값보다는 문자열이나 숫자값인 경우가 많다.</p>\n<h1 id=\"3-반복문\" style=\"position:relative;\"><a href=\"#3-%EB%B0%98%EB%B3%B5%EB%AC%B8\" aria-label=\"3 반복문 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 반복문</h1>\n<p>반복문(loop statement)는 조건식의 평가 결과가 참인 경우 코드블록을 실행한다. 그후 조건식을 다시 평가하여 여전히 참인경우 코드 블록을 다시 실행한다. 조건식이 거짓이 될 때 까지 반복한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">자바스크립트는 forEach, for ...in, \nfor ...of문과 같이 반복문을 대체할 수 있는 기능을 제공한다.</code></pre></div>\n<p>for문의 변수 선언문, 조건식, 증감식은 모두 옵셥이므로 반드시 사용할 필요는 없다. 단 어떤 식도 선언하지 않으면 무한루프가 된다.</p>\n<p>while문은 주로 반복횟수가 불명확할때 사용한다. 조건식의 결과가 항상 참이면 무한루프가 된다. 무한루프를 탈출하기 위해서는 if문으로 탈출조건을 만들고 break문으로 코드 블록을 탈출한다.</p>\n<p>do…while문은 코드 블록을 먼저 실행하고 조건식을 평가한다. 즉 코드블록은 무조건 한번이상 실행된다.</p>\n<h1 id=\"4-break문\" style=\"position:relative;\"><a href=\"#4-break%EB%AC%B8\" aria-label=\"4 break문 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. break문</h1>\n<p>break문은 코드 블록을 탈출한다. 레이블문, 반복문 또는 switch문의 코드 블록을 탈출한다. 이 외에 break를 사용하면 문법에러가 발생한다.</p>\n<p><strong>레이블문 (label statement)이란 식별자가 붙은 문을 말한다.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">foo: console.log('foo');</code></pre></div>\n<p>레이불믄은 중첩된 for문 외부로 탈출할때 유용하지만 그 외의 경우에는 권장되지 않는다. 프로그램의 흐름이 복잡해져서 가독성이 나빠지고 오류를 발생시킬 가능성이 높아지기 때문이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">outer: for (var i=0; i&lt;3; i++) {\n  for (var j=0; j&lt;3 j++) {\n    if(i+j === 3) break outer;\n    console.log(`inner[${i},${j}`]);\n  }\n}</code></pre></div>\n<h1 id=\"5-continue문\" style=\"position:relative;\"><a href=\"#5-continue%EB%AC%B8\" aria-label=\"5 continue문 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. continue문</h1>\n<p>continue문은 반복문의 코드 블록 실행을 현 지점에서 중단하고 반복문의 증감식으로 실행흐름을 이동시킨다. 반복문을 탈출하지 않는다.</p>\n<p>if문 내에서 실행해야 할 코드가 길다면 들여쓰기가 한단계 더 깊어지므로 continue문을 사용하는 편이 더 가독성이 좋다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">for (var i=0; i&lt;string.length; i++) {\n  if (string[i]!==search) continue;\n\n  count++;\n  ~~~\n  ~~~\n}</code></pre></div>","frontmatter":{"date":"November 13, 2021","title":"08. 제어문","categories":"javascript","author":"sangzun","emoji":null},"fields":{"slug":"/자바스크립트/08.제어문/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://github.com/sangzun-han","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/INTERVIEW/interview/","nextSlug":"/자바스크립트/08.제어문/","prevSlug":""}},"staticQueryHashes":["1073350324","2938748437"]}