{"componentChunkName":"component---src-templates-blog-template-js","path":"/INTERVIEW/interview/","result":{"data":{"cur":{"id":"76a7a23e-320f-584d-b304-751312a61558","html":"<h3 id=\"9-what-is-the-difference-between--and--operators\" style=\"position:relative;\"><a href=\"#9-what-is-the-difference-between--and--operators\" aria-label=\"9 what is the difference between  and  operators permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>9. What is the difference between == and === operators</h3>\n<p>JavaScript provides both strict(===, !==) and type-converting(==, !=) equality comparison. </p>\n<p>The strict operators take type of variable in consideration, while non-strict operators make type correction/conversion based upon values of variables. The strict operators follow the below conditions for different types,</p>\n<ul>\n<li>Two strings are strictly equal when they have the same sequence of characters, same length, and same characters in corresponding positions.</li>\n<li>\n<p>Two numbers are strictly equal when they are numerically equal. i.e, Having the same number value. There are two special cases in this,</p>\n<p>a.NaN is not equal to anything, including NaN.</p>\n<p>b.Positive and negative zeros are equal to one another.</p>\n</li>\n<li>Two Boolean operands are strictly equal if both are true or both are false.</li>\n<li>Two objects are strictly equal if they refer to the same Object.</li>\n<li>Null and Undefined types are not equal with ===, but equal with ==. i.e, null===undefined —> false but null==undefined —> true</li>\n</ul>\n<p>—해석—</p>\n<p>JS는 strict와 equlity comparion을 제공한다.</p>\n<p>strict 연산자는 변수의 타입을 고려하고 non-strict 연산자는 변수의 값을 고려한다. strict 연산자는 타입이 다르면 아래의 조건에 따른다.</p>\n<ul>\n<li>두 문자열은 문자의 순서,길이,위치가 같아야한다.</li>\n<li>\n<p>두 숫자는 수학적으로 같아야 한다. 즉 숫자값이 같아야한다. 두가지 특별한 경우</p>\n<p>a. NaN은 NaN을 포함하여 어떤것도 같지 않다.</p>\n<p>b. +0과 -0은 같다.</p>\n</li>\n<li>boolean은 둘다 true 또는 둘다 false일때 같다.</li>\n<li>null과 undefined타입은 ===로 비교할때 같지 않다 ==로 비교할때는 같다.</li>\n</ul>\n<h3 id=\"17-what-is-the-purpose-of-the-let-keyword\" style=\"position:relative;\"><a href=\"#17-what-is-the-purpose-of-the-let-keyword\" aria-label=\"17 what is the purpose of the let keyword permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>17. What is the purpose of the let keyword</h3>\n<p>The let statement declares a block scope local variable. Hence the variables defined with let keyword are limited in scope to the block, statement, or expression on which it is used. Whereas variables declared with the var keyword used to define a variable globally, or locally to an entire function regardless of block scope</p>\n<p>—해석—</p>\n<p>let은 block scope 변수를 선언하는데 사용되는 키워드이다. 그러므로 block, statement, expression의 범위를 제한한다. 반면 var는 block scope에 상관없이 전역변수 또는 함수 전체의 지역변수로 정의된다. </p>\n<h3 id=\"18-what-is-the-difference-between-let-and-var\" style=\"position:relative;\"><a href=\"#18-what-is-the-difference-between-let-and-var\" aria-label=\"18 what is the difference between let and var permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>18. What is the difference between let and var</h3>\n<table>\n<thead>\n<tr>\n<th>var</th>\n<th>let</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>It is been available from the beginning of JavaScript</td>\n<td>Introduced as part of ES6</td>\n</tr>\n<tr>\n<td>It has function scope</td>\n<td>It has block scope</td>\n</tr>\n<tr>\n<td>Variables will be hoisted</td>\n<td>Hoisted but not initalized</td>\n</tr>\n</tbody>\n</table>\n<p>—해석—</p>\n<table>\n<thead>\n<tr>\n<th>var</th>\n<th>let</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>자바스크립트 초기부터 사용할 수 있었다.</td>\n<td>ES6에서 도입되었다.</td>\n</tr>\n<tr>\n<td>function scope</td>\n<td>block scope</td>\n</tr>\n<tr>\n<td>변수가 호이스팅 된다.</td>\n<td>호이스팅 되지만 초기화는 되지 않는다.</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"25-what-is-hoistring\" style=\"position:relative;\"><a href=\"#25-what-is-hoistring\" aria-label=\"25 what is hoistring permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>25. What is Hoistring</h3>\n<p>Hoisting is a JavaScript mechanism where variables and function declarations are moved to the top of thier scope before code execution. Remember that JavaScript only hoists declarations, not initialisation.</p>\n<p>—해석—</p>\n<p>코드를 실행하기 전에 변수나 함수를 가장 위로 올리는것을 호이스팅이라고 한다. 자바스크립트는 선언문을 호이스팅하며 초기화는 하지 않는다.</p>\n<h3 id=\"73-what-is-null-value\" style=\"position:relative;\"><a href=\"#73-what-is-null-value\" aria-label=\"73 what is null value permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>73. What is null value</h3>\n<p>The value null represents the intentional absence of any object value. it’s one of JavaScript’s primitive values. The type of null vaule is object. You can empty the variable by setting the value to null.</p>\n<p>—해석—</p>\n<p>null은 값을 의도적으로 없음을 나타낼때 사용하는 대표적인 값이다. js의 원시타입 값중 하나다. null은 object이다. 값을 null로 설정하여 변수를 빈 값으로 채울 수 있다.</p>\n<p><a href=\"https://github.com/sudheerj/javascript-interview-questions\">질문 목록</p>","excerpt":"9. What is the difference between == and === operators JavaScript provides both strict(===, !==) and type-converting(==, !=) equality comparison.  The strict operators take type of variable in consideration, while non-strict operators make type correction/conversion based upon values of variables. The strict operators follow the below conditions for different types, Two strings are strictly equal when they have the same sequence of characters, same length, and same characters in corresponding p…","frontmatter":{"date":"November 17, 2021","title":"interview","categories":"intervirew","author":"sangzun","emoji":null},"fields":{"slug":"/INTERVIEW/interview/"}},"next":{"id":"b968d018-c827-5934-be14-2318a7d6e156","html":"<h1 id=\"1-블록문\" style=\"position:relative;\"><a href=\"#1-%EB%B8%94%EB%A1%9D%EB%AC%B8\" aria-label=\"1 블록문 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 블록문</h1>\n<p>블록문(block statement)은 0개 이상의 문을 중괄호로 묶은 것으로, 코드 블록 또는 블록이라고 부르기도 한다. 자바스크립트는 블록문을 하나의 실행 단위로 취급한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n  var foo = 10;\n}\n\nvar x = 1;\nif (x &lt; 10){\n  x++;\n}\n\nfunction sum(a,b) {\n  return a + b ;\n}</code></pre></div>\n<h1 id=\"2-조건문\" style=\"position:relative;\"><a href=\"#2-%EC%A1%B0%EA%B1%B4%EB%AC%B8\" aria-label=\"2 조건문 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 조건문</h1>\n<p>조건문(conditional statement)는 주어진 조건식의 평가결과에 따라 코드 블록의 실행을 결정한다. 자바스크립트는 if else문과 switch문으로 두 가지 조건문을 제공한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">if (조건식) {\n\n} else if(조건식) {\n\n} else {\n\n}</code></pre></div>\n<p>if문의 조건식은 boolean값으로 평가되어야 한다. boolean값이 아닐경우 암묵적으로 boolean값으로 강제 변환되어 실행할 코드 블록을 결정한다.</p>\n<p>대부분의 if else문은 삼항 조건 연산자로 바꿔 쓸수 있다. 조건에 따라 값을 결정하여 변수에 할당하는 경우 if else 보다 삼항 조건 연산자를 사용하는 편이 가독성이 좋다. 하지만 조건에 따라 실행해야 할 내용이 복잡하여 여러 줄의 문이 필요하다면 if else문을 사용하는 편이 가독성이 좋다.</p>\n<p>switch문은 주어진 표현식을 평가하여 그 값과 일치하는 표현식을 갖는 case문으로 실행 흐름을 옮긴다. case문은 상황을 의미하는 표현식을 지정하고 콜론으로 마친다. 그리고 그 뒤로 실행할 문들을 위치 시킨다.</p>\n<p>switch문의 표현식과 일치하는 case문이 없다면 실행순서는 default로 옮긴다. default는 선택사항이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">switch (표현식) {\n  case 표현식1:\n    ~~~~\n    break;\n  case 표현식2:\n    ~~~~\n    break;\n  default:\n    ~~~\n}</code></pre></div>\n<p>switch문은 boolean값보다는 문자열이나 숫자값인 경우가 많다.</p>\n<h1 id=\"3-반복문\" style=\"position:relative;\"><a href=\"#3-%EB%B0%98%EB%B3%B5%EB%AC%B8\" aria-label=\"3 반복문 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 반복문</h1>\n<p>반복문(loop statement)는 조건식의 평가 결과가 참인 경우 코드블록을 실행한다. 그후 조건식을 다시 평가하여 여전히 참인경우 코드 블록을 다시 실행한다. 조건식이 거짓이 될 때 까지 반복한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">자바스크립트는 forEach, for ...in,\nfor ...of문과 같이 반복문을 대체할 수 있는 기능을 제공한다.</code></pre></div>\n<p>for문의 변수 선언문, 조건식, 증감식은 모두 옵셥이므로 반드시 사용할 필요는 없다. 단 어떤 식도 선언하지 않으면 무한루프가 된다.</p>\n<p>while문은 주로 반복횟수가 불명확할때 사용한다. 조건식의 결과가 항상 참이면 무한루프가 된다. 무한루프를 탈출하기 위해서는 if문으로 탈출조건을 만들고 break문으로 코드 블록을 탈출한다.</p>\n<p>do…while문은 코드 블록을 먼저 실행하고 조건식을 평가한다. 즉 코드블록은 무조건 한번이상 실행된다.</p>\n<h1 id=\"4-break문\" style=\"position:relative;\"><a href=\"#4-break%EB%AC%B8\" aria-label=\"4 break문 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. break문</h1>\n<p>break문은 코드 블록을 탈출한다. 레이블문, 반복문 또는 switch문의 코드 블록을 탈출한다. 이 외에 break를 사용하면 문법에러가 발생한다.</p>\n<p><strong>레이블문 (label statement)이란 식별자가 붙은 문을 말한다.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">foo: console.log('foo');</code></pre></div>\n<p>레이불믄은 중첩된 for문 외부로 탈출할때 유용하지만 그 외의 경우에는 권장되지 않는다. 프로그램의 흐름이 복잡해져서 가독성이 나빠지고 오류를 발생시킬 가능성이 높아지기 때문이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">outer: for (var i=0; i&lt;3; i++) {\n  for (var j=0; j&lt;3 j++) {\n    if(i+j === 3) break outer;\n    console.log(`inner[${i},${j}`]);\n  }\n}</code></pre></div>\n<h1 id=\"5-continue문\" style=\"position:relative;\"><a href=\"#5-continue%EB%AC%B8\" aria-label=\"5 continue문 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. continue문</h1>\n<p>continue문은 반복문의 코드 블록 실행을 현 지점에서 중단하고 반복문의 증감식으로 실행흐름을 이동시킨다. 반복문을 탈출하지 않는다.</p>\n<p>if문 내에서 실행해야 할 코드가 길다면 들여쓰기가 한단계 더 깊어지므로 continue문을 사용하는 편이 더 가독성이 좋다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">for (var i=0; i&lt;string.length; i++) {\n  if (string[i]!==search) continue;\n\n  count++;\n  ~~~\n  ~~~\n}</code></pre></div>","frontmatter":{"date":"November 13, 2021","title":"08. 제어문","categories":"javascript","author":"sangzun","emoji":null},"fields":{"slug":"/자바스크립트/08.제어문/"}},"prev":{"id":"a54b080e-70fe-5409-93bb-ffd80cdb6331","html":"<h1 id=\"1-타입변환이란\" style=\"position:relative;\"><a href=\"#1-%ED%83%80%EC%9E%85%EB%B3%80%ED%99%98%EC%9D%B4%EB%9E%80\" aria-label=\"1 타입변환이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 타입변환이란</h1>\n<p>자바스크립트의 모든 값은 타입이 있다. 값의 타입은 개발자의 의도에 따라 다른 타입으로 변환할 수 있다. 개발자가 의도적으로 값의 타입을 변환하는 것을 <strong>명시적 타입변환(explict coercion) 또는 타입 캐스팅(type casting)</strong>이라 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var x = 10;\n\nvar str = x.toString();\nconsole.log(typeof str, str) // 변수x의 값이 변경된것은 아니다.</code></pre></div>\n<p>명시적 타입 변환이나 암묵적 타입 변환이 기존 원시값을 직접 변경하는 것은 아니다. <strong>원시 값은 변경 불가능한 값이므로 변경할 수 없다.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var x= 10;\nvar str = x + '';\nconsole.log(typeof str, str); // string 10</code></pre></div>\n<p>자바스크립트 엔진은 x + ’ ‘을 평가하기 위해 x 변수의 숫자 값을 바탕으로 새로운 문자열 값 ‘10’을 생성하고 이것으로 표현식 ‘10’+ ’ ‘을 평가한다. 이때\n‘10’은 x변수에 재할당되지 않는다.</p>\n<p>즉 암묵적 타입변환은 기존 변수 값을 재할당하여 변경하는 것이 아니다.</p>\n<h1 id=\"2-암묵적-타입-변환\" style=\"position:relative;\"><a href=\"#2-%EC%95%94%EB%AC%B5%EC%A0%81-%ED%83%80%EC%9E%85-%EB%B3%80%ED%99%98\" aria-label=\"2 암묵적 타입 변환 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 암묵적 타입 변환</h1>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">'10' + 2 // '102'\n5 * '10 // 50\n\n!0 // true\nif(1){}</code></pre></div>\n<p>표현식을 평가할 때 코드의 문맥에 부합하지 않는 다양한 상황이 발생할 수 있다. 이때 자바스크립트는 가급적 에러를 발생시키지 않도록 암묵적 타입 변환을 통해 표현식을 평가한다.</p>\n<p>자바스크립트 엔진은 boolean 타입이 아닌 값을 Truthy값 또는 Falsy값으로 구분한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Falsy로 평가되는 값\n- false\n- undefined\n- null\n- 0, -0\n- NaN\n- ''</code></pre></div>\n<h1 id=\"3-명시적-타입-변환\" style=\"position:relative;\"><a href=\"#3-%EB%AA%85%EC%8B%9C%EC%A0%81-%ED%83%80%EC%9E%85-%EB%B3%80%ED%99%98\" aria-label=\"3 명시적 타입 변환 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 명시적 타입 변환</h1>\n<p>개발자의 의도에 따라 명시적으로 타입을 변경하는 방법은 다양하다. 표준 빌트인 생성자 함수(String, Number, Boolean)를 new 연산자 없이 호출하는 방법과 빌트인 메서드를 사용하는 방법, 그리고 암묵적 타입 변환을 이용하는 방법이 있다.</p>\n<h3 id=\"표준-빌트인-생성자-함수와-빌트인-메서드\" style=\"position:relative;\"><a href=\"#%ED%91%9C%EC%A4%80-%EB%B9%8C%ED%8A%B8%EC%9D%B8-%EC%83%9D%EC%84%B1%EC%9E%90-%ED%95%A8%EC%88%98%EC%99%80-%EB%B9%8C%ED%8A%B8%EC%9D%B8-%EB%A9%94%EC%84%9C%EB%93%9C\" aria-label=\"표준 빌트인 생성자 함수와 빌트인 메서드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>표준 빌트인 생성자 함수와 빌트인 메서드</h3>\n<p>표준 빌트인 생성저 함수와 표준 빌트인 메서드는 자바스크립트에서 기본 제공하는 함수다. 표준 빌트인 생성자 함수는 객체를 생성하기 위한 함수이며 new 연산자와 함께 호출한다. 표준 빌트인 메서드는 자바스크립틍서 기본 제공하는 빌트인 객체의 메서드다.</p>\n<h3 id=\"3-1-문자열-타입으로-변환\" style=\"position:relative;\"><a href=\"#3-1-%EB%AC%B8%EC%9E%90%EC%97%B4-%ED%83%80%EC%9E%85%EC%9C%BC%EB%A1%9C-%EB%B3%80%ED%99%98\" aria-label=\"3 1 문자열 타입으로 변환 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3-1. 문자열 타입으로 변환</h3>\n<ol>\n<li>String 생성자 함수를 new 연산자 없이 호출하는 방법</li>\n<li>Object.prototypes.toString메서드를 사용하는 방법</li>\n<li>문자열 연결 연산자를 이용하는 방법</li>\n</ol>\n<h3 id=\"3-2-숫자-타입으로-변환\" style=\"position:relative;\"><a href=\"#3-2-%EC%88%AB%EC%9E%90-%ED%83%80%EC%9E%85%EC%9C%BC%EB%A1%9C-%EB%B3%80%ED%99%98\" aria-label=\"3 2 숫자 타입으로 변환 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3-2. 숫자 타입으로 변환</h3>\n<ol>\n<li>Number 생성자 함수를 new 연산자 없이 호출하는 방법</li>\n<li>parseInt parseFloat 함수를 사용하는 방법(문자열만 숫자타입으로 변환 가능)</li>\n<li>+단항 산술 연산자를 이용하는 방법</li>\n<li>*산술 연산자를 이용하는 방법</li>\n</ol>\n<h3 id=\"3-3-boolean-타입으로-변환\" style=\"position:relative;\"><a href=\"#3-3-boolean-%ED%83%80%EC%9E%85%EC%9C%BC%EB%A1%9C-%EB%B3%80%ED%99%98\" aria-label=\"3 3 boolean 타입으로 변환 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3-3. boolean 타입으로 변환</h3>\n<ol>\n<li>Boolean 생성자 함수를 new 연산자 없이 호출하는 방법</li>\n<li>! 부정 논리 연산자를 두번 사용하는 방법</li>\n</ol>\n<h1 id=\"4-단축-평가\" style=\"position:relative;\"><a href=\"#4-%EB%8B%A8%EC%B6%95-%ED%8F%89%EA%B0%80\" aria-label=\"4 단축 평가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 단축 평가</h1>\n<p>논리합 또는 논리곱 연산자 표현식의 평가값은 boolean값이 아닐 수 도 있다. 논리합 또는 논리곱 연산자 표현식은 언제나 2개의 피연산자중 어느 한쪽으로 평가된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">'Cat' &amp;&amp; 'Dog' // 'Dog'</code></pre></div>\n<p>논리곱 연산자는 두 개의 피연산자 모두 true로 평가될때 true를 반환한다.\n논리곱 연산자는 두번째 피연산자가 논리곱 연산자의 평가 결과를 반환한다.\n논리합 연산자도 논리곱 연산자와 동일하게 작용한다.</p>\n<p><strong>이처럼 논리연산의 결과를 결정하는 피연산자를 타입 변환하지 않고 그대로 반환하는것을 단축평가(short-circuit evaluation)이라고 한다.</strong></p>\n<p>단축평가를 사용하면 if문을 대체할 수 있다.</p>\n<p>어떤 조건이 Truthy일 때 무언가를 해야한다면 논리곱을 조건이 Falsy일 때 무언가를 해야한다면 논리합을 이용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var done = true;\nvar message = '';\n\nif (done) message ='완료';\n\nmessage = done &amp;&amp; '완료'</code></pre></div>\n<h3 id=\"객체를-가리키기를-기대하는-변수가-null-또는-undefined가-아닌지-확인하기-프로퍼티를-참조할때\" style=\"position:relative;\"><a href=\"#%EA%B0%9D%EC%B2%B4%EB%A5%BC-%EA%B0%80%EB%A6%AC%ED%82%A4%EA%B8%B0%EB%A5%BC-%EA%B8%B0%EB%8C%80%ED%95%98%EB%8A%94-%EB%B3%80%EC%88%98%EA%B0%80-null-%EB%98%90%EB%8A%94-undefined%EA%B0%80-%EC%95%84%EB%8B%8C%EC%A7%80-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0%EB%A5%BC-%EC%B0%B8%EC%A1%B0%ED%95%A0%EB%95%8C\" aria-label=\"객체를 가리키기를 기대하는 변수가 null 또는 undefined가 아닌지 확인하기 프로퍼티를 참조할때 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>객체를 가리키기를 기대하는 변수가 null 또는 undefined가 아닌지 확인하기 프로퍼티를 참조할때</h3>\n<p>객체는 키(key)와 값(value)으로 구성된 프로퍼티의 집합이다. 만약 객체를 가리키기를 기대하는 변수의 값이 객체가 아니라 null 또는 undefined인 경우 객체의 프로퍼티를 찾모하면 TypeError가 발생한다.</p>\n<p>이때 단축평가를 사용하면 에러가 발생하지 않는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var elem = null;\n\nvar value = elem &amp;&amp; elem.value // null</code></pre></div>\n<h2 id=\"함수-매개변수에-기본값을-설정할-때\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98%EC%97%90-%EA%B8%B0%EB%B3%B8%EA%B0%92%EC%9D%84-%EC%84%A4%EC%A0%95%ED%95%A0-%EB%95%8C\" aria-label=\"함수 매개변수에 기본값을 설정할 때 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수 매개변수에 기본값을 설정할 때</h2>\n<p>함수를 호출할 때 인수를 전달하지 않으면 매개변수에는 undefined가 할당된다. 이 때 단축평가를 사용해 매개변수의 기본값을 설정하면 undefined로 인해 발생할 수 있는 에러를 방지할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function getStringLength(str) {\n  str = str || '';\n  return str.length;\n}</code></pre></div>\n<h3 id=\"4-1-옵셔널-체이닝-연산자\" style=\"position:relative;\"><a href=\"#4-1-%EC%98%B5%EC%85%94%EB%84%90-%EC%B2%B4%EC%9D%B4%EB%8B%9D-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-label=\"4 1 옵셔널 체이닝 연산자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4-1. 옵셔널 체이닝 연산자</h3>\n<p>ES11에서 도입된 optional chaning 연산자 ?.는 좌항의 피연산자가 null 또는 undefined인 경우 undefined를 반환하고 그렇지 않으면 우항의 프로퍼티를 참조한다.</p>\n<p>optional chaing 연산자는 좌항 피연산자가 false로 평가되는 Falsy값이라도 null 또는 undefined가 아니면 우항의 프로퍼티를 참조한다.</p>\n<h3 id=\"42-null-병합-연산자\" style=\"position:relative;\"><a href=\"#42-null-%EB%B3%91%ED%95%A9-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-label=\"42 null 병합 연산자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.2 null 병합 연산자</h3>\n<p>ES11에서 도입된 <strong>null 병합(nullish coalescing)</strong> 연산자 ?? 는 좌항의 피연산자가 null 또는 undefined인 경우 우항의 피연산자를 반환하고 그렇지 않으면 좌항의 피연산자를 반환한다. <strong>변수에 기본값을 설정할 때 유용하다.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var foo = null ?? 'default string';\nconsole.log(foo) // default string</code></pre></div>\n<p>좌항의 피연산자가 false로 평가되는 Falsy값이라도 null 또는 undefined가 아니면 좌항의 피연산자를 그대로 반환한다.</p>\n<p>optional chaing, null coalescing 연산자가 도입되기 전에는 논리연산자 &#x26;&#x26;와 ||을 사용하여 변수가 null 또는 undefined인지 확인했다.</p>\n<p>||를 사용한 단축평가의 경우 0이나 ”도 유효한 값이라면 예기치 않은 동작이 발생할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var elem = null;\nvar value = elem &amp;&amp; elem.value;\nconsole.log(value) // null</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var foo = '' || 'defalut string';\nconsole.log(foo) // default string</code></pre></div>","frontmatter":{"date":"November 18, 2021","title":"09. 타입변환과 단축 평가","categories":"javascript","author":"sangzun","emoji":null},"fields":{"slug":"/자바스크립트/09.타입변환과 단축 평가/"}},"site":{"siteMetadata":{"siteUrl":"https://github.com/sangzun-han","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/INTERVIEW/interview/","nextSlug":"/자바스크립트/08.제어문/","prevSlug":"/자바스크립트/09.타입변환과 단축 평가/"}},"staticQueryHashes":["1073350324","2938748437"]}