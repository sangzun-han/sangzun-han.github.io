{"componentChunkName":"component---src-templates-blog-template-js","path":"/INTERVIEW/interview/","result":{"data":{"cur":{"id":"c3072eda-9e6d-5d5a-be24-834de8586e49","html":"<ol start=\"9\">\n<li>What is the difference between == and === operators</li>\n</ol>\n<p>JavaScript provides both strict(===, !==) and type-converting(==, !=) equality comparison. </p>\n<p>The strict operators take type of variable in consideration, while non-strict operators make type correction/conversion based upon values of variables. The strict operators follow the below conditions for different types,</p>\n<ul>\n<li>Two strings are strictly equal when they have the same sequence of characters, same length, and same characters in corresponding positions.</li>\n<li>\n<p>Two numbers are strictly equal when they are numerically equal. i.e, Having the same number value. There are two special cases in this,</p>\n<p>a.NaN is not equal to anything, including NaN.</p>\n<p>b.Positive and negative zeros are equal to one another.</p>\n</li>\n<li>Two Boolean operands are strictly equal if both are true or both are false.</li>\n<li>Two objects are strictly equal if they refer to the same Object.</li>\n<li>Null and Undefined types are not equal with ===, but equal with ==. i.e, null===undefined —> false but null==undefined —> true</li>\n</ul>\n<p>—해석—</p>\n<p>JS는 strict와 equlity comparion을 제공한다.</p>\n<p>strict 연산자는 변수의 타입을 고려하고 non-strict 연산자는 변수의 값을 고려한다. strict 연산자는 타입이 다르면 아래의 조건에 따른다.</p>\n<ul>\n<li>두 문자열은 문자의 순서,길이,위치가 같아야한다.</li>\n<li>\n<p>두 숫자는 수학적으로 같아야 한다. 즉 숫자값이 같아야한다. 두가지 특별한 경우</p>\n<p>a. NaN은 NaN을 포함하여 어떤것도 같지 않다.</p>\n<p>b. +0과 -0은 같다.</p>\n</li>\n<li>boolean은 둘다 true 또는 둘다 false일때 같다.</li>\n<li>null과 undefined타입은 ===로 비교할때 같지 않다 ==로 비교할때는 같다.</li>\n</ul>\n<p><a href=\"https://github.com/sudheerj/javascript-interview-questions\">질문 목록</p>","excerpt":"What is the difference between == and === operators JavaScript provides both strict(===, !==) and type-converting(==, !=) equality comparison.  The strict operators take type of variable in consideration, while non-strict operators make type correction/conversion based upon values of variables. The strict operators follow the below conditions for different types, Two strings are strictly equal when they have the same sequence of characters, same length, and same characters in corresponding posi…","frontmatter":{"date":"November 15, 2021","title":"interview","categories":"intervirew","author":"sangzun","emoji":null},"fields":{"slug":"/INTERVIEW/interview/"}},"next":{"id":"a60b7614-b3fd-5820-a945-6e2996711bdb","html":"<p>연산자(operator)는 하나 이상의 표현식을 대상으로 산술, 할당, 비교, 논리, 타입, 지수연산등을 수행하여 하나의 값을 만든다. 이때 연산의 대상을 피연산자(operand)라고 한다.</p>\n<p>피연산자는 ‘값’이라는 역할을 하며 연산자는 ‘피연산자를 연산하여 새로운 값을 만든다.’</p>\n<h1 id=\"1-산술-연산자\" style=\"position:relative;\"><a href=\"#1-%EC%82%B0%EC%88%A0-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-label=\"1 산술 연산자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 산술 연산자</h1>\n<p>산술 연산자는 피연산자를 대상으로 수학적 계산을 수행해 새로운 숫자 값을 만든다. 산술연산이 불가능한 경우 <strong>NaN</strong>을 반환한다.</p>\n<h3 id=\"1-1-이항-산술-연산자\" style=\"position:relative;\"><a href=\"#1-1-%EC%9D%B4%ED%95%AD-%EC%82%B0%EC%88%A0-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-label=\"1 1 이항 산술 연산자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1-1. 이항 산술 연산자</h3>\n<p>모든 이항 산술 연산자는 피연산자의 값을 변경하는 <strong>부수효과(side effect)</strong>가 없다. 즉 피연산자의 값이 바뀌는 경우는 없고 언제나 새로운 값을 만들어 낸다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">5 + 2; // 7\n5 - 2; // 3\n5 * 2; // 10\n5 / 2; // 2.5\n5 % 2; // 1</code></pre></div>\n<h3 id=\"1-2-단항-산술-연산자\" style=\"position:relative;\"><a href=\"#1-2-%EB%8B%A8%ED%95%AD-%EC%82%B0%EC%88%A0-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-label=\"1 2 단항 산술 연산자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1-2. 단항 산술 연산자</h3>\n<p>단항 산술 연산자는 1개의 피연산자를 산술 연산하여 숫자 값을 만든다.\n증가/감소(++/—) 연산자는 피연산자의 값을 변경하는 부수효과가 있다.\n즉 증가/감소 연산을 하면 피연산자의 값을 변경하는 암묵적 할당이 이루어진다.</p>\n<p>숫자 타입이 아닌 피연산자에 + 단항 연산자를 사용하면 피연산자를 숫자 타입으로 반환하여 반환한다. 이 때 피연산자를 변경하는것은 아니고 숫자 타입으로 변환된 값을 생성해서 반환한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var x = '1';\nconsole.log(+x); // 1\nconsole.log(x); // \"1\"\n\nvar x = true;\nconsole.log(+x) // 1\nconsole.log(x) // true</code></pre></div>\n<h3 id=\"1-3-문자열-연결-연산자\" style=\"position:relative;\"><a href=\"#1-3-%EB%AC%B8%EC%9E%90%EC%97%B4-%EC%97%B0%EA%B2%B0-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-label=\"1 3 문자열 연결 연산자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1-3. 문자열 연결 연산자</h3>\n<ul>\n<li>연산자는 피연산자 중 하나 이상이 문자열인 경우 문자열 연결 연산자로 동작한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">'1' + 2; // '12'\n1 + '2'; // '12'\n\n1 + true; // 2</code></pre></div>\n<p>개발자의 의도와는 상관없이 자바스크립트 엔진에 의해 암묵적으로 타입이 자동 변환되기도 한다. 이를 <strong>암묵적 타입 변환(implicit coercion) 또는 타입 강제 변환(type coercion)</strong>이라고 한다 </p>\n<h1 id=\"2-할당-연산자\" style=\"position:relative;\"><a href=\"#2-%ED%95%A0%EB%8B%B9-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-label=\"2 할당 연산자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 할당 연산자</h1>\n<p>할당 연산자는 우항에 있는 피연산자의 평가 결과를 좌항에 있는 변수에 할당한다. 따라서 부수효과가 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var x;\nx = 10;\nx += 5;\nx -= 5\n\nvar str = 'name is ';\nstr += 'Han';\nconsole.log(str) // 'name is Han'</code></pre></div>\n<p>일치비교(===)연산자는 좌항과 우항의 피연산자가 <strong>타입도 같고 값도 같은 경우에 true를 반환한다.</strong> 암묵적 타입 변환을 하지 않고 값을 비교한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">5 === 5; // true\n5 === '5'; // false</code></pre></div>\n<p>자바스크립트에서 숫자 0은 양의 0과 음의 0으로 나누어져 있다. 이들을 비교하면 true를 반환한다. 또한 동일한 값인 NaN가 NaN을 비교하면 다른 값이라고 평가한다.</p>\n<p>따라서 Object.is 메서드를 사용하면 정확한 비교 결과를 반환한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">NaN === NaN // false\nObject.is(NaN, NaN) // true</code></pre></div>\n<p>NaN은 자신과 일치하지 않는 유일한 값이다 NaN을 조사하려면 <strong>isNaN</strong>함수를 사용해야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">isNaN(NaN) // true\nisNaN(10) // false\nisNaN(1 + undefined) // true</code></pre></div>\n<h3 id=\"2-1-대소-관계-비교-연산자\" style=\"position:relative;\"><a href=\"#2-1-%EB%8C%80%EC%86%8C-%EA%B4%80%EA%B3%84-%EB%B9%84%EA%B5%90-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-label=\"2 1 대소 관계 비교 연산자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2-1. 대소 관계 비교 연산자</h3>\n<p>대소 관계 비교 연산자는 피연산자의 크기를 비교하여 boolean값을 반환한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">5 > 0; // true\n5 > 5; // false\n5 >= 5; // true\n5 &lt;= 5; // true</code></pre></div>\n<h1 id=\"3-삼항-조건-연산자\" style=\"position:relative;\"><a href=\"#3-%EC%82%BC%ED%95%AD-%EC%A1%B0%EA%B1%B4-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-label=\"3 삼항 조건 연산자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 삼항 조건 연산자</h1>\n<p>삼항 조건 연산자(ternary operator)는 조건식의 평가 결과에 따라 반환할 값을 결정한다.</p>\n<p><strong>조건식 ? 조건식이 true일때 반환할 값 : 조건식이 false일때 반환할 값</strong>\n만약 조건식의 평가 결과가 불리언 값이 아니면 불리언 값으로 암묵적 타입 변환된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var x = 2;\nvar result = x % 2 ? '홀수' : '짝수';\n// 2 % 2는 0이므로 false로 암묵적 타입 변환된다.\n\nconsole.log(result) // 짝수</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var x = 10;\n\nvar result = if(x % 2) {result = '홀수'} else {result = '짝수'}\n//SyntaxError</code></pre></div>\n<p><strong>삼항 조건 연산자 표현식은 값으로 평가할 수 있는 표현식인 문이다.</strong></p>\n<h1 id=\"4-논리-연산자\" style=\"position:relative;\"><a href=\"#4-%EB%85%BC%EB%A6%AC-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-label=\"4 논리 연산자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 논리 연산자</h1>\n<p>논리 연산자(logical operator)는 우항과 좌항의 피연산자를 논리 연산 한다.</p>\n<table>\n<thead>\n<tr>\n<th>논리 연산자</th>\n<th>의미</th>\n<th>부수효과</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>｜｜</td>\n<td>논리합(OR)</td>\n<td>X</td>\n</tr>\n<tr>\n<td>&#x26;&#x26;</td>\n<td>논리곱(AND)</td>\n<td>X</td>\n</tr>\n<tr>\n<td>!</td>\n<td>부정(NOT)</td>\n<td>X</td>\n</tr>\n</tbody>\n</table>\n<p>논리 부정 연산자는 언제나 boolean값을 반환한다. 단 피연산자가 반드시 boolean값일 필요는 없다. 피연산자가 boolean타입이 아니라면 암묵적 타입 변환된다.</p>\n<h1 id=\"5-쉼표-연산자\" style=\"position:relative;\"><a href=\"#5-%EC%89%BC%ED%91%9C-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-label=\"5 쉼표 연산자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. 쉼표 연산자</h1>\n<p>쉼표(,) 연산자는 왼쪽 피연산자부터 차례대로 피연산자를 평가하고 마지막 피연산자의 평가가 끝나면 마지막 피연산자의 평가 결과를 반환한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var x,y,z;\nx = 1, y = 2, z = 3;</code></pre></div>\n<h1 id=\"6-그룹-연산자\" style=\"position:relative;\"><a href=\"#6-%EA%B7%B8%EB%A3%B9-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-label=\"6 그룹 연산자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. 그룹 연산자</h1>\n<p>소괄호 ()로 피연산자를 감싸는 그룹 연산자는 자신의 피연산자인 표현식을 가장 먼저 평가한다. 그룹 연산자는 연산자 우선순위가 가장 높다.</p>\n<h1 id=\"7-typeof-연산자\" style=\"position:relative;\"><a href=\"#7-typeof-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-label=\"7 typeof 연산자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>7. typeof 연산자</h1>\n<p>typeof 연산자는 피연산자의 데이터 타입을 문자열로 반환한다. typeof 연산자는 7가지 문자열 <strong>‘string’, ‘number’, ‘boolean’, ‘undefined’, ‘symbol’, ‘object’, ‘function’</strong> 중 하나를 반환한다.</p>\n<p><strong>null을 반환하는 경우는 없다. 자바스크립트 첫번째 버전의 버그이지만 기존 코드에 영향을 줄 수 있기 때문에 수정을 하지 않는다.</strong></p>\n<p>null 타입인지 확인할때는 일치 연산자(===)을 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">typeof '' // String\ntypeof 1 // number\ntypeof NaN // number\ntypeof true // boolean\ntypeof undefiend // undefined\ntypeof Symbol() // symbol\ntypeof null // object\ntypeof [] // object\ntypeof {} // object\ntypeof new Date() // object\ntypeof /test/gi // object\ntypeof function(){} // function\n\nvar foo = null;\nfoo === null // true</code></pre></div>\n<h1 id=\"8-지수-연산자\" style=\"position:relative;\"><a href=\"#8-%EC%A7%80%EC%88%98-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-label=\"8 지수 연산자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>8. 지수 연산자</h1>\n<p>ES7에서 도입된 지수연산자는 좌항의 피연산자를 밑(base)로 우항의 피연산자를 지수(exponent)로 거듭 제곱하여 계산한다. 지수 연산자 이전에는 Math.pow 메서드를 사용했다.</p>\n<p>음수를 거듭제곱의 밑으로 사용하려면 괄호로 묶어야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(-5) ** 2;</code></pre></div>\n<h1 id=\"9-연산자의-부수효과\" style=\"position:relative;\"><a href=\"#9-%EC%97%B0%EC%82%B0%EC%9E%90%EC%9D%98-%EB%B6%80%EC%88%98%ED%9A%A8%EA%B3%BC\" aria-label=\"9 연산자의 부수효과 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>9. 연산자의 부수효과</h1>\n<p>대부분의 연산자는 다른 코드에 영향을 주지 않는다. 예를들어 2*3은 다른 코드에 어떠한 영향도 주지 않고 새로운 값 6을 생성한다. 하지만 일부 연산자는 다른 코드에 영향을 주는 부수 효과가 있다. ex) 할당연산자(=), 증가/감소 연산자(++/—), delete 연산자</p>\n<p><a href=\"https://velog.io/@hanminss/JS-Group-Study-07.%EC%97%B0%EC%82%B0%EC%9E%90\">study width</p>","frontmatter":{"date":"November 12, 2021","title":"07. 연산자","categories":"javascript","author":"sangzun","emoji":null},"fields":{"slug":"/자바스크립트/07.연산자/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://github.com/sangzun-han","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/INTERVIEW/interview/","nextSlug":"/자바스크립트/07.연산자/","prevSlug":""}},"staticQueryHashes":["1073350324","2938748437"]}