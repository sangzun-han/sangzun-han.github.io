{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/JAVA/자바기초2/",
    "result": {"data":{"cur":{"id":"4b618093-5b38-5065-8d9e-ec162fd38aa9","html":"<h2 id=\"객체와-클래스\" style=\"position:relative;\"><a href=\"#%EA%B0%9D%EC%B2%B4%EC%99%80-%ED%81%B4%EB%9E%98%EC%8A%A4\" aria-label=\"객체와 클래스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>객체와 클래스</h2>\n<ul>\n<li>현실의 객체가 갖는 속성과 기능은 <code class=\"language-text\">추상화</code> 되어 클래스에 정의된다.</li>\n<li>클래스는 구체화되어 프로그램의 <code class=\"language-text\">객체</code> 가 된다.</li>\n<li>내가 필요한 것들(특징,기능)로만 구성된 객체를 만들어낼 수 있는 클래스를 정의\n<ul>\n<li>⇒ <code class=\"language-text\">추상화</code></li>\n</ul>\n</li>\n<li>클래스 - 붕어빵틀</li>\n<li>객체 - 붕어빵</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">String</span> str2 <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 리터럴</span>\n<span class=\"token class-name\">String</span> str3 <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 같은값을 가진 String객체가 있기 때문에 str2를 참조</span>\n<span class=\"token comment\">/*\nnew를 이용한 선언은 힙영역에 String객체가 만들어짐\n리터럴은 클래스영역(string,literal,pool)에 만들어진다.\nString도 immutable 하다\n*/</span></code></pre></div>\n<h2 id=\"객체-메모리-구조\" style=\"position:relative;\"><a href=\"#%EA%B0%9D%EC%B2%B4-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B5%AC%EC%A1%B0\" aria-label=\"객체 메모리 구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>객체 메모리 구조</h2>\n<ol>\n<li>static 영역에 static 변수, static 메서드를 올림</li>\n<li>stack 영역에 참조 변수 선언</li>\n<li>heap 영역에 객체 생성\n<ul>\n<li>객체의 멤버변수만 생성</li>\n<li>메서드는 일반 영역에 한번만 생성되며 객체와 링크시켜 놓음</li>\n</ul>\n</li>\n<li>객체의 주소를 stack 영역의 참조변수에 할당</li>\n</ol>\n<h3 id=\"메소드-오버로딩\" style=\"position:relative;\"><a href=\"#%EB%A9%94%EC%86%8C%EB%93%9C-%EC%98%A4%EB%B2%84%EB%A1%9C%EB%94%A9\" aria-label=\"메소드 오버로딩 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>메소드 오버로딩</h3>\n<ul>\n<li>메소드이름은 같고, 매개변수 타입이나 개수가 다른 달라 다른 메소드로서 동작</li>\n<li>같은 기능이지만 상황에 따라 유연하게 사용해야하는 경우\n<ul>\n<li>Ex) printf, 생성자</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"생성자\" style=\"position:relative;\"><a href=\"#%EC%83%9D%EC%84%B1%EC%9E%90\" aria-label=\"생성자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생성자</h3>\n<ul>\n<li>객체를 생성하고 멤버 변수 초기화, 또는 초기설정</li>\n<li>default 생성자는 어떠한 생성자도 없는 경우에만 컴파일러에 의해 제공</li>\n</ul>\n<hr>\n<h1 id=\"oop\" style=\"position:relative;\"><a href=\"#oop\" aria-label=\"oop permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>OOP</h1>\n<h3 id=\"object-클래스\" style=\"position:relative;\"><a href=\"#object-%ED%81%B4%EB%9E%98%EC%8A%A4\" aria-label=\"object 클래스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Object 클래스</h3>\n<ul>\n<li>모든 클래스의 조상 클래스\n<ul>\n<li>별도의 <code class=\"language-text\">extends</code> 선언이 없는 클래스들은 extends Object가 생략</li>\n<li>따라서 모든 클래스에는 Object 클래스에 정의된 메서드가 있음</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"oop-is-a-pie\" style=\"position:relative;\"><a href=\"#oop-is-a-pie\" aria-label=\"oop is a pie permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>OOP is A P.I.E</h1>\n<ol>\n<li>\n<p>Abstraction(추상화)</p>\n</li>\n<li>\n<p>Polymorphism(다형성)</p>\n</li>\n<li>\n<p>Inheritance(상속)</p>\n<ul>\n<li>기존 클래스의 자산을 자식 클래스에서 재사용</li>\n<li>부모의 생성자와 초기화 블록은 상속하지 않는다.</li>\n<li>기존 클래스의 멤버를 물려받기 때문에 코드의 절감</li>\n<li><code class=\"language-text\">상속의 관계는 is a 관계라고 함</code></li>\n<li>자바는 단일 상속만 지원</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">jump</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpiderMan</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">boolean</span> isSpider<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">fireWeb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><img src=\"/javaprimary2-12.png\" alt=\"Java\"></p>\n</li>\n<li>\n<p>Encapsulation(데이터 은닉과 보호)</p>\n</li>\n</ol>\n<h3 id=\"메서드-오버라이딩overriding\" style=\"position:relative;\"><a href=\"#%EB%A9%94%EC%84%9C%EB%93%9C-%EC%98%A4%EB%B2%84%EB%9D%BC%EC%9D%B4%EB%94%A9overriding\" aria-label=\"메서드 오버라이딩overriding permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>메서드 오버라이딩(overriding)</h3>\n<ul>\n<li>조상 클래스에 정의된 메서드를 자식 클래스에서 적합하게 수정하는 것</li>\n</ul>\n<h3 id=\"오버라이딩-조건\" style=\"position:relative;\"><a href=\"#%EC%98%A4%EB%B2%84%EB%9D%BC%EC%9D%B4%EB%94%A9-%EC%A1%B0%EA%B1%B4\" aria-label=\"오버라이딩 조건 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>오버라이딩 조건</h3>\n<ol>\n<li>메서드 이름이 같아야 한다.</li>\n<li>매개변수의 개수, 타입, 순서가 같아야 한다.</li>\n<li>리턴 타입이 같아야 한다.</li>\n<li>접근 제한자는 부모 보다 범위가 넓거나 같아야 한다.</li>\n<li>조상보다 더 큰 예외를 던질수 없다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">jump</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"두 다리로 힘껏 점프\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Spider</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">jump</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"키 * 100만큼 엄청난 점프\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpiderMan2</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">Spider</span> spider <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Spider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">boolean</span> isSpider<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">fireWeb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">jump</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isSpider<span class=\"token punctuation\">)</span> spider<span class=\"token punctuation\">.</span><span class=\"token function\">jump</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"두 다리로 힘껏 점프\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"annotation\" style=\"position:relative;\"><a href=\"#annotation\" aria-label=\"annotation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Annotation</h3>\n<ul>\n<li>컴파일러, JVM, 프레임워크 등이 보는 주석</li>\n<li>소스코드에 메타 데이터를 삽입하는 형태\n<ul>\n<li>소스 코드에 붙여 놓은 라벨</li>\n<li>코드에 대한 정보 추가 → 소스 코드의 구조 변경, 환경 설정 정보 추가등의 작업 진행</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Deprecated</span>\n<span class=\"token operator\">-</span> 컴파일러에게 해당 메서드가 deprecated 되었다고 알려줌\n<span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token operator\">-</span> 컴파일러에게 해당 메서드는 override한 메서드임을 알려줌\n<span class=\"token operator\">-</span> <span class=\"token annotation punctuation\">@Override</span>가 선언된 경우 반드시 <span class=\"token keyword\">super</span> <span class=\"token keyword\">class</span>에 선언 되어있는 메서드 여야 함\n<span class=\"token annotation punctuation\">@SuppressWarnings</span>\n<span class=\"token operator\">-</span> 컴파일러에게 사소한 waring의 경우 신경 쓰지 말라고 알려줌</code></pre></div>\n</li>\n</ul>\n<h2 id=\"접근제한자와-데이터-은닉과-보호\" style=\"position:relative;\"><a href=\"#%EC%A0%91%EA%B7%BC%EC%A0%9C%ED%95%9C%EC%9E%90%EC%99%80-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%9D%80%EB%8B%89%EA%B3%BC-%EB%B3%B4%ED%98%B8\" aria-label=\"접근제한자와 데이터 은닉과 보호 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>접근제한자와 데이터 은닉과 보호</h2>\n<ul>\n<li>제한자(modifier)\n<ul>\n<li>클래스,변수,메서드 선언부와 함께 사용되어 부가적인 의미 부여</li>\n</ul>\n</li>\n<li>종류 : 접근 제한자(public,private,protectedf,default),그 외 제한자\n<ul>\n<li>하나의 대상에 여러 제한자를 조합 가능하나 접근 제한자는 하나만 사용 가능</li>\n<li>순서는 무관하지만 일반적으로 접근제한자를 맨 앞에 사용</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"final\" style=\"position:relative;\"><a href=\"#final\" aria-label=\"final permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Final</h3>\n<ul>\n<li>final class → 더 이상 확장 할 수 없음, 상속금지 → override방지</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PerfectClass</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// final 클래스는 확장 할 수 없음</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FinalClassTest</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">PerfectClass</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>final method → 더 이상 재 정의 할 수 없음 → overriding 금지</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ParentClass</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">void</span> <span class=\"token function\">finalMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">FinalClassTest</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ParentClass</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// final 클래스는 오버라이딩 금지</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">finalMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>final variable → 더 이상 값을 바꿀수 없음 → 상수화</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">finalParameterTest</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// final 변수는 값 변경 불가능</span>\n\tname <span class=\"token operator\">=</span> <span class=\"token string\">\"hong\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"접근-제한자access-modifier\" style=\"position:relative;\"><a href=\"#%EC%A0%91%EA%B7%BC-%EC%A0%9C%ED%95%9C%EC%9E%90access-modifier\" aria-label=\"접근 제한자access modifier permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>접근 제한자(Access modifier)</h3>\n<ul>\n<li>멤버 등에 사용되며 해당 요소를 외부에서 사용할 수 있는지 설정</li>\n</ul>\n<p><img src=\"/javaprimary2-1.png\" alt=\"Java\"></p>\n<ul>\n<li>method override 조건 확인</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Parent</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OverrideRule</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Parent</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// 조상보다 더 큰 예외를 던질수 없다.</span>\n\t<span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3 id=\"encapsulation\" style=\"position:relative;\"><a href=\"#encapsulation\" aria-label=\"encapsulation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Encapsulation</h3>\n<ul>\n<li>누군가 정보를 마음대로 바꾼다면?</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">UnbelievableUserInfo</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"홍길동\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 이름은 not null</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> account <span class=\"token operator\">=</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 계좌는 0보다 커야함</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UnbelievalbeTest</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token class-name\">UnbelievableUserInfo</span> info <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UnbelievableUserInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tinfo<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\t\t\tinfo<span class=\"token punctuation\">.</span>account <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>외부에서 변수에 직접 접근하기때문에 정보가 보호되지 못한다.</li>\n<li>공개되는 메서드를 통한 접근 통로 마련 : <code class=\"language-text\">setter/getter</code> → 메서드에 정보 보호 로직 작성</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">UnbelievableUserInfo</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">//이름은 null이 될 수 없음.</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"홍길동\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 계좌는 0보다 커야 함.</span>\n\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> account <span class=\"token operator\">=</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"제대로 된 이름을 넣어!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getAccount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> account<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setAccount</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> account<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>account <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>account <span class=\"token operator\">=</span> account<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"마이너스 통장은 안돼!!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">// TODO: name 과 account에 부적절한 값이 할당되지 못하도록 처리하시오.</span>\n\t<span class=\"token comment\">//  name과 account 는 private으로 변경되어야 한다.</span>\n    <span class=\"token comment\">// END:</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UnbelievableTest</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">UnbelievableUserInfo</span> info <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UnbelievableUserInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"사용자 정보:%s, %d%n\"</span><span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">.</span><span class=\"token function\">getAccount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tinfo<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tinfo<span class=\"token punctuation\">.</span><span class=\"token function\">setAccount</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"사용자 정보:%s, %d%n\"</span><span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">.</span><span class=\"token function\">getAccount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"객체의-생성-제어와-singleton-디자인-패턴\" style=\"position:relative;\"><a href=\"#%EA%B0%9D%EC%B2%B4%EC%9D%98-%EC%83%9D%EC%84%B1-%EC%A0%9C%EC%96%B4%EC%99%80-singleton-%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4\" aria-label=\"객체의 생성 제어와 singleton 디자인 패턴 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>객체의 생성 제어와 Singleton 디자인 패턴</h3>\n<ul>\n<li>객체의 생성을 제한해야 한다면?</li>\n<li>여러개의 객체가 필요없는 경우\n<ul>\n<li>객체를 구별할 필요가 없는 경우 = 수정 가능한 멤버변수가 없고 기능만 있는 경우 <code class=\"language-text\">stateless 객체</code></li>\n</ul>\n</li>\n<li>객체를 계속 생성/삭제 하는데 많은 비용이 들어서 재사용이 유리한 경우</li>\n</ul>\n<p>Singloton 디자인 패턴</p>\n<ul>\n<li>외부에서 생성자에 접근 금지 → 생성자의 접근 제한자를 private으로 설정</li>\n<li>내부에서는 private에 접근 가능하므로 직접 객체 생성 → 멤버 변수이므로 private 설정</li>\n<li>외부에서 private member에 접근 가능한 getter생성 → setter 필요하지 않음</li>\n<li>객체없이 외부에서 접근할 수 있도록 getter와 변수에 static 추가</li>\n<li>외부에서는 언제나 getter를 통해서 객체를 참조하므로 하나의 객체 재사용</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">SingletonClass</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// TODO:SingletonClass에 Singleton Design Pattern을 적용하시오.</span>\n\t<span class=\"token comment\">// stateless 한 클래스 : 상태를 가지지 않고 기능만 가짐</span>\n\t<span class=\"token comment\">// END:</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">SingletonClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">SingletonClass</span> sc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SingletonClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">SingletonClass</span> <span class=\"token function\">getSingleTonClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> sc<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SingletonTest</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// TODO:SingletonClass를 사용해보세요.</span>\n\t\t<span class=\"token class-name\">SingletonClass</span> sc <span class=\"token operator\">=</span> <span class=\"token class-name\">SingletonClass</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSingleTonClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tsc<span class=\"token punctuation\">.</span><span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// END:</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"다형성-polymorphism\" style=\"position:relative;\"><a href=\"#%EB%8B%A4%ED%98%95%EC%84%B1-polymorphism\" aria-label=\"다형성 polymorphism permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>다형성 (Polymorphism)</h1>\n<ul>\n<li>하나의 객체가 많은 타입을 가질 수 있는 성질</li>\n<li><code class=\"language-text\">상속 관계에 있을 때 조상 클래스의 타입으로 자식 클래스 객체를 레퍼런스 할 수 있다.</code></li>\n</ul>\n<p><img src=\"/javaprimary2-2.png\" alt=\"Java\"></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">SpiderMan</span> onlyOne <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SpiderMan</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">SpiderMan</span> sman <span class=\"token operator\">=</span> onlyOne<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n\n<span class=\"token class-name\">Person</span> person <span class=\"token operator\">=</span> onlyOne <span class=\"token comment\">// 2</span>\n\n<span class=\"token class-name\">Object</span> obj <span class=\"token operator\">=</span> onlyOne <span class=\"token comment\">// 3</span>\n\n<span class=\"token class-name\">Venom</span> venom <span class=\"token operator\">=</span> onlyOne<span class=\"token punctuation\">;</span></code></pre></div>\n<ol>\n<li>onlyOne은 SpiderMan 타입인가?\n<ol>\n<li>예</li>\n</ol>\n</li>\n<li>onlyOne은 Person 타입인가?\n<ol>\n<li>예</li>\n</ol>\n</li>\n<li>onlyOne은 Object 타입인가?\n<ol>\n<li>예</li>\n</ol>\n</li>\n<li>onlyOne은 Venom 타입인가?\n<ol>\n<li>아니요</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"다형성-활용-예시\" style=\"position:relative;\"><a href=\"#%EB%8B%A4%ED%98%95%EC%84%B1-%ED%99%9C%EC%9A%A9-%EC%98%88%EC%8B%9C\" aria-label=\"다형성 활용 예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>다형성 활용 예시</h3>\n<h3 id=\"1-다른타입의-객체를-다루는-배열\" style=\"position:relative;\"><a href=\"#1-%EB%8B%A4%EB%A5%B8%ED%83%80%EC%9E%85%EC%9D%98-%EA%B0%9D%EC%B2%B4%EB%A5%BC-%EB%8B%A4%EB%A3%A8%EB%8A%94-%EB%B0%B0%EC%97%B4\" aria-label=\"1 다른타입의 객체를 다루는 배열 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 다른타입의 객체를 다루는 배열</h3>\n<ul>\n<li>배열의 특징 : 같은 타입의 데이터를 묶음으로 다룬다.</li>\n<li>다형성으로 다른 타입의 데이터를 하나의 배열로 관리</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">void</span> <span class=\"token function\">beforePoly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">Person</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> persons <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\tpersons<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">SpiderMan</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> spiderMans <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SpiderMan</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\tspiderMans<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SpiderMan</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">afterPoly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">Person</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> persons <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\tpersons<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tpersons<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SpiderMan</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>Object는 모든 클래스의 조상 → Object 배열은 어떤 타입의 객체라도 다 저장할 수 있음</li>\n</ul>\n<h3 id=\"2-매개변수의-다형성\" style=\"position:relative;\"><a href=\"#2-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98%EC%9D%98-%EB%8B%A4%ED%98%95%EC%84%B1\" aria-label=\"2 매개변수의 다형성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 매개변수의 다형성</h3>\n<ul>\n<li>메서드가 호출되기 위해서는 메서드이름과 매개변수가 맞아야 한다.</li>\n<li>조상을 파라미터로 처리한다면 객체의 타입에 따라 메서드를 만들필요가 없다.</li>\n</ul>\n<h2 id=\"다형성과-참조형-객체의-형-변환\" style=\"position:relative;\"><a href=\"#%EB%8B%A4%ED%98%95%EC%84%B1%EA%B3%BC-%EC%B0%B8%EC%A1%B0%ED%98%95-%EA%B0%9D%EC%B2%B4%EC%9D%98-%ED%98%95-%EB%B3%80%ED%99%98\" aria-label=\"다형성과 참조형 객체의 형 변환 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>다형성과 참조형 객체의 형 변환</h2>\n<ul>\n<li>메모리에 있는 것과 사용할 수 있는 것의 차이</li>\n</ul>\n<p><img src=\"/javaprimary2-3.png\" alt=\"Java\"></p>\n<ul>\n<li>메모리에 있더라도 참조하는 변수의 타입에 따라 접근할 수 있는 내용이 제한됨</li>\n<li>작은 집에서 큰집으로 → 묵시적 캐스팅</li>\n<li>자손타입의 객체를 조상 타입으로 참조 : 형변환 생략 가능\n<ul>\n<li>why? 조상의 모든 내용이 자식에 있기 때문</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Phone</span> phone <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Phone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Object</span> obj <span class=\"token operator\">=</span> phone<span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>큰집에서 작은집으로 → 명시적 캐스팅</li>\n<li>조상 타입을 자손타입으로 참조 : 형변환 생략 불가</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Phone</span> phone <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SmartPhone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">SmartPhone</span> sPhone <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SmartPhone</span><span class=\"token punctuation\">)</span>phone<span class=\"token punctuation\">;</span></code></pre></div>\n<p><img src=\"/javaprimary2-4.png\" alt=\"Java\"></p>\n<ul>\n<li>무늬만 SpiderMan인 Person</li>\n<li>메모리의 객체는 fireWeb()이 없음</li>\n</ul>\n<p>—> 조상을 무작정 자손으로 바꿀수는 없다.</p>\n<p><code class=\"language-text\">instanceof</code> : 실제 메모리에 있는 객체가 특정 클래스 타입인지 boolean으로 리턴</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Person</span> person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">SpiderMan</span> sman <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SpiderMan</span><span class=\"token punctuation\">)</span>person<span class=\"token punctuation\">;</span>\nsman<span class=\"token punctuation\">.</span><span class=\"token function\">fireWeb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>person <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">SpiderMan</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">SpiderMan</span> sman <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SpiderMan</span><span class=\"token punctuation\">)</span>perosn<span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"참조-변수의-레벨에-따른-객체의-멤버-연결\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EC%A1%B0-%EB%B3%80%EC%88%98%EC%9D%98-%EB%A0%88%EB%B2%A8%EC%97%90-%EB%94%B0%EB%A5%B8-%EA%B0%9D%EC%B2%B4%EC%9D%98-%EB%A9%A4%EB%B2%84-%EC%97%B0%EA%B2%B0\" aria-label=\"참조 변수의 레벨에 따른 객체의 멤버 연결 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참조 변수의 레벨에 따른 객체의 멤버 연결</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">SuperClass</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">String</span> x <span class=\"token operator\">=</span> <span class=\"token string\">\"super\"</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"super class method\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SubClass</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">SuperClass</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">String</span> x <span class=\"token operator\">=</span> <span class=\"token string\">\"sub\"</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sub class method\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MemberBindingTest</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">SubClass</span> subClass <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SubClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>subClass<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tsubClass<span class=\"token punctuation\">.</span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token class-name\">SuperClass</span> superClass <span class=\"token operator\">=</span> subClass<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>superClass<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tsuperClass<span class=\"token punctuation\">.</span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>상속관계에서 객체의 멤버 변수가 중복 될 때\n<ul>\n<li>참조 변수의 타입에 따라 연결이 달라짐</li>\n</ul>\n</li>\n<li>상속관계에서 객체의 메소드가 중복될 때(메서드가 override 되었을 때)\n<ul>\n<li>무조건 자식 클래스의 메서드가 호출됨 → virtual method invocation</li>\n<li>최대한 메모리에 생성된 실제 객체에 최적화된 메서드가 동작</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"추상-클래스\" style=\"position:relative;\"><a href=\"#%EC%B6%94%EC%83%81-%ED%81%B4%EB%9E%98%EC%8A%A4\" aria-label=\"추상 클래스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>추상 클래스</h2>\n<ul>\n<li><code class=\"language-text\">abstract</code> 클래스는 상속 전용의 클래스</li>\n</ul>\n<h3 id=\"사용이유\" style=\"position:relative;\"><a href=\"#%EC%82%AC%EC%9A%A9%EC%9D%B4%EC%9C%A0\" aria-label=\"사용이유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>사용이유?</h3>\n<ul>\n<li>abstract 클래스는 구현의 강제를 통해 프로그램의 안정성 향상</li>\n</ul>\n<h2 id=\"interface\" style=\"position:relative;\"><a href=\"#interface\" aria-label=\"interface permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Interface</h2>\n<ul>\n<li>\n<p>최고 수준의 추상화 단계 : 일반 메서드는 모두 <code class=\"language-text\">abstract</code> 형태</p>\n<ul>\n<li>JDK 8에서 default method와 static method 추가</li>\n</ul>\n</li>\n<li>\n<p>형태</p>\n<ul>\n<li>\n<p>클래스와 유사하게 interface 선언</p>\n</li>\n<li>\n<p>멤버 구성</p>\n<ul>\n<li>모든 멤버 변수는 <code class=\"language-text\">public static final</code> 이며 생략 가능</li>\n<li>모든 메서드는 <code class=\"language-text\">public abstract</code> 이며 생략 가능</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> interfcae <span class=\"token class-name\">MyInterfcae</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> MEMBER1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> MEMBER2 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">method2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pararm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>인터페이스 상속</p>\n<ul>\n<li>\n<p>클래스와 마찬가지로 extends를 이용해 상속이 가능</p>\n</li>\n<li>\n<p>클래스와 다른점은 인터페이스는 다중 상속이 가능</p>\n<ul>\n<li>why? 헷갈릴 메서드 구현 자체가 없다.\n<img src=\"/javaprimary2-6.png\" alt=\"Java\"></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Fightable</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> <span class=\"token function\">fire</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Transformable</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">changeShape</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">boolean</span> isHeroMode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Heroable</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Fightable</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Trasformable</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">upgrade</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h2 id=\"인터페이스-구현과-객체-참조\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4-%EA%B5%AC%ED%98%84%EA%B3%BC-%EA%B0%9D%EC%B2%B4-%EC%B0%B8%EC%A1%B0\" aria-label=\"인터페이스 구현과 객체 참조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인터페이스 구현과 객체 참조</h2>\n<ul>\n<li>클래스에서 implemets키워드를 사용해서 interface 구현</li>\n<li>implements 한 클래스는\n<ul>\n<li>모든 abstract 메서드를 override해서 구현하거나</li>\n<li>구현하지 않을 경우 abstract 클래스를 명시해줘야함</li>\n</ul>\n</li>\n<li>인터페이스도 하나의 타입 → 다형성 가능</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"interface-필요성\" style=\"position:relative;\"><a href=\"#interface-%ED%95%84%EC%9A%94%EC%84%B1\" aria-label=\"interface 필요성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Interface 필요성</h2>\n<ul>\n<li>구현의 강제로 표준화 처리\n<ul>\n<li>abstract 메서드 사용</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/javaprimary2-7.png\" alt=\"Java\"></p>\n<ul>\n<li>인터페이스를 통한 간접적인 클래스 사용으로 손쉬운 모듈 교체 지원</li>\n<li>서로 상속의 관계가 없는 클래스들에게 인터페이스를 통한 관계 부여로 다형성 확장</li>\n</ul>\n<p><img src=\"/javaprimary2-8.png\" alt=\"Java\">\n<img src=\"/javaprimary2-9.png\" alt=\"Java\"></p>\n<p><img src=\"/javaprimary2-10.png\" alt=\"Java\"></p>\n<p><img src=\"/javaprimary2-11.png\" alt=\"Java\"></p>\n<ul>\n<li>모듈 간 독립적 프로그래밍 가능 → 개발 기간 단축\n<ul>\n<li>구현할 내용에 대한 협의</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"default-method\" style=\"position:relative;\"><a href=\"#default-method\" aria-label=\"default method permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>default method</h3>\n<ul>\n<li>인터페이스에 선언 된 구현부가 있는 일반 메서드\n<ul>\n<li>메서드 선언부에 default modifer 추가 후 메서드 구현부 작성</li>\n<li>접근 제한자는 public으로 한정됨(생략 가능)</li>\n</ul>\n</li>\n<li>필요성\n<ul>\n<li>기존에 interfcace 기반으로 동작하는 라이브러리의 interface에 추가해야 하는 기능이 발생</li>\n<li>기존 방식으로라면 모든 구현체들이 추가되는 메서드를 override 해야함</li>\n<li>default 메서드는 abstract가 아니므로 반드시 구현해야 할 필요는 없어짐</li>\n</ul>\n</li>\n<li>default method의 충돌\n<ul>\n<li>JDK 1.7이하의 인터페이스 구현부가 없으므로 충돌이 없었음</li>\n<li>1.8부터 default method가 생기면서 동일한 이름을 갖는 구현부가 있는 메서드가 충돌</li>\n<li>method 우선순위\n<ul>\n<li>super class의 method의 우선 : spuer class가 구체적인 메서드를 갖는 경우 default method 무시된다.</li>\n<li>interface간의 충돌 : 하나의 interface에서 default method를 제공하고 다른 interface에서도 같은 이름의 메서드가 있을 때 sub class는 반드시 override해서 충돌 해결</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"static-method\" style=\"position:relative;\"><a href=\"#static-method\" aria-label=\"static method permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>static method</h2>\n<ul>\n<li>interface에 선언된 static method</li>\n</ul>","excerpt":"객체와 클래스 현실의 객체가 갖는 속성과 기능은  되어 클래스에 정의된다. 클래스는 구체화되어 프로그램의  가 된다. 내가 필요한 것들(특징,기능)로만 구성된 객체를 만들어낼 수 있는 클래스를 정의 ⇒  클래스 - 붕어빵틀 객체 - 붕어빵 객체 메모리 구조 static 영역에 static 변수, static 메서드를 올림 stack 영역에 참조 변수 선언 heap 영역에 객체 생성 객체의 멤버변수만 생성 메서드는 일반 영역에 한번만 생성되며 객체와 링크시켜 놓음 객체의 주소를 stack 영역의 참조변수에 할당 메소드 오버로딩 메소드이름은 같고, 매개변수 타입이나 개수가 다른 달라 다른 메소드로서 동작 같은 기능이지만 상황에 따라 유연하게 사용해야하는 경우 Ex) printf, 생성자 생성자 객체를 생성하고 멤버 변수 초기화, 또는 초기설정 default 생성자는 어떠한 생성자도 없는 경우에만 컴파일러에 의해 제공 OOP Object 클래스 모든 클래스의 조상 클래스 별도의  선언이…","frontmatter":{"date":"July 31, 2022","title":"자바 기초 2","categories":"JAVA","author":"sangzun","emoji":"😂"},"fields":{"slug":"/JAVA/자바기초2/"}},"next":{"id":"dea599dc-bfe1-546d-9254-79dd52141669","html":"<h2 id=\"연산자와-형변환\" style=\"position:relative;\"><a href=\"#%EC%97%B0%EC%82%B0%EC%9E%90%EC%99%80-%ED%98%95%EB%B3%80%ED%99%98\" aria-label=\"연산자와 형변환 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>연산자와 형변환</h2>\n<h3 id=\"형변환\" style=\"position:relative;\"><a href=\"#%ED%98%95%EB%B3%80%ED%99%98\" aria-label=\"형변환 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>형변환</h3>\n<ol>\n<li>\n<p>형변환: 변수의 타입을 다른 타입으로 변환</p>\n</li>\n<li>\n<p>primitive는 primitive끼리 reference는 reference끼리 형 변환가능</p>\n<ol>\n<li>boolean은 다른 기본 타입과 호환 X</li>\n<li>기본 타입과 참조형의 형 변환을 위해서 wrapper 클래스 사용</li>\n</ol>\n</li>\n<li>\n<p>형변환 방법</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">double</span> d <span class=\"token operator\">=</span> <span class=\"token number\">100.5</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> d<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// result 값은 100이다.</span></code></pre></div>\n</li>\n</ol>\n<h3 id=\"묵시적-형변환\" style=\"position:relative;\"><a href=\"#%EB%AC%B5%EC%8B%9C%EC%A0%81-%ED%98%95%EB%B3%80%ED%99%98\" aria-label=\"묵시적 형변환 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>묵시적 형변환</h3>\n<ul>\n<li>작은 데이터 타입 → 큰 데이터 타입</li>\n</ul>\n<h3 id=\"명시적-형변환\" style=\"position:relative;\"><a href=\"#%EB%AA%85%EC%8B%9C%EC%A0%81-%ED%98%95%EB%B3%80%ED%99%98\" aria-label=\"명시적 형변환 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>명시적 형변환</h3>\n<ul>\n<li>큰 데이터 타입 → 작은 데이터 타입 (값 손실이 발생할 수 있다.)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 묵시적 형변환</span>\n<span class=\"token keyword\">byte</span> b <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> i2 <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 명시적 형변환</span>\n<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">300</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">byte</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">)</span>b<span class=\"token punctuation\">;</span></code></pre></div>\n<p>값의 크기, 타입의 크기가 아닌 <code class=\"language-text\">타입의 표현 범위</code>가 커지는 방향으로 할당할 경우에 묵시적 형변환이 발생한다.</p>\n<p>byte → (short,char) → int → long → float → double</p>\n<h3 id=\"연산자\" style=\"position:relative;\"><a href=\"#%EC%97%B0%EC%82%B0%EC%9E%90\" aria-label=\"연산자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>연산자</h3>\n<ul>\n<li>어떤 기능을 수행하는 기호(+,-,*,/)</li>\n<li>연산자 종류와 우선순위 및 결합 방향</li>\n<li>연산자의 우선순위를 외우는것은 어렵기 떄문에 ()를 활용하는것이 편함</li>\n</ul>\n<h3 id=\"조건문\" style=\"position:relative;\"><a href=\"#%EC%A1%B0%EA%B1%B4%EB%AC%B8\" aria-label=\"조건문 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>조건문</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> ___ <span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span> ____ <span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"배열\" style=\"position:relative;\"><a href=\"#%EB%B0%B0%EC%97%B4\" aria-label=\"배열 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>배열</h2>\n<ul>\n<li><code class=\"language-text\">Array is Immutable</code> : 배열은 최초 메모리 할당 이후 변경 불가능</li>\n<li>동일한 타입의 데이터 0개 이상을 하나의 연속된 메모리 공간에서 관리</li>\n<li><code class=\"language-text\">new</code> 키워드와 함께 저장하려는 데이터 타입 및 크기 지정</li>\n<li>배열의 요소의 값들은 해당 타입의 기본값으로 초기화 됨.</li>\n<li>.length\n<ul>\n<li>배열의 크기</li>\n</ul>\n</li>\n<li>Arrays.toString(출력할 배열)\n<ul>\n<li>배열의 내용을 출력하고 싶은 경우</li>\n</ul>\n</li>\n<li>Arrays.deepToString(출력할 배열)\n<ul>\n<li>2차원 배열 출력의 경우</li>\n</ul>\n</li>\n<li>Arrays.arrayCopy(src,srcPos,dest,destPos,length)\n<ul>\n<li>원본배열 복사 (깊은복사)</li>\n</ul>\n</li>\n<li>Arrays.copyOf(int[] original, int newLength)\n<ul>\n<li>원본배열 복사(깊은 복사)</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> points<span class=\"token punctuation\">;</span> <span class=\"token comment\">// int타입을 저장하는 배열, int타입과는 상관없음</span>\n<span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> names<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 이런식으로 생성하면 크기가 다른 배열 생성 가능</span>\n<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Array 만들기</span>\n<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> c <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 선언과 생성을 따로 처리할 경우 초기화 주의</span>\n<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> points<span class=\"token punctuation\">;</span>\npoints <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 컴파일 오류</span>\n\n<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> points<span class=\"token punctuation\">;</span>\npoints <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 오류X 선언할 때는 배열의 크기를 알 수 없을 때</span></code></pre></div>\n<ul>\n<li>int[] points = new int[3] : int타입의 자료 3개를 저장할 수 있는 배열을 메모리에 생성하고 points라는 변수에 할당한다. points는 메모리에 있는 배열을 가리키는 <code class=\"language-text\">reference</code>타입 변수</li>\n</ul>\n<p><img src=\"/javaprimary1.png\" alt=\"Java\"></p>\n<h3 id=\"for-each\" style=\"position:relative;\"><a href=\"#for-each\" aria-label=\"for each permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>for-each</h3>\n<ul>\n<li>가독성이 개선된 반복문, 배열 및 Collections에서 사용</li>\n<li>index에 대신 직접 elements에 접근하는 변수를 제공\n<ul>\n<li><code class=\"language-text\">naturally read only</code></li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> intArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token operator\">:</span> intArray<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"다차원-배열\" style=\"position:relative;\"><a href=\"#%EB%8B%A4%EC%B0%A8%EC%9B%90-%EB%B0%B0%EC%97%B4\" aria-label=\"다차원 배열 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>다차원 배열</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> intArray<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> intArray<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> intArray<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nintArray <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> intArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 4x()배열 만들기</span>\n<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> intArray <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nintArray<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nintArray<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nintArray<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 오류</span>\nintArray<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narray3<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narray3<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> array1<span class=\"token punctuation\">;</span>\narr3<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></code></pre></div>","frontmatter":{"date":"July 30, 2022","title":"자바 기초 1","categories":"JAVA","author":"sangzun","emoji":"😂"},"fields":{"slug":"/JAVA/자바기초1/"}},"prev":{"id":"0f799a0a-ae0c-5ebb-abd6-1bbda409e5f9","html":"<h2 id=\"generic\" style=\"position:relative;\"><a href=\"#generic\" aria-label=\"generic permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Generic</h2>\n<ul>\n<li>다양한 타입의 객체를 다루는 메서드, 컬렉션 클래스에서 컴파일시에 타입 체크</li>\n<li>미리 사용할 타입을 명시해서 형 변환을 하지 않아도 되게함\n<ul>\n<li>객체의 타입에 대한 안전성 향상 및 형 변환의 번거로움 감소</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"generic-표현\" style=\"position:relative;\"><a href=\"#generic-%ED%91%9C%ED%98%84\" aria-label=\"generic 표현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Generic 표현</h2>\n<ul>\n<li>\n<p>클래스 또는 인터페이스 선언시 &#x3C;>에 타입 파라미터 표시</p>\n</li>\n<li>\n<p>ex) public class className<T> {}</p>\n</li>\n<li>\n<p>타입 파라미터</p>\n<ul>\n<li>특별한 의미의 알파벳 보다는 단순히 임의의 참조형 타입을 말함\n<ul>\n<li>T : reference Type, E: Element, K: Key, V: Value</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>객체 생성</p>\n<ul>\n<li>변수 쪽과 생성 쪽의 타입은 반드시 같아야 함</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">ClassName</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Number</span><span class=\"token punctuation\">></span></span> generic <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassName</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Number</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">ClassName</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Number</span><span class=\"token punctuation\">></span></span> generic2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassNameM</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>type parameter의 제한</p>\n<ul>\n<li>\n<p>계산기 프로그램 구현시 Number이하의 타입으로만 제한</p>\n<ul>\n<li>type parameter 선언 뒤 extends와 함께 상위 타입 명시</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">NumberBox</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Number</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addSomes</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> ts<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">double</span> d <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> t<span class=\"token operator\">:</span> ts<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\td <span class=\"token operator\">+=</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">.</span><span class=\"token function\">doubleValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"총 합은: \"</span> <span class=\"token operator\">+</span> d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ExtendsTest</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">NumberBox</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Number</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>Generic Type 객체를 할당받을 때</p>\n<ul>\n<li>Generic type&#x3C;?> → 타입에 대한 제한 없음(Object)</li>\n<li>Generic type&#x3C;? extends T> → T 또는 T를 상속받은 타입들만 사용 가능</li>\n<li>Geneirc type &#x3C;? super T> → T 또는 T의 조상 타입만 사용 가능</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"generic-method\" style=\"position:relative;\"><a href=\"#generic-method\" aria-label=\"generic method permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Generic Method</h2>\n<ul>\n<li>\n<p>파라미터와 리턴타입으로 type parameter를 갖는 메서드</p>\n<ul>\n<li>메서드 리턴 타입앞에 타입 파라미터 변수 선언</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TypeParameterMethodTest</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">T</span> some<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">TypeParameterMethodTest</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> some<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>some <span class=\"token operator\">=</span> some<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">P</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">void</span> <span class=\"token function\">method1</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">P</span> p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">P</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">void</span> <span class=\"token function\">method2</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">P</span> p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> p\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">TypeParameterMethodTest</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> tpmt <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeParameterMethodTest</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\ttpmt<span class=\"token punctuation\">.</span><span class=\"token function\">method1</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n\t\ttpmt<span class=\"token punctuation\">.</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span><span class=\"token function\">method2</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h2 id=\"io와-stream\" style=\"position:relative;\"><a href=\"#io%EC%99%80-stream\" aria-label=\"io와 stream permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>I/O와 Stream</h2>\n<ul>\n<li>데이터는 한쪽에서 주고 한쪽에서 받는 구조로 되어있음\n<ul>\n<li>이때 입력과 출력의 끝단 : 노드</li>\n<li>두 노드를 연결하고 데이터를 전송할 수 있는 개념 : Stream</li>\n<li>스트림은 <code class=\"language-text\">단방향</code> 으로만 통신이 가능하며 하나의 스트림으로 입력과 출력을 같이 처리할 수 없음</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"node-stream의-종류와-naming\" style=\"position:relative;\"><a href=\"#node-stream%EC%9D%98-%EC%A2%85%EB%A5%98%EC%99%80-naming\" aria-label=\"node stream의 종류와 naming permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Node Stream의 종류와 naming</h3>\n<ul>\n<li>NodeStream : node에 연결되는 스트림</li>\n<li>데이터 타입에 따라 XXStream,XXer</li>\n</ul>\n<h3 id=\"보조스트림\" style=\"position:relative;\"><a href=\"#%EB%B3%B4%EC%A1%B0%EC%8A%A4%ED%8A%B8%EB%A6%BC\" aria-label=\"보조스트림 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>보조스트림</h3>\n<ul>\n<li>Filter Stream, Processing Stream</li>\n<li>다른 스트림에 부가적인 기능을 제공하는 스트림</li>\n<li>스트림 체이닝(Stream Chaining)\n<ul>\n<li>필요에 따라 여러 보조 스트림을 연결해서 사용 가능</li>\n</ul>\n</li>\n<li>사용할 스트림의 결정 과정\n<ul>\n<li>노드가 무엇인가? → 타입은 문자열인가 바이트인가? → 방향이 무엇인가? → 추가 기능이 필요한가?</li>\n<li>영화 파일을 빠른 속도로 이동시키고 싶다면?\n<ul>\n<li>File → byte → 읽기,쓰기 → FileInputStream, FileOutputStrea</li>\n</ul>\n</li>\n<li>키보드에서 유니코드 문자를 안전하고 빠르게 읽고 싶다면?\n<ul>\n<li>keyboard → byte → 읽기 → InputStream(System.in) → InputStreamReader → BufferedReader</li>\n</ul>\n</li>\n<li>메모리의 객체를 파일로 저장하고 싶다면?\n<ul>\n<li>File → byte → 쓰기 → FileOutputStream → ObjectOutputStream</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"객체-직렬화\" style=\"position:relative;\"><a href=\"#%EA%B0%9D%EC%B2%B4-%EC%A7%81%EB%A0%AC%ED%99%94\" aria-label=\"객체 직렬화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>객체 직렬화</h3>\n<ul>\n<li>객체를 파일등에 저장하거나 네트워크로 전송하기 위해 연속적인 데이터로 변환</li>\n<li>반대의 경우는 역직렬화</li>\n<li>직렬화 되기 위한 조건\n<ul>\n<li>Serializable 인터페이스를 구현할 것</li>\n<li>클래스의 모든 멤버가 Serializable 인터페이스를 구현해야 함</li>\n<li>직렬화 해서 제외하려는 멤버는 transient 선언</li>\n</ul>\n</li>\n<li>serialVersionUID\n<ul>\n<li>클래스의 변경 여부를 파악하기 위한 유일 키</li>\n<li>직렬화 할때의 UID와 역 직렬화할때의 UID가 다를 경우 예외 발생</li>\n<li>직렬화되는 객체에 UID가 설정되지 않았을 경우 컴파일러가 자동 생성\n<ul>\n<li>멤버 변경으로 인한 컴파일 시마다 변경 → InvalidClassException 초래</li>\n</ul>\n</li>\n<li>직렬화되는 객체에 대해서 serialVersionUID 설정 권장</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"공공데이터-xml\" style=\"position:relative;\"><a href=\"#%EA%B3%B5%EA%B3%B5%EB%8D%B0%EC%9D%B4%ED%84%B0-xml\" aria-label=\"공공데이터 xml permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>공공데이터 XML</h2>\n<ul>\n<li>csv (comma separated value) : 용량이 작지만 구조적이지 못함</li>\n<li>XML (Extensible markup language) : 구조적,정확한 문법이 필요, 큰용량</li>\n<li>Json(javascript Object notation) : 구조를 가지며 객체로 다른 언어와 호환</li>\n</ul>\n<h3 id=\"xml\" style=\"position:relative;\"><a href=\"#xml\" aria-label=\"xml permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>XML</h3>\n<ul>\n<li>Markup Language\n<ul>\n<li>태그등을 이용하여 문서나 데이터의 구조를 명시하는 언어</li>\n<li>HTML, SGML, …</li>\n</ul>\n</li>\n<li>HTML과 달리 필요에 따라서 태그를 확장해서 사용 가능</li>\n<li>정확한 문법을 지켜야 동작 : Well formed</li>\n</ul>\n<h3 id=\"기본문법\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EB%B3%B8%EB%AC%B8%EB%B2%95\" aria-label=\"기본문법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기본문법</h3>\n<ul>\n<li>문서의 시작은<code class=\"language-text\">&lt;?xml version=”1.0” encoding=”UTF-8”?></code>로 한다</li>\n<li>반드시 root element가 존재해야 한다\n<ul>\n<li>나머지 태그들은 tree 형태로 구성</li>\n</ul>\n</li>\n<li>시작태그와 종료태그는 일치해야 한다</li>\n<li>시작태그는 key-value 구조의 속성을 가질 수 있다.\n<ul>\n<li>속성 값은 “”또는 ‘’로 묶어서 표현</li>\n</ul>\n</li>\n<li>태그는 대소문자를 구분</li>\n</ul>\n<h3 id=\"valid\" style=\"position:relative;\"><a href=\"#valid\" aria-label=\"valid permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>valid</h3>\n<ul>\n<li>xml 태그는 자유롭게 생성하기 때문에 최초 작성자의 의도대로 작성되는지 확인할 필요\n<ul>\n<li>문서의 구조와 적절한 요소, 속성들의 개수, 순서들이 잘 지켜졌는가</li>\n<li>DTD 또는 Schema를 이용해서 문서의 규칙 작성</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"문서의-parsing---sax\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%84%9C%EC%9D%98-parsing---sax\" aria-label=\"문서의 parsing   sax permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문서의 Parsing - SAX</h2>\n<h3 id=\"파싱\" style=\"position:relative;\"><a href=\"#%ED%8C%8C%EC%8B%B1\" aria-label=\"파싱 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>파싱</h3>\n<ul>\n<li>문서에서 필요한 정보를 얻기 위해 태그를 구별하고 내용을 추출하는 과정\n<ul>\n<li>전문적인 parser 활용</li>\n</ul>\n</li>\n<li>SAX parser\n<ul>\n<li>Simple API for XML parser</li>\n<li>문서를 읽으면서 태그의 시작, 종료등 이벤트 기반으로 처리하는 방식</li>\n</ul>\n</li>\n<li>DOM parser\n<ul>\n<li>Document Object Model</li>\n<li>문서를 다 읽고 난 후 문서 구조 전체를 자료구조에 저장하여 탐색하는 방식</li>\n</ul>\n</li>\n<li>SAX는 빠르고 한번에 처리하기 때문에 다양한 탐색이 어렵다</li>\n<li>DOM은 다양한 탐색이 가능하지만 느리고 무거우며 큰 문서를 처리하기 어렵다.</li>\n</ul>\n<h3 id=\"dom-parsing\" style=\"position:relative;\"><a href=\"#dom-parsing\" aria-label=\"dom parsing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DOM parsing</h3>\n<ul>\n<li>전체 문서를 읽어 tree구조를 메모리에 올려놓음</li>\n<li>여러번의 탐색 시 문서를 다시 읽어들일 필요 없음\n<ul>\n<li>재탐색 시 유리</li>\n</ul>\n</li>\n<li>여러 검색 api를 통한 다양한 탐색이 가능</li>\n<li>문서의 크기가 커지면 메모리 사용량이 늘어남\n<ul>\n<li>큰 문서를 처리하는데 불리</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"sax-parsing\" style=\"position:relative;\"><a href=\"#sax-parsing\" aria-label=\"sax parsing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SAX parsing</h3>\n<ul>\n<li>단순 한 번의 검색 시 빠르게 처리가 가능</li>\n<li>이벤트 기반의 탐색 방식\n<ul>\n<li>character 이벤트, 시작태그와 종료태그 만날 시 이벤트 발생</li>\n</ul>\n</li>\n<li></li>\n</ul>\n<h3 id=\"json\" style=\"position:relative;\"><a href=\"#json\" aria-label=\"json permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JSON</h3>\n<ul>\n<li>javascript Object Notation</li>\n<li>간결한 문법, 단순한 텍스트, 적은 용량으로 대부분의 언어, 대부분의 플랫폼에서 사용 가능</li>\n<li>객체를 key-value의 쌍으로 관리</li>\n</ul>\n<h2 id=\"swing\" style=\"position:relative;\"><a href=\"#swing\" aria-label=\"swing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Swing</h2>\n<ul>\n<li>Java Application에서 사용되는 GUI를 제공하는 추상적으로 정의된 도구 모음</li>\n<li>Container\n<ul>\n<li>다른 컴포넌트들은 배치하기 위한 컴포넌트</li>\n<li>Container는 다른 Container를 포함할 수 잇고 나중에 복합적인 Layout을 구성할 수 있게 한다.</li>\n<li>JFrame : 독립적으로 사용될 수 있으며 타이틀과 사이즈를 조절할 수 있는 버튼을 가짐</li>\n<li>JPanel : 반드시 다른 Container에 포함되어야 하며 복합적인 레이아웃 구성에 사용</li>\n</ul>\n</li>\n<li>다른 Component\n<ul>\n<li>JButton b;</li>\n<li>JLabel l;</li>\n<li>JTextField f;</li>\n<li>JTable table;</li>\n<li>JList list;</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"layout과-layoutmanager\" style=\"position:relative;\"><a href=\"#layout%EA%B3%BC-layoutmanager\" aria-label=\"layout과 layoutmanager permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Layout과 LayoutManager</h3>\n<ul>\n<li>Layout : Component들을 Container에 어떻게 배치할 것인가</li>\n<li>LayoutManager : Container별로 Component의 위치와 크기, 배치 방식을 결정하는 객체</li>\n<li>FlowLayout\n<ul>\n<li>JPanel의 기본 LayoutManager</li>\n<li>요소를 가로로 물 흐르듯이 배치</li>\n</ul>\n</li>\n<li>BoardLayout\n<ul>\n<li>JFrame의 기본 LayoutManager;</li>\n<li>특별한 영역, North,South,West,East,Center에 각각의 컴포넌트들을 배치한다.\n<ul>\n<li>Component들을 배치할 대는 영역을 지정(BoardLayout.CENTER or “CENTER”)</li>\n<li>사용하지 않는 공간은 크기가 0*0이 되고 Center가 기본이다.</li>\n<li>각각의 영역에는 하나의 Component들을 담을 수 있고 중복해서 담을 경우는 마지막에 담은 컴포넌트만 보인다.</li>\n<li>크기를 조절할 때 North와 South는 좌우로, East와 West는 상하로만 늘어난다. Center는 양방향</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"이벤트-처리-클래스\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EC%B2%98%EB%A6%AC-%ED%81%B4%EB%9E%98%EC%8A%A4\" aria-label=\"이벤트 처리 클래스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이벤트 처리 클래스</h3>\n<ul>\n<li>XX Listener\n<ul>\n<li>이벤트 처리에 대한 메서드들을 정의한 인터페이스로 handler는 이 인터페이스를 구현</li>\n<li>하나의 component에 여러개의 event handler를 붙일 수 있다.\n<ul>\n<li>Implements ActionListener, WindowListener</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>XX EventAdapter\n<ul>\n<li>Listener를 implements를 할 경우 사용하지도 않는 이벤트 핸들러 까지 다 구현해야 하는 단점</li>\n<li>xxxEventAdapter implments XXListener</li>\n</ul>\n</li>\n</ul>","frontmatter":{"date":"July 31, 2022","title":"자바 기초 3","categories":"JAVA","author":"sangzun","emoji":"😂"},"fields":{"slug":"/JAVA/자바기초3/"}},"site":{"siteMetadata":{"siteUrl":"https://github.com/sangzun-han","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/JAVA/자바기초2/","nextSlug":"/JAVA/자바기초1/","prevSlug":"/JAVA/자바기초3/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}