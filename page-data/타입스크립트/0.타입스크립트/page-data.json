{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/타입스크립트/0.타입스크립트/",
    "result": {"data":{"cur":{"id":"13dfcfe0-39f0-5ec3-890c-263d9e73092e","html":"<h1 id=\"1-타입스크립트\" style=\"position:relative;\"><a href=\"#1-%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8\" aria-label=\"1 타입스크립트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 타입스크립트</h1>\n<h3 id=\"what--why-\" style=\"position:relative;\"><a href=\"#what--why-\" aria-label=\"what  why  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What &#x26; Why ?</h3>\n<ol>\n<li>\n<p>Typed superset of Javascript</p>\n</li>\n<li>\n<p>Complies down to plain JavaScript</p>\n</li>\n<li>\n<p>Relation to JavaScript</p>\n</li>\n<li>\n<p>Optional static typing and type interface</p>\n</li>\n<li>\n<p>IDE support</p>\n</li>\n<li>\n<p>Rapid growth and use</p>\n</li>\n</ol>\n<h3 id=\"variable-types\" style=\"position:relative;\"><a href=\"#variable-types\" aria-label=\"variable types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Variable Types</h3>\n<p>타입스크립트가 지원하는 데이터타입은 <code class=\"language-text\">number</code> <code class=\"language-text\">string</code> <code class=\"language-text\">boolean</code> <code class=\"language-text\">array</code> <code class=\"language-text\">tuple</code> <code class=\"language-text\">enum</code> <code class=\"language-text\">any</code> <code class=\"language-text\">void</code> <code class=\"language-text\">null</code> <code class=\"language-text\">undefined</code> <code class=\"language-text\">never</code> <code class=\"language-text\">object</code> 와 같은것들이 있다.</p>\n<ul>\n<li>number, string, boolean원시데이터 타입 <code class=\"language-text\">number</code> <code class=\"language-text\">string</code> <code class=\"language-text\">boolean</code> 을 명시적으로 설정한 변수 선언은 아래와 같이 작성한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let isBeginner: boolean = true;\nlet total: number = 0;\nlet name: string = 'Vishwas';\nlet sentence: string = `My name is ${name} I am a beginner`;</code></pre></div>\n<ul>\n<li>any : 변수 선언시 어떤 타입을 할당해야 할지 알지 못할경우 어떤 타입도 할당 가능하도록 <code class=\"language-text\">any</code> 를 설정할 수 있다. 변수 선언과 초기화 과정에서 값을 할당하지 않으면 암묵적으로 <code class=\"language-text\">any</code> 타입이 지정된다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let value: any = 100;\nvalue = true;\n\nlet value;\nvalue = false;\nvalue = 'nono';</code></pre></div>\n<ul>\n<li>array : 타입스크립트에서 <code class=\"language-text\">array</code> 을 선언하는 방법은 아래와 같이 작성한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let list1: number[] = [1, 2, 3]; // 숫자만 허용\nlet list2: Array&lt;number> = [1, 2, 3]; // 숫자만 허용\nlet selects: (number | string)[] = [102, 'o']; // 특정 데이터 타입만 허용</code></pre></div>\n<ul>\n<li>tuple : <code class=\"language-text\">tuple</code> 은 배열타입을 보다 특수한 형태로 사용할 수 있는 타입이다. <code class=\"language-text\">tuple</code>에 명시적으로 지정된 형식에 따라 순서를 설정해야한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let person: [string, number] = ['kim', 12];</code></pre></div>\n<ul>\n<li>enum : <code class=\"language-text\">enum</code> 은 열거형 데이터 타입이다. 멤버라 불리는 값의 집합을 이루는 자료형이다. 기억하기 어려운 숫자나 문자대신 이름으로 접근할 수 있다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">enum Color {\n  Red,\n  Blue,\n  Green,\n}\n\nlet green: number = Color.Green; // 2\n\nenum Color {\n  Red,\n  Blue = 7,\n  Green,\n}\n\nlet green: number = Color.Green; // 8</code></pre></div>\n<ul>\n<li>null,undefined : <code class=\"language-text\">null</code> <code class=\"language-text\">undefined</code> 은 각각 하나의 타입으로 처리되며 아래와 같이 사용할 수 있다. <code class=\"language-text\">null</code> 로 타입이 설정된 변수에 <code class=\"language-text\">null</code> 값이 아닌 값이 할당되면 오류를 출력한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let myNull: null = null;\nlet myUndefined: undefined = undefined;</code></pre></div>\n<p><code class=\"language-text\">tsconfig.json</code> 에서 strickNullChecks가 true로 설정되어 있으면 모든 데이터 타입은 null, undefined을 할당받을 수 없다. 이를 해결 하기 위해서는 <code class=\"language-text\">any</code> 또는 <code class=\"language-text\">|</code> 을 이용해야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let myName: string | null = null;\nif (!myName) myName = 'kim';</code></pre></div>\n<ul>\n<li>never : <code class=\"language-text\">never</code> 는 일반적으로 함수의 리턴 타입으로 사용된다. 함수의 리턴타입을 <code class=\"language-text\">never</code> 가 사용될 경우 항상 오류를 출력하거나 리턴값을 절대로 내보내지 않음을 뜻한다. 즉 무한루프와 같다.</li>\n</ul>\n<p><code class=\"language-text\">never</code> 타입을 지정한 변수에 다른타입은 할당할 수 없다.</p>\n<h3 id=\"functions\" style=\"position:relative;\"><a href=\"#functions\" aria-label=\"functions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Functions</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function add(num1: number,num2: number) {\n\treturn num1 + num2;\n}\n\nadd(5,10);\nadd(5,'10'); // error</code></pre></div>\n<p>타입스크립트는 모든 파라미터가 함수에 전달되어야 한다고 가정한다. 따라서 함수를 실행할 때 매개변수의 숫자와 함수의 파라미터의 수가 일치해야 한다. 이때 파라미터 변수 뒤에 <code class=\"language-text\">?</code> 를붙이면 Optional을 사용할 수 있다.</p>\n<p><code class=\"language-text\">?</code> 는 매개변수의 값이 있을수도 있고 없을수도 있는 상황에서 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function add(num1: number, num2?: number) {\n\tif(num2) return num1+num2;\n\telse return num1;\n}</code></pre></div>\n<h3 id=\"interface\" style=\"position:relative;\"><a href=\"#interface\" aria-label=\"interface permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Interface</h3>\n<p><code class=\"language-text\">interface</code> 는 변수의 타입으로 사용할 수 있다. 이 때 인터페이스를 타입으로 선언한 변수는 interface를 준수해야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">interface Todo {\n\tid: number;\n\tcontent: string;\n\tcompleted: boolean;\n}\n\nlet todo:Todo;\n\ntodo = {id:1, content: 'ts', completed: false};\n\nlet todos: Todo[] = [];\nfunction addTodo(todo: Todo) {\n\ttodos = [...todos, todo];\n}\n\nconst newTodo: Todo = {id:1, content: 'ts', completed: false};\naddTodo(newTodo)</code></pre></div>\n<h3 id=\"class\" style=\"position:relative;\"><a href=\"#class\" aria-label=\"class permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Class</h3>\n<p>타입스크립트의 클래스는 접근제어자를 설정할 수 있다.</p>\n<p><code class=\"language-text\">public</code> : 클래스 외부에서 접근 가능 (기본값)</p>\n<p><code class=\"language-text\">private</code> : 클래스 내부에서만 접근 가능</p>\n<p><code class=\"language-text\">protected</code> : 자신 클래스를 포함한 서브클래스에서만 접근 가능</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class Employee {\n\temployeeName: string;\n\n\tconstructor(name: string) {\n\t\tthis.employeeName = name;\n\t}\n\n\tgreet() {\n\t\tconsole.log(`Good Morning ${this.employeeName}`);\n\t}\n}\n\nlet emp1 = new Employee('Kim'); // Kim\nemp1.greet() // Good Moring Kim</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class Manager extends Employee {\n    constructor(managerName: string) {\n        super(managerName);\n    }\n\n    delegateWork() {\n        console.log(`Manager delegation tasks`)\n    }\n}\n\nlet m1 = new Manager('Lee');\nm1.delegateWork(); // Manager delegation tasks\nm1.greet(); // Good Morning Lee\nconsole.log(m1.employeeName) // Lee</code></pre></div>","excerpt":"1. 타입스크립트 What & Why ? Typed superset of Javascript Complies down to plain JavaScript Relation to JavaScript Optional static typing and type interface IDE support Rapid growth and use Variable Types 타입스크립트가 지원하는 데이터타입은             와 같은것들이 있다. number, string, boolean원시데이터 타입    을 명시적으로 설정한 변수 선언은 아래와 같이 작성한다. any : 변수 선언시 어떤 타입을 할당해야 할지 알지 못할경우 어떤 타입도 할당 가능하도록  를 설정할 수 있다. 변수 선언과 초기화 과정에서 값을 할당하지 않으면 암묵적으로  타입이 지정된다. array : 타입스크립트에서  을 선언하는 방법은 아래와 같이 작성한다. tuple :  은 배열타입을 보다 특수한 형태로 사용할 수 있는 …","frontmatter":{"date":"April 13, 2022","title":"00. 타입스크립트","categories":"typescript","author":"sangzun","emoji":null},"fields":{"slug":"/타입스크립트/0.타입스크립트/"}},"next":{"id":"e588837e-6039-521d-bad6-bbd52635ec5d","html":"<p>리액트를 이용하여 간단히 당근마켓 클론코딩을 진행했습니다.</p>\n<h2 id=\"구현사항\" style=\"position:relative;\"><a href=\"#%EA%B5%AC%ED%98%84%EC%82%AC%ED%95%AD\" aria-label=\"구현사항 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>구현사항</h2>\n<p><a href=\"https://silver-lumber-2a3.notion.site/8a9f27e26ce042d4b68f9ec86ce67cc9\">구현사항</a></p>\n<p><a href=\"https://github.com/sangzun-han/citrus-market\">Github</a></p>\n<h2 id=\"정리\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A6%AC\" aria-label=\"정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정리</h2>\n<ol>\n<li>components 폴더 안에 모든 컴포넌트가 존재하다보니 컴포넌트들을 찾는 일이 번거로워졌다. 이후에 componets, pages 폴더로 나누긴 했지만 조금 더 세세하게 컴포넌트들을 분리할 필요성을 느꼈다.</li>\n</ol>\n<h3 id=\"변경-후\" style=\"position:relative;\"><a href=\"#%EB%B3%80%EA%B2%BD-%ED%9B%84\" aria-label=\"변경 후 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>변경 후</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">├── app.css\n├── app.jsx\n├── components\n│   ├── 404\n│   │   ├── notFound.jsx\n│   │   └── notFound.module.css\n│   ├── chatList\n│   │   ├── chatList.jsx\n│   │   └── chatList.module.css\n│   ├── deleteModal\n│   │   ├── deleteModal.jsx\n│   │   └── deleteModal.module.css\n│   ├── editor\n│   │   ├── editor.jsx\n│   │   ├── editorHeader.jsx\n│   │   ├── editorHeader.module.css\n│   │   ├── editorInfo.jsx\n│   │   ├── editorInfo.module.css\n│   │   ├── image.jsx\n│   │   ├── image.module.css\n│   │   ├── moreImage.jsx\n│   │   └── moreImage.module.css\n│   ├── follower\n│   │   ├── follower.jsx\n│   │   ├── followerHeader.jsx\n│   │   ├── followerHeader.module.css\n│   │   ├── followerInfo.jsx\n│   │   └── followerInfo.module.css\n│   ├── following\n│   │   ├── following.jsx\n│   │   ├── followingInfo.jsx\n│   │   └── followingInfo.module.css\n│   ├── header\n│   │   ├── header.jsx\n│   │   └── header.module.css\n│   ├── home\n│   │   ├── feed.jsx\n│   │   ├── feedInfo.jsx\n│   │   ├── feedInfo.module.css\n│   │   ├── home.jsx\n│   │   └── home.module.css\n│   ├── login\n│   │   ├── login.jsx\n│   │   └── login.module.css\n│   ├── loginEmail\n│   │   ├── loginEmail.jsx\n│   │   └── loginEmail.module.css\n│   ├── logoutModal\n│   │   ├── logoutModal.jsx\n│   │   └── logoutModal.module.css\n│   ├── nav\n│   │   ├── nav.jsx\n│   │   └── nav.module.css\n│   ├── postDetail\n│   │   ├── comment.jsx\n│   │   ├── comment.module.css\n│   │   ├── commentInfo.jsx\n│   │   ├── commentInfo.module.css\n│   │   ├── commentInput.jsx\n│   │   ├── commentInput.module.css\n│   │   ├── postDetail.jsx\n│   │   ├── postDetailInfo.jsx\n│   │   └── postDetailInfo.module.css\n│   ├── postModal\n│   │   ├── postModal.jsx\n│   │   └── postModal.module.css\n│   ├── productUpload\n│   │   ├── productHeader.jsx\n│   │   ├── productHeader.module.css\n│   │   ├── productUpload.jsx\n│   │   ├── productUploadInfo.jsx\n│   │   └── productUploadInfo.module.css\n│   ├── profile\n│   │   ├── album.jsx\n│   │   ├── album.module.css\n│   │   ├── albumInfo.jsx\n│   │   ├── albumInfo.module.css\n│   │   ├── postArea.jsx\n│   │   ├── postArea.module.css\n│   │   ├── postAreaInfo.jsx\n│   │   ├── postAreaInfo.module.css\n│   │   ├── postAreaTop.jsx\n│   │   ├── postAreaTop.module.css\n│   │   ├── product.jsx\n│   │   ├── product.module.css\n│   │   ├── productInfo.jsx\n│   │   ├── productInfo.module.css\n│   │   ├── profile.jsx\n│   │   ├── profile.module.css\n│   │   ├── profileHeader.jsx\n│   │   ├── profileHeader.module.css\n│   │   ├── profileInfo.jsx\n│   │   └── profileInfo.module.css\n│   ├── profileUpdate\n│   │   ├── profileUpdate.jsx\n│   │   ├── profileUpdate.module.css\n│   │   ├── profileUpdateHeader.jsx\n│   │   ├── profileUpdateHeader.module.css\n│   │   ├── profileUpdateInfo.jsx\n│   │   └── profileUpdateInfo.module.css\n│   ├── serach\n│   │   ├── search.jsx\n│   │   ├── search.module.css\n│   │   ├── searchBody.jsx\n│   │   ├── searchBody.module.css\n│   │   ├── searchHeader.jsx\n│   │   ├── searchHeader.module.css\n│   │   └── searchResult.jsx\n│   ├── settingModal\n│   │   ├── settingModal.jsx\n│   │   └── settingModal.module.css\n│   ├── signup\n│   │   ├── membership.jsx\n│   │   ├── membership.module.css\n│   │   ├── profile.jsx\n│   │   ├── profile.module.css\n│   │   └── signup.jsx\n│   ├── splash\n│   │   ├── splash.jsx\n│   │   └── splash.module.css\n│   └── userProfile\n│       ├── album.jsx\n│       ├── album.module.css\n│       ├── albumInfo.jsx\n│       ├── albumInfo.module.css\n│       ├── postArea.jsx\n│       ├── postArea.module.css\n│       ├── postAreaInfo.jsx\n│       ├── postAreaInfo.module.css\n│       ├── postAreaTop.jsx\n│       ├── postAreaTop.module.css\n│       ├── product.jsx\n│       ├── product.module.css\n│       ├── productInfo.jsx\n│       ├── productInfo.module.css\n│       ├── userProfile.jsx\n│       ├── userProfile.module.css\n│       ├── userProfileInfo.jsx\n│       └── userProfileInfo.module.css\n├── constants\n│   └── index.js\n├── index.css\n├── index.js\n├── pages\n│   ├── chat.jsx\n│   ├── feed.jsx\n│   ├── followers.jsx\n│   ├── followings.jsx\n│   ├── index.jsx\n│   ├── login.jsx\n│   ├── otherProfile.jsx\n│   ├── post.jsx\n│   ├── product.jsx\n│   ├── profiles.jsx\n│   ├── profilesUpdate.jsx\n│   ├── register.jsx\n│   ├── search.jsx\n│   └── writing.jsx\n└── service\n    ├── cookie.js\n    └── fetcher.js\n</code></pre></div>\n<ol start=\"2\">\n<li>\n<p>state관리에서 번번한 오류가 계속해서 발생하고 현재의 값 확인이 복잡해졌다. 중간에 redux를 배워서 넣을까 라는 생각을 했지만 거의 완성단계에 와서 넣으면 리팩토링하는데 더 시간을 쏟을거 같아서 그대로 진행했다. redux가 됐든 mobx가 됐든 전역상태관리 라이브러리를 배워두도록 해야겠다.</p>\n</li>\n<li>\n<p>Follow,Following 목록에서 팔로우,팔로잉을 취소할 경우 팔로우 리스트, 팔로잉 리스트의 값이 변해야 하지만 변하지 않는다. useEffect를 이용해서 해결할 수 있을 줄 알았지만 아직 해결하지 못했다.</p>\n</li>\n</ol>\n<p><img src=\"/follow.gif\" alt=\"follow\"></p>\n<ol start=\"4\">\n<li>게시글을 작성할 때 그 글의 길이가 얼마나 될지 모르기 때문에 textarea의 height를 자동으로 높이가 변경되는 방법을 사용했다. 처음엔 css를 조절을 시도했지만 실패해서 useRef를 이용해서 직접 dom에 접근하여 변경해주었다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const handleResizeHeight = useCallback(() => {\n    if (textAreaRef.current.value === null) return;\n    textAreaRef.current.style.height = \"38px\";\n    textAreaRef.current.style.height = textAreaRef.current.scrollHeight + \"px\";\n\n    if (textAreaRef.current.scrollHeight > 400) {\n      textAreaRef.current.style.height = 400 + \"px\";\n      textAreaRef.current.style.overflowY = \"auto\";\n    }\n    checkValid();\n}, []);</code></pre></div>\n<ol start=\"5\">\n<li>map을 사용할때 index값을 key로 사용하면 안되는 이유 -> 데이터가 추가,삭제,정렬될 경우 배열이 새로 바뀌게 되면서 컴포넌트가 재렌더링 되고 이때 index값을 다시 매핑하게된다. 만약 가장 앞에 데이터를 추가한다면 기존에 index 0번에 있던 값이 추가된 데이터가 0번째 요소가 된다.</li>\n</ol>\n<hr>","frontmatter":{"date":"April 01, 2022","title":"당근마켓 클론","categories":"프로젝트","author":"sangzun","emoji":"😂"},"fields":{"slug":"/프로젝트/citrus/"}},"prev":{"id":"9b824f58-3eb0-58e8-848a-b8719a71044c","html":"<h1 id=\"타입스크립트-vs-자바스크립트\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-vs-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8\" aria-label=\"타입스크립트 vs 자바스크립트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입스크립트 vs 자바스크립트</h1>\n<p>모든 자바스크립트 프로그램은 타입스크립트 프로그램이다. 하지만 반대는 성립하지 않는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function greet(who: string) {\n  console.log(\"Hello\", who);\n}</code></pre></div>\n<p>위 코드에서 <code class=\"language-text\">string</code>은 타입스크립트에서 쓰이는 타입 구문이다. 따라서 자바스크립트에서는 오류를 출력한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let city = \"new york city\";\nconsole.log(city.toUppercase());</code></pre></div>\n<p>위 코드에서 타입 구문이 없지만 타입 체커는 문제점을 찾아낸다. city 변수가 문자열이라는 것을 알려주지 않아도 타입스크립트는 초기값으로부터 타입을 추론한다.</p>\n<p>또한 타입스크립트는 자바스크립트 런타임 동작을 모델링하는 타입 시스템을 가지고 있기 때문에 런타임 오류를 발생시키는 코드를 찾아내려고 한다. 하지만 모든 오류를 찾지는 못한다. 타입 체커를 통과해도 오류를 발생시키는 코드는 충분히 존재할 수 있다.</p>\n<h1 id=\"1-타입스크립트-설정\" style=\"position:relative;\"><a href=\"#1-%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%84%A4%EC%A0%95\" aria-label=\"1 타입스크립트 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 타입스크립트 설정</h1>\n<p>타입스크립트 컴파일러는 많은 설정을 가지고 있다. <code class=\"language-text\">tsconfing.json</code>파일을 통해서 설정하거나 커맨드라인에서 사용할 수 있다.</p>\n<p>설정을 사용하기 위해서는 <code class=\"language-text\">noImplicitAny</code>와 <code class=\"language-text\">strictNullChecks</code>를 이해해야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function add(x,y) {\n  return a+b;\n}\n\nfunction add(x:nubmer, y:number) {\n  return x+y;\n}</code></pre></div>\n<p><code class=\"language-text\">noImplicitAny</code>는 변수들이 미리 정의된 타입을 가져야 하는지 여부를 판단한다. noImplicitAny가 해제되어 있을때 위의 첫번째 코드는 유효하다.</p>\n<p>타입스크립트는 타입 정보를 가질때 효과적인인 언어기 때문에 noImplicitAny를 설정하는것이 좋다.</p>\n<p><code class=\"language-text\">strictNullChecks</code>는 null과 undefined을 모든 타입에서 허용되는지 여부를 설정한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const x: number = null;</code></pre></div>\n<p>strictNullChecks가 해제되었다면 위의 코드는 유효한 값이지만 strictNullChecks를 설정하면 오류가된다.</p>\n<h1 id=\"2-코드-생성과-타입\" style=\"position:relative;\"><a href=\"#2-%EC%BD%94%EB%93%9C-%EC%83%9D%EC%84%B1%EA%B3%BC-%ED%83%80%EC%9E%85\" aria-label=\"2 코드 생성과 타입 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 코드 생성과 타입</h1>\n<ul>\n<li>코드 생성은 타입 시스템과 무관하다. 타입스크립트 타입은 런타임 동작이나 성능에 영향을 주지 않는다.</li>\n<li>타입오류가 존재하더라도 컴파일은 가능하다.</li>\n<li>타입스크립트 타입은 런타임에 사용할 수 없다. 런타임에 타입을 지정하려면 타입 정보 유지를 위한 별도의 방법이 필요하며 일반적으로는 태그된 유니온과 속성 체크 방법을 사용한다. 또는 클래스 같이 타입스크립트 타입과 런타임 값, 둘 다 제공하는 방법이 있다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// 속성 체크 방법\ninterface Square {\n    width: number;\n}\n\ninterface Retangle extends Square {\n    height: number;\n}\n\ntype Shape = Square | Retangle;\n\nfunction calculateArea(shape:Shape) {\n    if ('height' in shape) {\n        shape;\n        return shape.width * shape.height;\n    } else {\n        shape;\n        return shape.width * shape.width;\n    }\n}\n\n// 태그된 유니온\ninterface Square {\n    kind: 'square';\n    width: number;\n\n}\n\ninterface Retangle {\n    kind: 'retangle';\n    height: number;\n    width: number;\n\n}\n\ntype Shape = Square | Retangle;\n\nfunction calculateArea(shape: Shape) {\n    if (shape.kind === 'retangle') {\n        shape;\n        return shape.width * shape.height;\n    } else {\n        shape;\n        return shape.width * shape.width;\n    }\n}</code></pre></div>\n<h1 id=\"3-구조적-타이핑\" style=\"position:relative;\"><a href=\"#3-%EA%B5%AC%EC%A1%B0%EC%A0%81-%ED%83%80%EC%9D%B4%ED%95%91\" aria-label=\"3 구조적 타이핑 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 구조적 타이핑</h1>\n<p><code class=\"language-text\">duck typing</code> : 객체가 어떤 타입에 부합하는 변수와 메서드를 가질 경우 객체를 해당 타입에 속하는것으로 간주하는 방식</p>\n<p>자바스크립트는 덕타이핑 기반이다. 어떤 함수의 매개변수 값이 모두 제대로 주어진다면 그 값이 어떻게 만들어졌는지 신경쓰지 않고 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">interface Vector2D {\n  x: number;\n  y: number;\n}\n\ninterface NamedVector {\n  name: string;\n  x: number;\n  y: number;\n}\n\nfunction calculateLength(v: Vector2D) {\n  return Math.sqrt(v.x * v.x + v.y * v.y);\n}\n\nconst v: NamedVector = {x: 3, y: 4, name: 'Zee' };\ncalculateLength(v); //5</code></pre></div>\n<p>위 코드에서 NamedVector의 구조가 Vector2D와 호환되기 때문에 calculateLength 호출이 가능하다. 즉 타입스크립트 타입시스템은 <code class=\"language-text\">구조적으로</code>타입이 맞기만 한다면 이를 허용한다 이것이 구조적 타이핑이다.</p>\n<ul>\n<li>자바스크립트는 덕타이핑 기반이고 타입스크립트는 구조적 타이핑을 사용한다.</li>\n<li>타입은 <code class=\"language-text\">봉인</code> 되어 있지 않다.</li>\n<li>클래스 또한 구조적 타이핑을 따르고 있으므로 클래스의 인스턴스가 예상과 다를 수 있다.</li>\n<li>구조적 타이핑은 유닛테스트시에 유용하다.</li>\n</ul>\n<h1 id=\"4-any-타입-지양\" style=\"position:relative;\"><a href=\"#4-any-%ED%83%80%EC%9E%85-%EC%A7%80%EC%96%91\" aria-label=\"4 any 타입 지양 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. any 타입 지양</h1>\n<p>타입스크립트의 타입 시스템은 <code class=\"language-text\">gradual</code>이고 <code class=\"language-text\">optional</code>이다. 코드에 타입을 조금씩 추가할 수 있기 때문에 점진적이며 언제든지 타입 체커를 해제할 수 있기 때문에 선택적이다. 이것들의 핵심은 <code class=\"language-text\">any</code>다.</p>\n<ul>\n<li><code class=\"language-text\">any</code>타입을 사용하면 타입체커와 타입스크립트의 여러가지 서비스를 무력화시킨다. any타입은 문제점을 감추고 타입 시스템의 신뢰도를 떨어뜨린다. 사용을 자제하는것이 좋다.</li>\n</ul>","frontmatter":{"date":"April 15, 2022","title":"01. 타입스크립트 알아보기","categories":"typescript","author":"sangzun","emoji":null},"fields":{"slug":"/타입스크립트/1.타입스크립트 알아보기/"}},"site":{"siteMetadata":{"siteUrl":"https://github.com/sangzun-han","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/타입스크립트/0.타입스크립트/","nextSlug":"/프로젝트/citrus/","prevSlug":"/타입스크립트/1.타입스크립트 알아보기/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}