{"version":3,"file":"component---src-templates-blog-template-js-8088c20a1a760323f3b2.js","mappings":"4MA4BA,MAxBA,SAAoB,GAAW,IAATA,EAAQ,EAARA,KACpB,OACE,0BAAQC,UAAU,eACfD,EAAAA,OAAc,uBAAKC,UAAU,SAASD,EADzC,OAEE,uBAAKC,UAAU,QACb,uBAAKA,UAAU,cACZD,EAAA,gBAAoB,mBACnB,wBAAMC,UAAN,WAA2BC,IAA3B,EAA0CC,GAAE,UAAYC,GADrC,QAQzB,sBAAIH,UAAU,SAASD,EAZzB,OAaE,uBAAKC,UAAU,QACb,uBAAKA,UAAU,UAAf,aACY,8BAASD,EADrB,QADF,SAIGA,EAlBP,QCsBF,MAvBA,SAAuB,GAAyB,IAAvBK,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,SACjC,OACE,uBAAKL,UAAU,kBACb,uBAAKA,UAAU,+BACZK,GACC,wBAAML,UAAN,iBAAiCC,IAAKI,EAAtC,GAAmDH,GAAIG,EAASC,MAC9D,uBAAKN,UAAU,aADjB,QAEE,uBAAKA,UAAU,SAASK,EALhC,SASE,uBAAKL,UAAU,+BACZI,GACC,wBAAMJ,UAAN,iBAAiCC,IAAKG,EAAtC,GAAmDF,GAAIE,EAASE,MAC9D,uBAAKN,UAAU,aADjB,QAEE,uBAAKA,UAAU,SAASI,EAdlC,W,SCMF,MARA,SAAqB,GAAW,IAATG,EAAQ,EAARA,KACrB,OACE,uBAAKP,UAAU,gBACb,uBAAKA,UAAL,WAA0BQ,wBAAyB,CAAEC,OAAQF,OC6BnE,MA9BA,SAAoB,GAAiB,IAAfG,EAAc,EAAdA,KAAMC,EAAQ,EAARA,KACpBC,GAAUC,EAAAA,EAAAA,aACVC,GAAqBC,EAAAA,EAAAA,SAA3B,GAyBA,OAvBAC,EAAAA,EAAAA,YAAU,WACR,GAAKJ,EAAD,UAAoBE,EAAxB,SACA,IAAMG,EAAmBC,aAAAA,QAAzB,cAEMC,EAAaC,SAAAA,cAAnB,UACMC,EAAmB,CACvBC,IAbN,gCAcMZ,KAFuB,EAGvBa,OAdN,SAeMC,MAAOC,KAAAA,MAAAA,GAAAA,cAJgB,eAKvBC,MALuB,UAMvBC,OANuB,EAOvB,aAPuB,WAQvBC,YAAa,aAGfC,OAAAA,KAAAA,GAAAA,SAAsC,YACpCV,EAAAA,aAAAA,EAAmCE,EAAnCF,OAEFP,EAAAA,QAAAA,YAAAA,GACAE,EAAAA,SAAAA,KACC,CAACJ,EAAK,EArBTM,IAuBO,uBAAKhB,UAAL,aAA4B8B,IAAKlB,KCJ1C,MAlBA,SAAsB,GAAW,IAAD,IAARmB,EAAQ,EAARA,KAChBC,EAAU,IAAI,EAAJ,EAASD,EAAzB,KACM3B,EAAW2B,EAAAA,MAAa,IAAI,EAAJ,EAASA,EAAvC,MACM1B,EAAW0B,EAAAA,MAAa,IAAI,EAAJ,EAASA,EAAvC,MACQE,GAAR,UAAqBF,EAArB,yBAAqBA,EAArB,uBACMG,EAAiBD,MAAAA,GAAH,UAAGA,EAAH,+BAAGA,EAAvB,KAEA,OACE,yBACE,qBAAKE,MAAOH,MAAAA,OAAF,EAAEA,EAAZ,MAA4BI,YAAaJ,MAAAA,OAAF,EAAEA,EAASK,UAClD,mBAAYtC,KAAMiC,IAClB,mBAAazB,KAAMyB,EAAQzB,OAC3B,mBAAeH,SAAf,EAAmCC,SAAUA,IAC5C6B,GAAkB,mBAAYxB,KAAZ,EAAkCC,KAAMqB,EAAQ1B","sources":["webpack://zoomkoding.com/./src/components/post-header/index.js","webpack://zoomkoding.com/./src/components/post-navigator/index.js","webpack://zoomkoding.com/./src/components/post-content/index.js","webpack://zoomkoding.com/./src/components/utterances/index.js","webpack://zoomkoding.com/./src/templates/blog-template.js"],"sourcesContent":["import { Link } from 'gatsby';\nimport React from 'react';\nimport './style.scss';\n\nfunction PostHeader({ post }) {\n  return (\n    <header className=\"post-header\">\n      {post.emoji && <div className=\"emoji\">{post.emoji}</div>}\n      <div className=\"info\">\n        <div className=\"categories\">\n          {post.categories.map((category) => (\n            <Link className=\"category\" key={category} to={`/posts/${category}`}>\n              {category}\n            </Link>\n          ))}\n        </div>\n      </div>\n\n      <h1 className=\"title\">{post.title}</h1>\n      <div className=\"info\">\n        <div className=\"author\">\n          posted by <strong>{post.author}</strong>,\n        </div>{' '}\n        {post.date}\n      </div>\n    </header>\n  );\n}\nexport default PostHeader;\n","import { Link } from 'gatsby';\nimport React from 'react';\nimport './style.scss';\n\nfunction PostNavigator({ prevPost, nextPost }) {\n  return (\n    <div className=\"post-navigator\">\n      <div className=\"post-navigator-card-wrapper\">\n        {nextPost && (\n          <Link className=\"post-card prev\" key={nextPost.id} to={nextPost.slug}>\n            <div className=\"direction\">이전 글</div>\n            <div className=\"title\">{nextPost.title}</div>\n          </Link>\n        )}\n      </div>\n      <div className=\"post-navigator-card-wrapper\">\n        {prevPost && (\n          <Link className=\"post-card next\" key={prevPost.id} to={prevPost.slug}>\n            <div className=\"direction\">다음 글</div>\n            <div className=\"title\">{prevPost.title}</div>\n          </Link>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default PostNavigator;\n","import React from 'react';\nimport './style.scss';\n\nfunction PostContent({ html }) {\n  return (\n    <div className=\"post-content\">\n      <div className=\"markdown\" dangerouslySetInnerHTML={{ __html: html }} />\n    </div>\n  );\n}\n\nexport default PostContent;\n","import React, { createRef, useEffect, useRef } from 'react';\n\nconst src = 'https://utteranc.es/client.js';\nconst branch = 'master';\n\nfunction Utterances({ repo, path }) {\n  const rootElm = createRef();\n  const isUtterancesLoaded = useRef(false);\n\n  useEffect(() => {\n    if (!rootElm.current || isUtterancesLoaded.current) return;\n    const storedIsDarkMode = localStorage.getItem('isDarkMode');\n\n    const utterances = document.createElement('script');\n    const utterancesConfig = {\n      src,\n      repo,\n      branch,\n      theme: JSON.parse(storedIsDarkMode) ? 'photon-dark' : 'github-light',\n      label: 'comment',\n      async: true,\n      'issue-term': 'pathname',\n      crossorigin: 'anonymous',\n    };\n\n    Object.keys(utterancesConfig).forEach((configKey) => {\n      utterances.setAttribute(configKey, utterancesConfig[configKey]);\n    });\n    rootElm.current.appendChild(utterances);\n    isUtterancesLoaded.current = true;\n  }, [repo, rootElm, path]);\n\n  return <div className=\"utterances\" ref={rootElm} />;\n}\n\nexport default Utterances;\n","import React from 'react';\nimport { graphql } from 'gatsby';\nimport Layout from '../layout';\nimport Seo from '../components/seo';\nimport PostHeader from '../components/post-header';\nimport PostNavigator from '../components/post-navigator';\nimport Post from '../models/post';\nimport PostContent from '../components/post-content';\nimport Utterances from '../components/utterances';\n\nfunction BlogTemplate({ data }) {\n  const curPost = new Post(data.cur);\n  const prevPost = data.prev && new Post(data.prev);\n  const nextPost = data.next && new Post(data.next);\n  const { comments } = data.site?.siteMetadata;\n  const utterancesRepo = comments?.utterances?.repo;\n\n  return (\n    <Layout>\n      <Seo title={curPost?.title} description={curPost?.excerpt} />\n      <PostHeader post={curPost} />\n      <PostContent html={curPost.html} />\n      <PostNavigator prevPost={prevPost} nextPost={nextPost} />\n      {utterancesRepo && <Utterances repo={utterancesRepo} path={curPost.slug} />}\n    </Layout>\n  );\n}\n\nexport default BlogTemplate;\n\nexport const pageQuery = graphql`\n  query($slug: String, $nextSlug: String, $prevSlug: String) {\n    cur: markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      html\n      excerpt(pruneLength: 500, truncate: true)\n      frontmatter {\n        date(formatString: \"MMMM DD, YYYY\")\n        title\n        categories\n        author\n        emoji\n      }\n      fields {\n        slug\n      }\n    }\n\n    next: markdownRemark(fields: { slug: { eq: $nextSlug } }) {\n      id\n      html\n      frontmatter {\n        date(formatString: \"MMMM DD, YYYY\")\n        title\n        categories\n        author\n        emoji\n      }\n      fields {\n        slug\n      }\n    }\n\n    prev: markdownRemark(fields: { slug: { eq: $prevSlug } }) {\n      id\n      html\n      frontmatter {\n        date(formatString: \"MMMM DD, YYYY\")\n        title\n        categories\n        author\n        emoji\n      }\n      fields {\n        slug\n      }\n    }\n\n    site {\n      siteMetadata {\n        siteUrl\n        comments {\n          utterances {\n            repo\n          }\n        }\n      }\n    }\n  }\n`;\n"],"names":["post","className","key","to","category","prevPost","nextPost","slug","html","dangerouslySetInnerHTML","__html","repo","path","rootElm","createRef","isUtterancesLoaded","useRef","useEffect","storedIsDarkMode","localStorage","utterances","document","utterancesConfig","src","branch","theme","JSON","label","async","crossorigin","Object","ref","data","curPost","comments","utterancesRepo","title","description","excerpt"],"sourceRoot":""}